   1: 0000: \*****************************************************************************
   2: 0000: \***                                                                         *
   3: 0000: \***   4680 BASIC LIST                                                       *
   4: 0000: \***                                                                         *
   5: 0000: \***   Copyright (c) 2010 Stuart Highley                                     *
   6: 0000: \***   All rights reserved                                                   *
   7: 0000: \***                                                                         *
   8: 0000: \***   Provides a big string array of up to about 256,000,000 elements.      *
   9: 0000: \***   Currently only one list per program though.                           *
  10: 0000: \***                                                                         *
  11: 0000: \***                                                                         *
  12: 0000: \***                                                                         *
  13: 0000: \***   Reference : LISTLIB.BAS                                               *
  14: 0000: \***                                                                         *
  15: 0000: \***   Version A      Stuart Highley       28th October 2010                 *
  16: 0000: \***                                                                         *
  17: 0000: \***   Version B      Tittoo Thomas        05th August  2011                 *
  18: 0000: \***      Cloned LISTLIB to support INTEGER*1, INTEGER*2 and INTEGER*4       *
  19: 0000: \***                                                                         *
  20: 0000: \*****************************************************************************
  21: 0000: 
  22: 0000: STRING TEMP$(1)
  23: 0000: INTEGER*4 PTRS%(1)
  24: 0000: INTEGER*4 CURRENT.PTRS%
  25: 0000: INTEGER*4 PTR.TO.TEMP%
  26: 0000: INTEGER*4 ELEMENTS.PER.ARRAY%
  27: 0000: 
  28: 0000: %INCLUDE I1LISTD.J86                                                     !BTT
  29: 0000: \*****************************************************************************
  30: 0000: \***                                                                         *
  31: 0000: \***   4680 BASIC INTEGER*1 LIST - Declarations                              *
  32: 0000: \***                                                                         *
  33: 0000: \***   Provides a big string array of up to about 256,000,000 elements.      *
  34: 0000: \***   Currently only one list per program though.                           *
  35: 0000: \***                                                                         *
  36: 0000: \***                                                                         *
  37: 0000: \***   Reference : I1LISTD.J86                                               *
  38: 0000: \***                                                                         *
  39: 0000: \***   Version A      Tittoo Thomas        05th August  2011                 *
  40: 0000: \***      Cloned LISTLIB to support INTEGER*1, INTEGER*2 and INTEGER*4       *
  41: 0000: \***                                                                         *
  42: 0000: \*****************************************************************************
  43: 0000: INTEGER*1 I1.TEMP.ARRAY%(1)
  44: 0000: INTEGER*4 I1.ARRAY.PTR.TABLE%(1)
  45: 0000: INTEGER*4 CURRENT.I1.PTR.COUNT%
  46: 0000: INTEGER*4 PTR.TO.I1.TEMP.ARRAY%
  47: 0000: INTEGER*4 I1.ELEMENTS.PER.ARRAY%
  48: 0000: 
  49: 0000: 
  50: 0000: %INCLUDE I2LISTD.J86                                                     !BTT
  51: 0000: \*****************************************************************************
  52: 0000: \***                                                                         *
  53: 0000: \***   4680 BASIC INTEGER*2 LIST - Declarations                              *
  54: 0000: \***                                                                         *
  55: 0000: \***   Provides a big string array of up to about 256,000,000 elements.      *
  56: 0000: \***   Currently only one list per program though.                           *
  57: 0000: \***                                                                         *
  58: 0000: \***                                                                         *
  59: 0000: \***   Reference : I2LISTD.J86                                               *
  60: 0000: \***                                                                         *
  61: 0000: \***   Version A      Tittoo Thomas        05th August  2011                 *
  62: 0000: \***      Cloned LISTLIB to support INTEGER*1, INTEGER*2 and INTEGER*4       *
  63: 0000: \***                                                                         *
  64: 0000: \*****************************************************************************
  65: 0000: INTEGER*2 I2.TEMP.ARRAY%(1)
  66: 0000: INTEGER*4 I2.ARRAY.PTR.TABLE%(1)
  67: 0000: INTEGER*4 CURRENT.I2.PTR.COUNT%
  68: 0000: INTEGER*4 PTR.TO.I2.TEMP.ARRAY%
  69: 0000: INTEGER*4 I2.ELEMENTS.PER.ARRAY%
  70: 0000: 
  71: 0000: 
  72: 0000: %INCLUDE I4LISTD.J86                                                     !BTT
  73: 0000: \*****************************************************************************
  74: 0000: \***                                                                         *
  75: 0000: \***   4680 BASIC INTEGER*4 LIST - Declarations                              *
  76: 0000: \***                                                                         *
  77: 0000: \***   Provides a big string array of up to about 256,000,000 elements.      *
  78: 0000: \***   Currently only one list per program though.                           *
  79: 0000: \***                                                                         *
  80: 0000: \***                                                                         *
  81: 0000: \***   Reference : I4LISTD.J86                                               *
  82: 0000: \***                                                                         *
  83: 0000: \***   Version A      Tittoo Thomas        05th August  2011                 *
  84: 0000: \***      Cloned LISTLIB to support INTEGER*1, INTEGER*2 and INTEGER*4       *
  85: 0000: \***                                                                         *
  86: 0000: \*****************************************************************************
  87: 0000: INTEGER*4 I4.TEMP.ARRAY%(1)
  88: 0000: INTEGER*4 I4.ARRAY.PTR.TABLE%(1)
  89: 0000: INTEGER*4 CURRENT.I4.PTR.COUNT%
  90: 0000: INTEGER*4 PTR.TO.I4.TEMP.ARRAY%
  91: 0000: INTEGER*4 I4.ELEMENTS.PER.ARRAY%
  92: 0000: 
  93: 0000: 
  94: 0000: 
  95: 0000: %INCLUDE I1LISTF.J86                                                     !BTT
  96: 0000: \*****************************************************************************
  97: 0000: \***                                                                         *
  98: 0000: \***   4680 BASIC INTEGER*1 LIST - Functions                                 *
  99: 0000: \***                                                                         *
 100: 0000: \***   Provides a big string array of up to about 256,000,000 elements.      *
 101: 0000: \***   Currently only one list per program though.                           *
 102: 0000: \***                                                                         *
 103: 0000: \***                                                                         *
 104: 0000: \***   Reference : I1LISTF.J86                                               *
 105: 0000: \***                                                                         *
 106: 0000: \***   Version A      Tittoo Thomas        05th August  2011                 *
 107: 0000: \***      Cloned LISTLIB to support INTEGER*1, INTEGER*2 and INTEGER*4       *
 108: 0000: \***                                                                         *
 109: 0000: \*****************************************************************************
 110: 0000: 
 111: 0000: \*****************************************************************************
 112: 0000: \***                                                                         *
 113: 0000: \***    CREATE.NEW.I1.ARRAY                                                  *
 114: 0000: \***    Resets I1.TEMP.ARRAY% so BASIC thinks there's no array allocated,    *
 115: 0000: \***    DIMs a new array, then saves the address of the array in an array of *
 116: 0000: \***    pointers.                                                            *
 117: 0000: \***                                                                         *
 118: 0000: \*****************************************************************************
 119: 0000: 
 120: 0000: SUB CREATE.NEW.I1.ARRAY(ELE%)
 121: 0022: 
 122: 0022:     INTEGER*4 ELE%
 123: 0022:     INTEGER*4 TEMP%
 124: 0022:     INTEGER*4 POKE.ADR%
 125: 0022: 
 126: 0022:     !Fool BASIC into thinking it hasn't allocated the I1.TEMP.ARRAY% array
 127: 0022:     POKE PTR.TO.I1.TEMP.ARRAY%, 0
 128: 0038:     POKE PTR.TO.I1.TEMP.ARRAY% + 1, 0
 129: 0056:     POKE PTR.TO.I1.TEMP.ARRAY% + 2, 0
 130: 0074:     POKE PTR.TO.I1.TEMP.ARRAY% + 3, 0
 131: 0092: 
 132: 0092:     !Allocate an array
 133: 0092:     DIM I1.TEMP.ARRAY%(ELE%)
 134: 00c4: 
 135: 00c4:     !Save away the address of the array
 136: 00c4:     POKE.ADR% = VARPTR(TEMP%)
 137: 00dd:     POKE POKE.ADR%, PEEK(PTR.TO.I1.TEMP.ARRAY%)
 138: 0100:     POKE POKE.ADR% + 1, PEEK(PTR.TO.I1.TEMP.ARRAY% + 1)
 139: 0131:     POKE POKE.ADR% + 2, PEEK(PTR.TO.I1.TEMP.ARRAY% + 2)
 140: 0162:     POKE POKE.ADR% + 3, PEEK(PTR.TO.I1.TEMP.ARRAY% + 3)
 141: 0193:     I1.ARRAY.PTR.TABLE%(CURRENT.I1.PTR.COUNT%) = TEMP%
 142: 01b9:     CURRENT.I1.PTR.COUNT% = CURRENT.I1.PTR.COUNT% + 1
 143: 01d2: 
 144: 01d2: END SUB
 145: 01e6: 
 146: 01e6: \*****************************************************************************
 147: 01e6: \***                                                                         *
 148: 01e6: \***    I1.LIST.DIM                                                          *
 149: 01e6: \***                                                                         *
 150: 01e6: \***    Dimension the list up to 256,000,000 elements (16,000 * 16,000)      *
 151: 01e6: \***    if you have the RAM available!                                       *
 152: 01e6: \***                                                                         *
 153: 01e6: \*****************************************************************************
 154: 01e6: 
 155: 01e6: FUNCTION I1.LIST.DIM(NEW.ELEMENTS%) PUBLIC
 156: 020a: 
 157: 020a:     INTEGER*1 I1.LIST.DIM
 158: 020a:     INTEGER*4 A%
 159: 020a:     INTEGER*4 NEW.ELEMENTS%
 160: 020a:     INTEGER*4 ARRAY%
 161: 020a:     INTEGER*4 PEEK.ADR%
 162: 020a: 
 163: 020a:     !Set up constants
 164: 020a:     PTR.TO.I1.TEMP.ARRAY% = VARPTR(I1.TEMP.ARRAY%)
 165: 0223:     I1.ELEMENTS.PER.ARRAY% = 16000
 166: 0238: 
 167: 0238:     !Clear out any existing arrays
 168: 0238:     FOR A% = 0 TO (CURRENT.I1.PTR.COUNT% - 1)
 169: 0250:         ARRAY% = I1.ARRAY.PTR.TABLE%(A%)
 170: 0276:         IF ARRAY% <> 0 THEN \
 171: 0294:         BEGIN
 172: 0294:             PEEK.ADR% = VARPTR(ARRAY%)
 173: 02ad:             POKE PTR.TO.I1.TEMP.ARRAY%, PEEK(PEEK.ADR%)
 174: 02d0:             POKE PTR.TO.I1.TEMP.ARRAY% + 1, PEEK(PEEK.ADR% + 1)
 175: 0301:             POKE PTR.TO.I1.TEMP.ARRAY% + 2, PEEK(PEEK.ADR% + 2)
 176: 0332:             POKE PTR.TO.I1.TEMP.ARRAY% + 3, PEEK(PEEK.ADR% + 3)
 177: 0363:             DIM I1.TEMP.ARRAY%(0)
 178: 038c:         ENDIF
 179: 0394:     NEXT A%
 180: 03c7: 
 181: 03c7:     !Dimension an integer array to hold the pointers to the actual arrays
 182: 03c7:     CURRENT.I1.PTR.COUNT% = 0
 183: 03dc:     DIM I1.ARRAY.PTR.TABLE%(NEW.ELEMENTS% / I1.ELEMENTS.PER.ARRAY%)
 184: 0412: 
 185: 0412:     !Create as many string arrays as required
 186: 0412:     WHILE NEW.ELEMENTS% > I1.ELEMENTS.PER.ARRAY%
 187: 041c:         CALL CREATE.NEW.I1.ARRAY(I1.ELEMENTS.PER.ARRAY%)
 188: 042f:         NEW.ELEMENTS% = NEW.ELEMENTS% - I1.ELEMENTS.PER.ARRAY%
 189: 044a:     WEND
 190: 0461:     CALL CREATE.NEW.I1.ARRAY(NEW.ELEMENTS%)
 191: 0475: 
 192: 0475:     I1.LIST.DIM = 0
 193: 0481: 
 194: 0481: END FUNCTION
 195: 0498: 
 196: 0498: \*****************************************************************************
 197: 0498: \***                                                                         *
 198: 0498: \***    I1.LIST.SET                                                          *
 199: 0498: \***                                                                         *
 200: 0498: \***    Sets an element in the list to a given INTEGER*1                     *
 201: 0498: \***                                                                         *
 202: 0498: \*****************************************************************************
 203: 0498: 
 204: 0498: SUB I1.LIST.SET(ELEMENT%, DATA%) PUBLIC
 205: 04bc: 
 206: 04bc:     INTEGER*4 PEEK.ADR%
 207: 04bc:     INTEGER*4 ARRAY%
 208: 04bc:     INTEGER*4 ELEMENT%
 209: 04bc:     INTEGER*1 DATA%
 210: 04bc: 
 211: 04bc:     !Set up I1.TEMP.ARRAY% to point to the right array
 212: 04bc:     ARRAY% = I1.ARRAY.PTR.TABLE%(ELEMENT% / I1.ELEMENTS.PER.ARRAY%)
 213: 04e9:     PEEK.ADR% = VARPTR(ARRAY%)
 214: 0502:     POKE PTR.TO.I1.TEMP.ARRAY%, PEEK(PEEK.ADR%)
 215: 0525:     POKE PTR.TO.I1.TEMP.ARRAY% + 1, PEEK(PEEK.ADR% + 1)
 216: 0556:     POKE PTR.TO.I1.TEMP.ARRAY% + 2, PEEK(PEEK.ADR% + 2)
 217: 0587:     POKE PTR.TO.I1.TEMP.ARRAY% + 3, PEEK(PEEK.ADR% + 3)
 218: 05b8: 
 219: 05b8:     !Update the element in the array
 220: 05b8:     I1.TEMP.ARRAY%(MOD(ELEMENT%, I1.ELEMENTS.PER.ARRAY%)) = DATA%
 221: 05e9: 
 222: 05e9: END SUB
 223: 05fd: 
 224: 05fd: \*****************************************************************************
 225: 05fd: \***                                                                         *
 226: 05fd: \***    I1.LIST.GET                                                          *
 227: 05fd: \***                                                                         *
 228: 05fd: \***    Gets the INTEGER*1 value from a given element in the list.           *
 229: 05fd: \***                                                                         *
 230: 05fd: \*****************************************************************************
 231: 05fd: 
 232: 05fd: SUB I1.LIST.GET(ELEMENT%, RETURNED.DATA%) PUBLIC
 233: 0621: 
 234: 0621:     INTEGER*4 PEEK.ADR%
 235: 0621:     INTEGER*4 ARRAY%
 236: 0621:     INTEGER*4 ELEMENT%
 237: 0621:     INTEGER*1 RETURNED.DATA%
 238: 0621: 
 239: 0621:     !Set up I1.TEMP.ARRAY% to point to the right array
 240: 0621:     ARRAY% = I1.ARRAY.PTR.TABLE%(ELEMENT% / I1.ELEMENTS.PER.ARRAY%)
 241: 064e:     PEEK.ADR% = VARPTR(ARRAY%)
 242: 0667:     POKE PTR.TO.I1.TEMP.ARRAY%, PEEK(PEEK.ADR%)
 243: 068a:     POKE PTR.TO.I1.TEMP.ARRAY% + 1, PEEK(PEEK.ADR% + 1)
 244: 06bb:     POKE PTR.TO.I1.TEMP.ARRAY% + 2, PEEK(PEEK.ADR% + 2)
 245: 06ec:     POKE PTR.TO.I1.TEMP.ARRAY% + 3, PEEK(PEEK.ADR% + 3)
 246: 071d: 
 247: 071d:     !Get the element from the array
 248: 071d:     RETURNED.DATA% = I1.TEMP.ARRAY%(MOD(ELEMENT%, I1.ELEMENTS.PER.ARRAY%))
 249: 0748: 
 250: 0748: END SUB
 251: 075c: 
 252: 075c: %INCLUDE I2LISTF.J86                                                     !BTT
 253: 075c: \*****************************************************************************
 254: 075c: \***                                                                         *
 255: 075c: \***   4680 BASIC INTEGER*2 LIST - Functions                                 *
 256: 075c: \***                                                                         *
 257: 075c: \***   Provides a big string array of up to about 256,000,000 elements.      *
 258: 075c: \***   Currently only one list per program though.                           *
 259: 075c: \***                                                                         *
 260: 075c: \***                                                                         *
 261: 075c: \***   Reference : I2LISTF.J86                                               *
 262: 075c: \***                                                                         *
 263: 075c: \***   Version A      Tittoo Thomas        05th August  2011                 *
 264: 075c: \***      Cloned LISTLIB to support INTEGER*1, INTEGER*2 and INTEGER*4       *
 265: 075c: \***                                                                         *
 266: 075c: \*****************************************************************************
 267: 075c: 
 268: 075c: \*****************************************************************************
 269: 075c: \***                                                                         *
 270: 075c: \***    CREATE.NEW.I2.ARRAY                                                  *
 271: 075c: \***    Resets I2.TEMP.ARRAY% so BASIC thinks there's no array allocated,    *
 272: 075c: \***    DIMs a new array, then saves the address of the array in an array of *
 273: 075c: \***    pointers.                                                            *
 274: 075c: \***                                                                         *
 275: 075c: \*****************************************************************************
 276: 075c: 
 277: 075c: SUB CREATE.NEW.I2.ARRAY(ELE%)
 278: 0780: 
 279: 0780:     INTEGER*4 ELE%
 280: 0780:     INTEGER*4 TEMP%
 281: 0780:     INTEGER*4 POKE.ADR%
 282: 0780: 
 283: 0780:     !Fool BASIC into thinking it hasn't allocated the I2.TEMP.ARRAY% array
 284: 0780:     POKE PTR.TO.I2.TEMP.ARRAY%, 0
 285: 0797:     POKE PTR.TO.I2.TEMP.ARRAY% + 1, 0
 286: 07b5:     POKE PTR.TO.I2.TEMP.ARRAY% + 2, 0
 287: 07d3:     POKE PTR.TO.I2.TEMP.ARRAY% + 3, 0
 288: 07f1: 
 289: 07f1:     !Allocate an array
 290: 07f1:     DIM I2.TEMP.ARRAY%(ELE%)
 291: 0823: 
 292: 0823:     !Save away the address of the array
 293: 0823:     POKE.ADR% = VARPTR(TEMP%)
 294: 083c:     POKE POKE.ADR%, PEEK(PTR.TO.I2.TEMP.ARRAY%)
 295: 085f:     POKE POKE.ADR% + 1, PEEK(PTR.TO.I2.TEMP.ARRAY% + 1)
 296: 0890:     POKE POKE.ADR% + 2, PEEK(PTR.TO.I2.TEMP.ARRAY% + 2)
 297: 08c1:     POKE POKE.ADR% + 3, PEEK(PTR.TO.I2.TEMP.ARRAY% + 3)
 298: 08f2:     I2.ARRAY.PTR.TABLE%(CURRENT.I2.PTR.COUNT%) = TEMP%
 299: 0918:     CURRENT.I2.PTR.COUNT% = CURRENT.I2.PTR.COUNT% + 1
 300: 0931: 
 301: 0931: END SUB
 302: 0945: 
 303: 0945: \*****************************************************************************
 304: 0945: \***                                                                         *
 305: 0945: \***    I2.LIST.DIM                                                          *
 306: 0945: \***                                                                         *
 307: 0945: \***    Dimension the list up to 256,000,000 elements (16,000 * 16,000)      *
 308: 0945: \***    if you have the RAM available!                                       *
 309: 0945: \***                                                                         *
 310: 0945: \*****************************************************************************
 311: 0945: 
 312: 0945: FUNCTION I2.LIST.DIM(NEW.ELEMENTS%) PUBLIC
 313: 0969: 
 314: 0969:     INTEGER*2 I2.LIST.DIM
 315: 0969:     INTEGER*4 A%
 316: 0969:     INTEGER*4 NEW.ELEMENTS%
 317: 0969:     INTEGER*4 ARRAY%
 318: 0969:     INTEGER*4 PEEK.ADR%
 319: 0969: 
 320: 0969:     !Set up constants
 321: 0969:     PTR.TO.I2.TEMP.ARRAY% = VARPTR(I2.TEMP.ARRAY%)
 322: 0982:     I2.ELEMENTS.PER.ARRAY% = 16000
 323: 0997: 
 324: 0997:     !Clear out any existing arrays
 325: 0997:     FOR A% = 0 TO (CURRENT.I2.PTR.COUNT% - 1)
 326: 09af:         ARRAY% = I2.ARRAY.PTR.TABLE%(A%)
 327: 09d5:         IF ARRAY% <> 0 THEN \
 328: 09f3:         BEGIN
 329: 09f3:             PEEK.ADR% = VARPTR(ARRAY%)
 330: 0a0c:             POKE PTR.TO.I2.TEMP.ARRAY%, PEEK(PEEK.ADR%)
 331: 0a2f:             POKE PTR.TO.I2.TEMP.ARRAY% + 1, PEEK(PEEK.ADR% + 1)
 332: 0a60:             POKE PTR.TO.I2.TEMP.ARRAY% + 2, PEEK(PEEK.ADR% + 2)
 333: 0a91:             POKE PTR.TO.I2.TEMP.ARRAY% + 3, PEEK(PEEK.ADR% + 3)
 334: 0ac2:             DIM I2.TEMP.ARRAY%(0)
 335: 0aeb:         ENDIF
 336: 0af3:     NEXT A%
 337: 0b26: 
 338: 0b26:     !Dimension an integer array to hold the pointers to the actual arrays
 339: 0b26:     CURRENT.I2.PTR.COUNT% = 0
 340: 0b3b:     DIM I2.ARRAY.PTR.TABLE%(NEW.ELEMENTS% / I2.ELEMENTS.PER.ARRAY%)
 341: 0b71: 
 342: 0b71:     !Create as many string arrays as required
 343: 0b71:     WHILE NEW.ELEMENTS% > I2.ELEMENTS.PER.ARRAY%
 344: 0b7b:         CALL CREATE.NEW.I2.ARRAY(I2.ELEMENTS.PER.ARRAY%)
 345: 0b8e:         NEW.ELEMENTS% = NEW.ELEMENTS% - I2.ELEMENTS.PER.ARRAY%
 346: 0ba9:     WEND
 347: 0bc0:     CALL CREATE.NEW.I2.ARRAY(NEW.ELEMENTS%)
 348: 0bd4: 
 349: 0bd4:     I2.LIST.DIM = 0
 350: 0be1: 
 351: 0be1: END FUNCTION
 352: 0bf8: 
 353: 0bf8: \*****************************************************************************
 354: 0bf8: \***                                                                         *
 355: 0bf8: \***    I2.LIST.SET                                                          *
 356: 0bf8: \***                                                                         *
 357: 0bf8: \***    Sets an element in the list to a given INTEGER*2                     *
 358: 0bf8: \***                                                                         *
 359: 0bf8: \*****************************************************************************
 360: 0bf8: 
 361: 0bf8: SUB I2.LIST.SET(ELEMENT%, DATA%) PUBLIC
 362: 0c1c: 
 363: 0c1c:     INTEGER*4 PEEK.ADR%
 364: 0c1c:     INTEGER*4 ARRAY%
 365: 0c1c:     INTEGER*4 ELEMENT%
 366: 0c1c:     INTEGER*2 DATA%
 367: 0c1c: 
 368: 0c1c:     !Set up I2.TEMP.ARRAY% to point to the right array
 369: 0c1c:     ARRAY% = I2.ARRAY.PTR.TABLE%(ELEMENT% / I2.ELEMENTS.PER.ARRAY%)
 370: 0c49:     PEEK.ADR% = VARPTR(ARRAY%)
 371: 0c62:     POKE PTR.TO.I2.TEMP.ARRAY%, PEEK(PEEK.ADR%)
 372: 0c85:     POKE PTR.TO.I2.TEMP.ARRAY% + 1, PEEK(PEEK.ADR% + 1)
 373: 0cb6:     POKE PTR.TO.I2.TEMP.ARRAY% + 2, PEEK(PEEK.ADR% + 2)
 374: 0ce7:     POKE PTR.TO.I2.TEMP.ARRAY% + 3, PEEK(PEEK.ADR% + 3)
 375: 0d18: 
 376: 0d18:     !Update the element in the array
 377: 0d18:     I2.TEMP.ARRAY%(MOD(ELEMENT%, I2.ELEMENTS.PER.ARRAY%)) = DATA%
 378: 0d49: 
 379: 0d49: END SUB
 380: 0d5d: 
 381: 0d5d: \*****************************************************************************
 382: 0d5d: \***                                                                         *
 383: 0d5d: \***    I2.LIST.GET                                                          *
 384: 0d5d: \***                                                                         *
 385: 0d5d: \***    Gets the INTEGER*2 value from a given element in the list.           *
 386: 0d5d: \***                                                                         *
 387: 0d5d: \*****************************************************************************
 388: 0d5d: 
 389: 0d5d: SUB I2.LIST.GET(ELEMENT%, RETURNED.DATA%) PUBLIC
 390: 0d81: 
 391: 0d81:     INTEGER*4 PEEK.ADR%
 392: 0d81:     INTEGER*4 ARRAY%
 393: 0d81:     INTEGER*4 ELEMENT%
 394: 0d81:     INTEGER*2 RETURNED.DATA%
 395: 0d81: 
 396: 0d81:     !Set up I2.TEMP.ARRAY% to point to the right array
 397: 0d81:     ARRAY% = I2.ARRAY.PTR.TABLE%(ELEMENT% / I2.ELEMENTS.PER.ARRAY%)
 398: 0dae:     PEEK.ADR% = VARPTR(ARRAY%)
 399: 0dc7:     POKE PTR.TO.I2.TEMP.ARRAY%, PEEK(PEEK.ADR%)
 400: 0dea:     POKE PTR.TO.I2.TEMP.ARRAY% + 1, PEEK(PEEK.ADR% + 1)
 401: 0e1b:     POKE PTR.TO.I2.TEMP.ARRAY% + 2, PEEK(PEEK.ADR% + 2)
 402: 0e4c:     POKE PTR.TO.I2.TEMP.ARRAY% + 3, PEEK(PEEK.ADR% + 3)
 403: 0e7d: 
 404: 0e7d:     !Get the element from the array
 405: 0e7d:     RETURNED.DATA% = I2.TEMP.ARRAY%(MOD(ELEMENT%, I2.ELEMENTS.PER.ARRAY%))
 406: 0ea8: 
 407: 0ea8: END SUB
 408: 0ebc: 
 409: 0ebc: %INCLUDE I4LISTF.J86                                                     !BTT
 410: 0ebc: \*****************************************************************************
 411: 0ebc: \***                                                                         *
 412: 0ebc: \***   4680 BASIC INTEGER*4 LIST - Functions                                 *
 413: 0ebc: \***                                                                         *
 414: 0ebc: \***   Provides a big string array of up to about 256,000,000 elements.      *
 415: 0ebc: \***   Currently only one list per program though.                           *
 416: 0ebc: \***                                                                         *
 417: 0ebc: \***                                                                         *
 418: 0ebc: \***   Reference : I4LISTF.J86                                               *
 419: 0ebc: \***                                                                         *
 420: 0ebc: \***   Version A      Tittoo Thomas        05th August  2011                 *
 421: 0ebc: \***      Cloned LISTLIB to support INTEGER*1, INTEGER*2 and INTEGER*4       *
 422: 0ebc: \***                                                                         *
 423: 0ebc: \*****************************************************************************
 424: 0ebc: 
 425: 0ebc: \*****************************************************************************
 426: 0ebc: \***                                                                         *
 427: 0ebc: \***    CREATE.NEW.I4.ARRAY                                                  *
 428: 0ebc: \***    Resets I4.TEMP.ARRAY% so BASIC thinks there's no array allocated,    *
 429: 0ebc: \***    DIMs a new array, then saves the address of the array in an array of *
 430: 0ebc: \***    pointers.                                                            *
 431: 0ebc: \***                                                                         *
 432: 0ebc: \*****************************************************************************
 433: 0ebc: 
 434: 0ebc: SUB CREATE.NEW.I4.ARRAY(ELE%)
 435: 0ee0: 
 436: 0ee0:     INTEGER*4 ELE%
 437: 0ee0:     INTEGER*4 TEMP%
 438: 0ee0:     INTEGER*4 POKE.ADR%
 439: 0ee0: 
 440: 0ee0:     !Fool BASIC into thinking it hasn't allocated the I4.TEMP.ARRAY% array
 441: 0ee0:     POKE PTR.TO.I4.TEMP.ARRAY%, 0
 442: 0ef7:     POKE PTR.TO.I4.TEMP.ARRAY% + 1, 0
 443: 0f15:     POKE PTR.TO.I4.TEMP.ARRAY% + 2, 0
 444: 0f33:     POKE PTR.TO.I4.TEMP.ARRAY% + 3, 0
 445: 0f51: 
 446: 0f51:     !Allocate an array
 447: 0f51:     DIM I4.TEMP.ARRAY%(ELE%)
 448: 0f83: 
 449: 0f83:     !Save away the address of the array
 450: 0f83:     POKE.ADR% = VARPTR(TEMP%)
 451: 0f9c:     POKE POKE.ADR%, PEEK(PTR.TO.I4.TEMP.ARRAY%)
 452: 0fbf:     POKE POKE.ADR% + 1, PEEK(PTR.TO.I4.TEMP.ARRAY% + 1)
 453: 0ff0:     POKE POKE.ADR% + 2, PEEK(PTR.TO.I4.TEMP.ARRAY% + 2)
 454: 1021:     POKE POKE.ADR% + 3, PEEK(PTR.TO.I4.TEMP.ARRAY% + 3)
 455: 1052:     I4.ARRAY.PTR.TABLE%(CURRENT.I4.PTR.COUNT%) = TEMP%
 456: 1078:     CURRENT.I4.PTR.COUNT% = CURRENT.I4.PTR.COUNT% + 1
 457: 1091: 
 458: 1091: END SUB
 459: 10a5: 
 460: 10a5: \*****************************************************************************
 461: 10a5: \***                                                                         *
 462: 10a5: \***    I4.LIST.DIM                                                          *
 463: 10a5: \***                                                                         *
 464: 10a5: \***    Dimension the list up to 256,000,000 elements (16,000 * 16,000)      *
 465: 10a5: \***    if you have the RAM available!                                       *
 466: 10a5: \***                                                                         *
 467: 10a5: \*****************************************************************************
 468: 10a5: 
 469: 10a5: FUNCTION I4.LIST.DIM(NEW.ELEMENTS%) PUBLIC
 470: 10c9: 
 471: 10c9:     INTEGER*4 I4.LIST.DIM
 472: 10c9:     INTEGER*4 A%
 473: 10c9:     INTEGER*4 NEW.ELEMENTS%
 474: 10c9:     INTEGER*4 ARRAY%
 475: 10c9:     INTEGER*4 PEEK.ADR%
 476: 10c9: 
 477: 10c9:     !Set up constants
 478: 10c9:     PTR.TO.I4.TEMP.ARRAY% = VARPTR(I4.TEMP.ARRAY%)
 479: 10e2:     I4.ELEMENTS.PER.ARRAY% = 16000
 480: 10f7: 
 481: 10f7:     !Clear out any existing arrays
 482: 10f7:     FOR A% = 0 TO (CURRENT.I4.PTR.COUNT% - 1)
 483: 110f:         ARRAY% = I4.ARRAY.PTR.TABLE%(A%)
 484: 1135:         IF ARRAY% <> 0 THEN \
 485: 1153:         BEGIN
 486: 1153:             PEEK.ADR% = VARPTR(ARRAY%)
 487: 116c:             POKE PTR.TO.I4.TEMP.ARRAY%, PEEK(PEEK.ADR%)
 488: 118f:             POKE PTR.TO.I4.TEMP.ARRAY% + 1, PEEK(PEEK.ADR% + 1)
 489: 11c0:             POKE PTR.TO.I4.TEMP.ARRAY% + 2, PEEK(PEEK.ADR% + 2)
 490: 11f1:             POKE PTR.TO.I4.TEMP.ARRAY% + 3, PEEK(PEEK.ADR% + 3)
 491: 1222:             DIM I4.TEMP.ARRAY%(0)
 492: 124b:         ENDIF
 493: 1253:     NEXT A%
 494: 1286: 
 495: 1286:     !Dimension an integer array to hold the pointers to the actual arrays
 496: 1286:     CURRENT.I4.PTR.COUNT% = 0
 497: 129b:     DIM I4.ARRAY.PTR.TABLE%(NEW.ELEMENTS% / I4.ELEMENTS.PER.ARRAY%)
 498: 12d1: 
 499: 12d1:     !Create as many string arrays as required
 500: 12d1:     WHILE NEW.ELEMENTS% > I4.ELEMENTS.PER.ARRAY%
 501: 12db:         CALL CREATE.NEW.I4.ARRAY(I4.ELEMENTS.PER.ARRAY%)
 502: 12ee:         NEW.ELEMENTS% = NEW.ELEMENTS% - I4.ELEMENTS.PER.ARRAY%
 503: 1309:     WEND
 504: 1320:     CALL CREATE.NEW.I4.ARRAY(NEW.ELEMENTS%)
 505: 1334: 
 506: 1334:     I4.LIST.DIM = 0
 507: 134a: 
 508: 134a: END FUNCTION
 509: 1364: 
 510: 1364: \*****************************************************************************
 511: 1364: \***                                                                         *
 512: 1364: \***    I4.LIST.SET                                                          *
 513: 1364: \***                                                                         *
 514: 1364: \***    Sets an element in the list to a given INTEGER*4                     *
 515: 1364: \***                                                                         *
 516: 1364: \*****************************************************************************
 517: 1364: 
 518: 1364: SUB I4.LIST.SET(ELEMENT%, DATA%) PUBLIC
 519: 1388: 
 520: 1388:     INTEGER*4 PEEK.ADR%
 521: 1388:     INTEGER*4 ARRAY%
 522: 1388:     INTEGER*4 ELEMENT%
 523: 1388:     INTEGER*4 DATA%
 524: 1388: 
 525: 1388:     !Set up I4.TEMP.ARRAY% to point to the right array
 526: 1388:     ARRAY% = I4.ARRAY.PTR.TABLE%(ELEMENT% / I4.ELEMENTS.PER.ARRAY%)
 527: 13b5:     PEEK.ADR% = VARPTR(ARRAY%)
 528: 13ce:     POKE PTR.TO.I4.TEMP.ARRAY%, PEEK(PEEK.ADR%)
 529: 13f1:     POKE PTR.TO.I4.TEMP.ARRAY% + 1, PEEK(PEEK.ADR% + 1)
 530: 1422:     POKE PTR.TO.I4.TEMP.ARRAY% + 2, PEEK(PEEK.ADR% + 2)
 531: 1453:     POKE PTR.TO.I4.TEMP.ARRAY% + 3, PEEK(PEEK.ADR% + 3)
 532: 1484: 
 533: 1484:     !Update the element in the array
 534: 1484:     I4.TEMP.ARRAY%(MOD(ELEMENT%, I4.ELEMENTS.PER.ARRAY%)) = DATA%
 535: 14b2: 
 536: 14b2: END SUB
 537: 14c6: 
 538: 14c6: \*****************************************************************************
 539: 14c6: \***                                                                         *
 540: 14c6: \***    I4.LIST.GET                                                          *
 541: 14c6: \***                                                                         *
 542: 14c6: \***    Gets the INTEGER*4 value from a given element in the list.           *
 543: 14c6: \***                                                                         *
 544: 14c6: \*****************************************************************************
 545: 14c6: 
 546: 14c6: SUB I4.LIST.GET(ELEMENT%, RETURNED.DATA%) PUBLIC
 547: 14ea: 
 548: 14ea:     INTEGER*4 PEEK.ADR%
 549: 14ea:     INTEGER*4 ARRAY%
 550: 14ea:     INTEGER*4 ELEMENT%
 551: 14ea:     INTEGER*4 RETURNED.DATA%
 552: 14ea: 
 553: 14ea:     !Set up I4.TEMP.ARRAY% to point to the right array
 554: 14ea:     ARRAY% = I4.ARRAY.PTR.TABLE%(ELEMENT% / I4.ELEMENTS.PER.ARRAY%)
 555: 1517:     PEEK.ADR% = VARPTR(ARRAY%)
 556: 1530:     POKE PTR.TO.I4.TEMP.ARRAY%, PEEK(PEEK.ADR%)
 557: 1553:     POKE PTR.TO.I4.TEMP.ARRAY% + 1, PEEK(PEEK.ADR% + 1)
 558: 1584:     POKE PTR.TO.I4.TEMP.ARRAY% + 2, PEEK(PEEK.ADR% + 2)
 559: 15b5:     POKE PTR.TO.I4.TEMP.ARRAY% + 3, PEEK(PEEK.ADR% + 3)
 560: 15e6: 
 561: 15e6:     !Get the element from the array
 562: 15e6:     RETURNED.DATA% = I4.TEMP.ARRAY%(MOD(ELEMENT%, I4.ELEMENTS.PER.ARRAY%))
 563: 1614: 
 564: 1614: END SUB
 565: 1628: 
 566: 1628: 
 567: 1628: \*****************************************************************************
 568: 1628: \***                                                                         *
 569: 1628: \***    CREATE.NEW.ARRAY                                                     *
 570: 1628: \***    Resets TEMP$ so BASIC thinks there's no array allocated, DIMs a      *
 571: 1628: \***    new array, then saves the address of the array in an array of        *
 572: 1628: \***    pointers.                                                            *
 573: 1628: \***                                                                         *
 574: 1628: \*****************************************************************************
 575: 1628: 
 576: 1628: SUB CREATE.NEW.ARRAY(ELE%)
 577: 164c: 
 578: 164c:     INTEGER*4 ELE%
 579: 164c:     INTEGER*4 TEMP%
 580: 164c:     INTEGER*4 POKE.ADR%
 581: 164c: 
 582: 164c:     !Fool BASIC into thinking it hasn't allocated the TEMP$ array
 583: 164c:     POKE PTR.TO.TEMP%, 0
 584: 1663:     POKE PTR.TO.TEMP% + 1, 0
 585: 1681:     POKE PTR.TO.TEMP% + 2, 0
 586: 169f:     POKE PTR.TO.TEMP% + 3, 0
 587: 16bd: 
 588: 16bd:     !Allocate an array
 589: 16bd:     DIM TEMP$(ELE%)
 590: 16ef: 
 591: 16ef:     !Save away the address of the array
 592: 16ef:     POKE.ADR% = VARPTR(TEMP%)
 593: 1708:     POKE POKE.ADR%, PEEK(PTR.TO.TEMP%)
 594: 172b:     POKE POKE.ADR% + 1, PEEK(PTR.TO.TEMP% + 1)
 595: 175c:     POKE POKE.ADR% + 2, PEEK(PTR.TO.TEMP% + 2)
 596: 178d:     POKE POKE.ADR% + 3, PEEK(PTR.TO.TEMP% + 3)
 597: 17be:     PTRS%(CURRENT.PTRS%) = TEMP%
 598: 17e4:     CURRENT.PTRS% = CURRENT.PTRS% + 1
 599: 17fd: 
 600: 17fd: END SUB
 601: 1811: 
 602: 1811: \*****************************************************************************
 603: 1811: \***                                                                         *
 604: 1811: \***    LIST.DIM                                                             *
 605: 1811: \***                                                                         *
 606: 1811: \***    Dimension the list up to 256,000,000 elements (16,000 * 16,000)      *
 607: 1811: \***    if you have the RAM available!                                       *
 608: 1811: \***                                                                         *
 609: 1811: \*****************************************************************************
 610: 1811: 
 611: 1811: FUNCTION LIST.DIM(NEW.ELEMENTS%) PUBLIC
 612: 1835: 
 613: 1835:     INTEGER*4 A%
 614: 1835:     INTEGER*4 NEW.ELEMENTS%
 615: 1835:     INTEGER*4 ARRAY%
 616: 1835:     INTEGER*4 PEEK.ADR%
 617: 1835: 
 618: 1835:     !Set up constants
 619: 1835:     PTR.TO.TEMP% = VARPTR(TEMP$)
 620: 184e:     ELEMENTS.PER.ARRAY% = 16000
 621: 1863: 
 622: 1863:     !Clear out any existing arrays
 623: 1863:     FOR A% = 0 TO (CURRENT.PTRS% - 1)
 624: 187b:         ARRAY% = PTRS%(A%)
 625: 18a1:         IF ARRAY% <> 0 THEN BEGIN
 626: 18bf:             PEEK.ADR% = VARPTR(ARRAY%)
 627: 18d8:             POKE PTR.TO.TEMP%, PEEK(PEEK.ADR%)
 628: 18fb:             POKE PTR.TO.TEMP% + 1, PEEK(PEEK.ADR% + 1)
 629: 192c:             POKE PTR.TO.TEMP% + 2, PEEK(PEEK.ADR% + 2)
 630: 195d:             POKE PTR.TO.TEMP% + 3, PEEK(PEEK.ADR% + 3)
 631: 198e:             DIM TEMP$(0)
 632: 19b7:         ENDIF
 633: 19bf:     NEXT A%
 634: 19f2: 
 635: 19f2:     !Dimension an integer array to hold the pointers to the string arrays
 636: 19f2:     CURRENT.PTRS% = 0
 637: 1a07:     DIM PTRS%(NEW.ELEMENTS% / ELEMENTS.PER.ARRAY%)
 638: 1a3d: 
 639: 1a3d:     !Create as many string arrays as required
 640: 1a3d:     WHILE NEW.ELEMENTS% > ELEMENTS.PER.ARRAY%
 641: 1a47:         CALL CREATE.NEW.ARRAY(ELEMENTS.PER.ARRAY%)
 642: 1a5a:         NEW.ELEMENTS% = NEW.ELEMENTS% - ELEMENTS.PER.ARRAY%
 643: 1a75:     WEND
 644: 1a8c:     CALL CREATE.NEW.ARRAY(NEW.ELEMENTS%)
 645: 1aa0: 
 646: 1aa0: END FUNCTION
 647: 1ab4: 
 648: 1ab4: \*****************************************************************************
 649: 1ab4: \***                                                                         *
 650: 1ab4: \***    LIST.SET                                                             *
 651: 1ab4: \***                                                                         *
 652: 1ab4: \***    Sets an element in the list to a given string.                       *
 653: 1ab4: \***                                                                         *
 654: 1ab4: \*****************************************************************************
 655: 1ab4: 
 656: 1ab4: SUB LIST.SET(ELEMENT%, DATA$) PUBLIC
 657: 1ad8: 
 658: 1ad8:     INTEGER*4 PEEK.ADR%
 659: 1ad8:     INTEGER*4 ARRAY%
 660: 1ad8:     INTEGER*4 ELEMENT%
 661: 1ad8:     STRING DATA$
 662: 1ad8: 
 663: 1ad8:     !Set up TEMP$ to point to the right array
 664: 1ad8:     ARRAY% = PTRS%(ELEMENT% / ELEMENTS.PER.ARRAY%)
 665: 1b05:     PEEK.ADR% = VARPTR(ARRAY%)
 666: 1b1e:     POKE PTR.TO.TEMP%, PEEK(PEEK.ADR%)
 667: 1b41:     POKE PTR.TO.TEMP% + 1, PEEK(PEEK.ADR% + 1)
 668: 1b72:     POKE PTR.TO.TEMP% + 2, PEEK(PEEK.ADR% + 2)
 669: 1ba3:     POKE PTR.TO.TEMP% + 3, PEEK(PEEK.ADR% + 3)
 670: 1bd4: 
 671: 1bd4:     !Update the element in the array
 672: 1bd4:     TEMP$(MOD(ELEMENT%, ELEMENTS.PER.ARRAY%)) = DATA$
 673: 1c07: 
 674: 1c07: END SUB
 675: 1c1b: 
 676: 1c1b: \*****************************************************************************
 677: 1c1b: \***                                                                         *
 678: 1c1b: \***    LIST.GET                                                             *
 679: 1c1b: \***                                                                         *
 680: 1c1b: \***    Gets the string from a given element in the list.                    *
 681: 1c1b: \***                                                                         *
 682: 1c1b: \*****************************************************************************
 683: 1c1b: 
 684: 1c1b: SUB LIST.GET(ELEMENT%, RETURNED.DATA$) PUBLIC
 685: 1c3f: 
 686: 1c3f:     INTEGER*4 PEEK.ADR%
 687: 1c3f:     INTEGER*4 ARRAY%
 688: 1c3f:     INTEGER*4 ELEMENT%
 689: 1c3f:     STRING RETURNED.DATA$
 690: 1c3f: 
 691: 1c3f:     !Set up TEMP$ to point to the right array
 692: 1c3f:     ARRAY% = PTRS%(ELEMENT% / ELEMENTS.PER.ARRAY%)
 693: 1c6c:     PEEK.ADR% = VARPTR(ARRAY%)
 694: 1c85:     POKE PTR.TO.TEMP%, PEEK(PEEK.ADR%)
 695: 1ca8:     POKE PTR.TO.TEMP% + 1, PEEK(PEEK.ADR% + 1)
 696: 1cd9:     POKE PTR.TO.TEMP% + 2, PEEK(PEEK.ADR% + 2)
 697: 1d0a:     POKE PTR.TO.TEMP% + 3, PEEK(PEEK.ADR% + 3)
 698: 1d3b: 
 699: 1d3b:     !Get the element from the array
 700: 1d3b:     RETURNED.DATA$ = TEMP$(MOD(ELEMENT%, ELEMENTS.PER.ARRAY%))
 701: 1d6e: 
 702: 1d6e: END SUB
 703: 1d82: 
 704: 1d82: End of Compilation
