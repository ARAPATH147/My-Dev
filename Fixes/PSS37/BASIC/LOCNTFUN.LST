   1: 0000: \******************************************************************************
   2: 0000: \******************************************************************************
   3: 0000: \***
   4: 0000: \***   $Workfile:   LOCNTFUN.BAS  $
   5: 0000: \***
   6: 0000: \***   $Revision:   1.0  $
   7: 0000: \***
   8: 0000: \******************************************************************************
   9: 0000: \******************************************************************************
  10: 0000: \***
  11: 0000: \***              STOCKTAKE LOCATION COUNTS FILE FUNCTIONS
  12: 0000: \***
  13: 0000: \***               REFERENCE    :LOCNTFUN.BAS
  14: 0000: \***
  15: 0000: \***         VERSION A            Johnnie Chan    6th Jan 1998
  16: 0000: \***
  17: 0000: \*******************************************************************************
  18: 0000: \*******************************************************************************
  19: 0000: 
  20: 0000:    INTEGER*2 GLOBAL                 \
  21: 0000:              CURRENT.REPORT.NUM%
  22: 0000:        
  23: 0000:    STRING GLOBAL                    \
  24: 0000:           CURRENT.CODE$,            \
  25: 0000:           FILE.OPERATION$
  26: 0000:     
  27: 0000:    %INCLUDE LOCNTDEC.J86                                             
  28: 0000: \******************************************************************************
  29: 0000: \******************************************************************************
  30: 0000: \***
  31: 0000: \***   $Workfile:   LOCNTDEC.J86  $
  32: 0000: \***
  33: 0000: \***   $Revision:   1.0  $
  34: 0000: \***
  35: 0000: \******************************************************************************
  36: 0000: \******************************************************************************
  37: 0000: \***
  38: 0000: \***   $Log:   V:\archive\j86\locntdec.j8v  $
  39: 0000: \***   
  40: 0000: \***      Rev 1.0   03 Feb 1998 10:07:40   DEV69PS
  41: 0000: \***    
  42: 0000: \***   
  43: 0000: \******************************************************************************
  44: 0000: \******************************************************************************
  45: 0000: \***
  46: 0000: \***         %INCLUDE FOR STOCKTAKE LOCATION COUNTERS (LOCCNT) DECLARATIONS
  47: 0000: \***
  48: 0000: \***               FILE TYPE    : DIRECT
  49: 0000: \***
  50: 0000: \***               REFERENCE    : LOCNTDEC.J86
  51: 0000: \***
  52: 0000: \***    VERSION A.              Johnnie Chan           6th Jan 1998
  53: 0000: \***    New file for stocktaking system. Holds all locations counted using
  54: 0000: \***    1st to 10000th record for S0000-S9999 and 10001st to 20000th record
  55: 0000: \***    for B0000-B9999.
  56: 0000: \***
  57: 0000: \*******************************************************************************
  58: 0000: \*******************************************************************************
  59: 0000: 
  60: 0000: STRING GLOBAL                           \
  61: 0000:        LOCCNT.FILE.NAME$
  62: 0000:        
  63: 0000: INTEGER*4 GLOBAL                        \
  64: 0000:        LOCCNT.RECORD.NUM%
  65: 0000: 
  66: 0000: 
  67: 0000: INTEGER*2 GLOBAL                        \
  68: 0000:        LOCCNT.REPORT.NUM%,              \
  69: 0000:        LOCCNT.SESS.NUM%             
  70: 0000: 
  71: 0000: 
  72: 0000: INTEGER*1 GLOBAL                        \
  73: 0000:        LOCCNT.LOCATION.COUNT%,          \
  74: 0000:        LOCCNT.RECL%         
  75: 0000: 
  76: 0000: 
  77: 0000: 
  78: 0000: FUNCTION LOCCNT.SET PUBLIC
  79: 0014: \***************************
  80: 0014: 
  81: 0014:    LOCCNT.REPORT.NUM% = 546
  82: 001d:    LOCCNT.RECL%       = 1
  83: 0025:    LOCCNT.FILE.NAME$  = "LOCCNT"
  84: 0034:     
  85: 0034: END FUNCTION
  86: 0040:     
  87: 0040: \-----------------------------------------------------------------------------
  88: 0040: 
  89: 0040: FUNCTION READ.LOCCNT PUBLIC
  90: 0054: \****************************
  91: 0054: 
  92: 0054:    INTEGER*2 READ.LOCCNT
  93: 0054:     
  94: 0054:    READ.LOCCNT = 1
  95: 0059:     
  96: 0059:    IF END #LOCCNT.SESS.NUM% THEN READ.LOCCNT.ERROR
  97: 006d:    READ FORM "I1"; #LOCCNT.SESS.NUM%,LOCCNT.RECORD.NUM%; \
  98: 009f:       LOCCNT.LOCATION.COUNT%
  99: 009f: 
 100: 009f:    READ.LOCCNT = 0
 101: 00a4:    EXIT FUNCTION
 102: 00a6:     
 103: 00a6: READ.LOCCNT.ERROR:
 104: 00a6:     
 105: 00a6:    FILE.OPERATION$ = "R"
 106: 00b5:    CURRENT.REPORT.NUM% = LOCCNT.REPORT.NUM%
 107: 00c3:        
 108: 00c3:    EXIT FUNCTION
 109: 00c5: 
 110: 00c5: END FUNCTION
 111: 00d4: 
 112: 00d4: \-----------------------------------------------------------------------------
 113: 00d4:   
 114: 00d4:   
 115: 00d4: FUNCTION WRITE.LOCCNT PUBLIC
 116: 00e8: \*****************************
 117: 00e8: 
 118: 00e8:    INTEGER*2 WRITE.LOCCNT
 119: 00e8:     
 120: 00e8:    WRITE.LOCCNT = 1
 121: 00ed:    
 122: 00ed:    IF END #LOCCNT.SESS.NUM% THEN WRITE.LOCCNT.ERROR
 123: 0101:    WRITE FORM "I1"; #LOCCNT.SESS.NUM%,LOCCNT.RECORD.NUM%; \
 124: 0131:       LOCCNT.LOCATION.COUNT%
 125: 0131: 
 126: 0131:    WRITE.LOCCNT = 0
 127: 0136:    EXIT FUNCTION
 128: 0138:    
 129: 0138: WRITE.LOCCNT.ERROR:
 130: 0138:    
 131: 0138:    FILE.OPERATION$ = "W"                                            
 132: 0147:    CURRENT.REPORT.NUM% = LOCCNT.REPORT.NUM%
 133: 0155:       
 134: 0155:    EXIT FUNCTION
 135: 0157: 
 136: 0157: END FUNCTION
 137: 0166: 
 138: 0166: 
 139: 0166: !*************************************************************************
 140: 0166: !* This function returns a record number given a location code of the form
 141: 0166: !* Sxxxx or Bxxxx. If the location code is not valid, then the function
 142: 0166: !* will return a value of 0.
 143: 0166: !*************************************************************************
 144: 0166: FUNCTION GET.LOCCNT.RECNUM(LOC.CODE$) PUBLIC
 145: 017f: \*****************************
 146: 017f: 
 147: 017f:    STRING LOC.CODE$
 148: 017f:    INTEGER*4 GET.LOCCNT.RECNUM
 149: 017f:    INTEGER*4 TEMP.RECNUM%
 150: 017f:    INTEGER*2 VALID.FLAG%
 151: 017f:    INTEGER*2 A%
 152: 017f:    
 153: 017f:    VALID.FLAG% = 1
 154: 0185: 
 155: 0185:    IF LEFT$(LOC.CODE$, 1) = "S" THEN BEGIN
 156: 01ad:       !*******************************************************************
 157: 01ad:       !* Shopfloor locations use records 1 - 10000
 158: 01ad:       !*******************************************************************
 159: 01ad:       TEMP.RECNUM% = 1
 160: 01bc: 
 161: 01bc:    ENDIF ELSE IF LEFT$(LOC.CODE$, 1) = "B" THEN BEGIN
 162: 01e4:       !*******************************************************************
 163: 01e4:       !* Backroom locations use records 10001-20000
 164: 01e4:       !*******************************************************************
 165: 01e4:       TEMP.RECNUM% = 10001
 166: 01f3: 
 167: 01f3:    ENDIF ELSE BEGIN
 168: 01f3:       !*******************************************************************
 169: 01f3:       !* Invalid location, since it has to be Sxxxx or Bxxxx
 170: 01f3:       !*******************************************************************
 171: 01f3:       VALID.FLAG% = 0
 172: 01f9: 
 173: 01f9:    ENDIF
 174: 01f9: 
 175: 01f9:    IF LEN(LOC.CODE$) <> 5 THEN BEGIN
 176: 020a:       !*******************************************************************
 177: 020a:       !* Invalid location, since it is not of the required length
 178: 020a:       !*******************************************************************
 179: 020a:       VALID.FLAG% = 0
 180: 0213: 
 181: 0213:    ENDIF ELSE IF VALID.FLAG% = 1 THEN BEGIN
 182: 021d:       !*******************************************************************
 183: 021d:       !* Check that all the digits are valid.
 184: 021d:       !*******************************************************************
 185: 021d:       FOR A% = 2 TO 5
 186: 0225:          IF MID$(LOC.CODE$,A%,1)<"0" OR MID$(LOC.CODE$,A%,1)>"9" THEN BEGIN
 187: 0294:             !*************************************************************
 188: 0294:             !* Invalid, since location does not have the last four digits
 189: 0294:             !* as numeric characters.
 190: 0294:             !*************************************************************
 191: 0294:             VALID.FLAG% = 0
 192: 029a:          ENDIF
 193: 029a:       NEXT A%
 194: 02ab:    ENDIF
 195: 02ab: 
 196: 02ab:    IF VALID.FLAG% = 1 THEN BEGIN
 197: 02b2:       !*******************************************************************
 198: 02b2:       !* All checks have proved the location valid, add on offset and
 199: 02b2:       !* return this as the result.
 200: 02b2:       !*******************************************************************
 201: 02b2:       TEMP.RECNUM% = TEMP.RECNUM% + VAL(MID$(LOC.CODE$,2,4))
 202: 0306:      
 203: 0306:    ENDIF ELSE BEGIN
 204: 0306:       !*******************************************************************
 205: 0306:       !* Invalid location code, so prepare to return a zero code.
 206: 0306:       !*******************************************************************
 207: 0306:       TEMP.RECNUM% = 0
 208: 0313: 
 209: 0313:    ENDIF
 210: 0313:    
 211: 0313:    GET.LOCCNT.RECNUM = TEMP.RECNUM%
 212: 0321: 
 213: 0321: END FUNCTION
 214: 0338: 
 215: 0338: End of Compilation
