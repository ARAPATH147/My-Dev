   1: 0000: \********************************************************************
   2: 0000: \***      Space and Range Planogram database (SRPOG)
   3: 0000: \***      Version A           Neil Bennett          05.06.2006
   4: 0000: \***
   5: 0000: \....................................................................
   6: 0000: 
   7: 0000:   INTEGER*2 GLOBAL                   \
   8: 0000:       CURRENT.REPORT.NUM%
   9: 0000: 
  10: 0000:   STRING GLOBAL                      \
  11: 0000:       CURRENT.CODE$,                 \
  12: 0000:       FILE.OPERATION$
  13: 0000: 
  14: 0000:   %INCLUDE SRPOGDEC.J86
  15: 0000: \********************************************************************
  16: 0000: \***      EXTERNAL FUNCTION DECLARATIONS FOR THE SRPOG FILE
  17: 0000: \***      REFERENCE : SRPOGDEC.J86
  18: 0000: \***      Version A           Neil Bennett            5th June 2006
  19: 0000: \***
  20: 0000: \********************************************************************
  21: 0000: 
  22: 0000:   INTEGER*1 GLOBAL        \
  23: 0000:     SRPOG.MODULE.COUNT%,  \ Number of modules comprising POG
  24: 0000:     SRPOG.KEY.LEVEL%,     \ Family hierarchy key level
  25: 0000:     SRPOG.LIVE.RPT.CNT%,  \ Computed Live repeat count (Unset -1)
  26: 0000:     SRPOG.PEND.RPT.CNT%   ! Computed pending repeat count (Unset -1)
  27: 0000: 
  28: 0000:   INTEGER*2 GLOBAL        \
  29: 0000:     SRPOG.SESS.NUM%,      \
  30: 0000:     SRPOG.REPORT.NUM%,    \
  31: 0000:     SRPOG.RECL%           !
  32: 0000: 
  33: 0000:   INTEGER*4 GLOBAL        \
  34: 0000:     SRPOG.POGDB%,         \ Unique POG Database key
  35: 0000:     SRPOG.CAT.DBKEY%,     \ Family hierarchy key
  36: 0000:     SRPOG.CAT1.ID%,       \ hierarchy key
  37: 0000:     SRPOG.CAT2.ID%,       \ hierarchy key
  38: 0000:     SRPOG.CAT3.ID%,       \ hierarchy key
  39: 0000:     SRPOG.POGID%          ! POG Identifier
  40: 0000: 
  41: 0000:   STRING GLOBAL           \
  42: 0000:     SRPOG.FILE.NAME$,     \ File name
  43: 0000:     SRPOG.COPY.NAME$,     \ File name
  44: 0000:     SRPOG.ACT.DATE$,      \ Activation Date YYYY MM DD
  45: 0000:     SRPOG.DEACT.DATE$,    \ Deactivation Date YYYY MM DD
  46: 0000:     SRPOG.DESCRIPTION$,   \ Truncated POG description (30)
  47: 0000:     SRPOG.PLANNER.FAMILY$,\ Truncated Planner Family description (30)
  48: 0000:     SRPOG.DATE.RPT.CNT$,  \ Date repeat count is valid YYYY MM DD
  49: 0000:     SRPOG.FILLER$         !
  50: 0000: 
  51: 0000: 
  52: 0000: 
  53: 0000: \--------------------------------------------------------------------
  54: 0000: 
  55: 0000:   %INCLUDE BTCMEM.J86
  56: 0000: !********************************************************************
  57: 0000: !***
  58: 0000: !***    INCLUDED CODE:  BTCMEM.J86
  59: 0000: !***    AUTHOR:         Stuart William McConnachie
  60: 0000: !***    DATE:           26th February 2006
  61: 0000: !***
  62: 0000: !********************************************************************
  63: 0000: !***
  64: 0000: !***    Controller CBASIC Memory Functions
  65: 0000: !***
  66: 0000: !********************************************************************
  67: 0000: 
  68: 0000: !Get a single byte integer from a string offset
  69: 0000: FUNCTION GETN1 (S$, P%) EXTERNAL
  70: 0000:     STRING S$
  71: 0000:     INTEGER*2 P%
  72: 0000:     INTEGER*2 GETN1
  73: 0000: END FUNCTION
  74: 0000: 
  75: 0000: !Get a two byte integer from a string offset
  76: 0000: FUNCTION GETN2 (S$, P%) EXTERNAL
  77: 0000:     STRING S$
  78: 0000:     INTEGER*2 P%
  79: 0000:     INTEGER*2 GETN2
  80: 0000: END FUNCTION
  81: 0000: 
  82: 0000: !Get a four byte integer from a string offset
  83: 0000: FUNCTION GETN4 (S$, P%) EXTERNAL
  84: 0000:     STRING S$
  85: 0000:     INTEGER*2 P%
  86: 0000:     INTEGER*4 GETN4
  87: 0000: END FUNCTION
  88: 0000: 
  89: 0000: !Get a 10 byte CBASIC real from a string offset
  90: 0000: FUNCTION GETR10 (S$, P%) EXTERNAL
  91: 0000:     STRING S$
  92: 0000:     INTEGER*2 P%
  93: 0000:     REAL GETR10
  94: 0000: END FUNCTION
  95: 0000: 
  96: 0000: !Put a single byte integer into a string at offset
  97: 0000: FUNCTION PUTN1 (S$, P%, N%) EXTERNAL
  98: 0000:     STRING S$
  99: 0000:     INTEGER*2 P%
 100: 0000:     INTEGER*1 N%
 101: 0000:     INTEGER*1 PUTN1
 102: 0000: END FUNCTION
 103: 0000: 
 104: 0000: !Put a two byte integer into a string at offset
 105: 0000: FUNCTION PUTN2 (S$, P%, N%) EXTERNAL
 106: 0000:     STRING S$
 107: 0000:     INTEGER*2 P%
 108: 0000:     INTEGER*2 N%
 109: 0000:     INTEGER*1 PUTN2
 110: 0000: END FUNCTION
 111: 0000: 
 112: 0000: !Put a four byte integer into a string at offset
 113: 0000: FUNCTION PUTN4 (S$, P%, N%) EXTERNAL
 114: 0000:     STRING S$
 115: 0000:     INTEGER*2 P%
 116: 0000:     INTEGER*4 N%
 117: 0000:     INTEGER*1 PUTN4
 118: 0000: END FUNCTION
 119: 0000: 
 120: 0000: !Put a 10 byte CBASIC real into a string at offset
 121: 0000: FUNCTION PUTR10 (S$, P%, R) EXTERNAL
 122: 0000:     STRING S$
 123: 0000:     INTEGER*2 P%
 124: 0000:     REAL R
 125: 0000:     INTEGER*1 PUTR10
 126: 0000: END FUNCTION
 127: 0000: 
 128: 0000: !Peek a two byte integer from a memory address
 129: 0000: FUNCTION PEEKN2 (A%) EXTERNAL
 130: 0000:     INTEGER*4 A%
 131: 0000:     INTEGER*2 PEEKN2
 132: 0000: END FUNCTION
 133: 0000: 
 134: 0000: !Peek a four byte integer from a memory address
 135: 0000: FUNCTION PEEKN4 (A%) EXTERNAL
 136: 0000:     INTEGER*4 A%
 137: 0000:     INTEGER*4 PEEKN4
 138: 0000: END FUNCTION
 139: 0000: 
 140: 0000: !Peek a 10 byte CBASIC real from a memory address
 141: 0000: FUNCTION PEEKR10 (A%) EXTERNAL
 142: 0000:     INTEGER*4 A%
 143: 0000:     REAL PEEKR10
 144: 0000: END FUNCTION
 145: 0000: 
 146: 0000: !Poke a two byte integer to a memory address
 147: 0000: FUNCTION POKEN2 (A%, N%) EXTERNAL
 148: 0000:     INTEGER*4 A%
 149: 0000:     INTEGER*2 N%
 150: 0000:     INTEGER*1 POKEN2
 151: 0000: END FUNCTION
 152: 0000: 
 153: 0000: !Poke a four byte integer to a memory address
 154: 0000: FUNCTION POKEN4 (A%, N%) EXTERNAL
 155: 0000:     INTEGER*4 A%
 156: 0000:     INTEGER*4 N%
 157: 0000:     INTEGER*1 POKEN4
 158: 0000: END FUNCTION
 159: 0000: 
 160: 0000: !Poke a 10 byte CBASIC real to a memory address
 161: 0000: FUNCTION POKER10 (A%, R) EXTERNAL
 162: 0000:     INTEGER*4 A%
 163: 0000:     REAL R
 164: 0000:     INTEGER*1 POKER10
 165: 0000: END FUNCTION
 166: 0000: 
 167: 0000: 
 168: 0000: \--------------------------------------------------------------------
 169: 0000: 
 170: 0000:   FUNCTION BUILD.SRPOG.KEY$
 171: 0024: 
 172: 0024:    STRING     BUILD.SRPOG.KEY$
 173: 0024:    STRING     work$
 174: 0024: 
 175: 0024:    work$ = STRING$(4,CHR$(0))
 176: 0043: 
 177: 0043:    CALL PUTN4(work$, 0, SRPOG.POGDB%)
 178: 0068: 
 179: 0068:    BUILD.SRPOG.KEY$ = work$
 180: 0082:    work$ = ""
 181: 0097: 
 182: 0097:   END FUNCTION
 183: 00b0: 
 184: 00b0: \--------------------------------------------------------------------
 185: 00b0: 
 186: 00b0:   FUNCTION SRPOG.SET PUBLIC
 187: 00d4: 
 188: 00d4:    SRPOG.REPORT.NUM%   = 719
 189: 00e5:    SRPOG.RECL%         = 101
 190: 00f6:    SRPOG.FILE.NAME$    = "SRPOG"
 191: 010d:    SRPOG.COPY.NAME$    = "ADXLXACN::D:\ADX_UDT3\SRPOG.BAK"
 192: 0124: 
 193: 0124:   END FUNCTION
 194: 0138: 
 195: 0138: \--------------------------------------------------------------------
 196: 0138: 
 197: 0138:   FUNCTION READ.SRPOG PUBLIC
 198: 015c: 
 199: 015c:    INTEGER*2 READ.SRPOG
 200: 015c:    STRING    key$
 201: 015c: 
 202: 015c:    READ.SRPOG = 1
 203: 0169: 
 204: 0169:    key$ = BUILD.SRPOG.KEY$
 205: 017e: 
 206: 017e:    IF END #SRPOG.SESS.NUM% THEN READ.SRPOG.ERROR
 207: 019a: 
 208: 019a:    READ FORM "T5,I4,C4,C4,C30,C30,I1,I4,I1,I1,C4,I1,I4,I4,I4,C1";   \
 209: 026b:           #SRPOG.SESS.NUM% KEY key$;                                \
 210: 026b:              SRPOG.POGID%,                                          \
 211: 026b:              SRPOG.ACT.DATE$,                                       \
 212: 026b:              SRPOG.DEACT.DATE$,                                     \
 213: 026b:              SRPOG.DESCRIPTION$,                                    \
 214: 026b:              SRPOG.PLANNER.FAMILY$,                                 \
 215: 026b:              SRPOG.MODULE.COUNT%,                                   \
 216: 026b:              SRPOG.CAT.DBKEY%,                                      \
 217: 026b:              SRPOG.KEY.LEVEL%,                                      \
 218: 026b:              SRPOG.LIVE.RPT.CNT%,                                   \
 219: 026b:              SRPOG.DATE.RPT.CNT$,                                   \
 220: 026b:              SRPOG.PEND.RPT.CNT%,                                   \
 221: 026b:              SRPOG.CAT1.ID%,                                        \
 222: 026b:              SRPOG.CAT2.ID%,                                        \
 223: 026b:              SRPOG.CAT3.ID%,                                        \
 224: 026b:              SRPOG.FILLER$
 225: 026b: 
 226: 026b:    READ.SRPOG = 0
 227: 0278:    EXIT FUNCTION
 228: 0282: 
 229: 0282: READ.SRPOG.ERROR:
 230: 0292: 
 231: 0292:    CURRENT.REPORT.NUM% = SRPOG.REPORT.NUM%
 232: 02a8:    FILE.OPERATION$ = "R"
 233: 02bf:    CURRENT.CODE$ = key$
 234: 02da: 
 235: 02da:   END FUNCTION
 236: 02f1: 
 237: 02f1: \--------------------------------------------------------------------
 238: 02f1: 
 239: 02f1:   FUNCTION WRITE.SRPOG PUBLIC
 240: 0315: 
 241: 0315:    INTEGER*2 WRITE.SRPOG
 242: 0315:    STRING    key$
 243: 0315: 
 244: 0315:    WRITE.SRPOG = 1
 245: 0322: 
 246: 0322:    key$ = BUILD.SRPOG.KEY$
 247: 0337: 
 248: 0337:    IF END #SRPOG.SESS.NUM% THEN WRITE.SRPOG.ERROR
 249: 0353: 
 250: 0353:    WRITE FORM "C4,I4,C4,C4,C30,C30,I1,I4,I1,I1,C4,I1,I4,I4,I4,C1";  \
 251: 0462:            #SRPOG.SESS.NUM%;                                        \
 252: 0462:              key$,                                                  \
 253: 0462:              SRPOG.POGID%,                                          \
 254: 0462:              SRPOG.ACT.DATE$,                                       \
 255: 0462:              SRPOG.DEACT.DATE$,                                     \
 256: 0462:              SRPOG.DESCRIPTION$,                                    \
 257: 0462:              SRPOG.PLANNER.FAMILY$,                                 \
 258: 0462:              SRPOG.MODULE.COUNT%,                                   \
 259: 0462:              SRPOG.CAT.DBKEY%,                                      \
 260: 0462:              SRPOG.KEY.LEVEL%,                                      \
 261: 0462:              SRPOG.LIVE.RPT.CNT%,                                   \
 262: 0462:              SRPOG.DATE.RPT.CNT$,                                   \
 263: 0462:              SRPOG.PEND.RPT.CNT%,                                   \
 264: 0462:              SRPOG.CAT1.ID%,                                        \
 265: 0462:              SRPOG.CAT2.ID%,                                        \
 266: 0462:              SRPOG.CAT3.ID%,                                        \
 267: 0462:              SRPOG.FILLER$
 268: 0462: 
 269: 0462:    WRITE.SRPOG = 0
 270: 046f:    EXIT FUNCTION
 271: 0479: 
 272: 0479: WRITE.SRPOG.ERROR:
 273: 0489: 
 274: 0489:    CURRENT.REPORT.NUM% = SRPOG.REPORT.NUM%
 275: 049f:    FILE.OPERATION$ = "W"
 276: 04b6:    CURRENT.CODE$ = key$
 277: 04d1: 
 278: 04d1:   END FUNCTION
 279: 04e8: 
 280: 04e8: \--------------------------------------------------------------------
 281: 04e8: 
 282: 04e8:   FUNCTION DELREC.SRPOG PUBLIC
 283: 050c: 
 284: 050c:    INTEGER*2 DELREC.SRPOG
 285: 050c:    STRING    key$
 286: 050c: 
 287: 050c:    DELREC.SRPOG = 1
 288: 0519: 
 289: 0519:    IF END #SRPOG.SESS.NUM% THEN DELREC.SRPOG.ERROR
 290: 0535: 
 291: 0535:    key$ = BUILD.SRPOG.KEY$
 292: 054a: 
 293: 054a:    DELREC SRPOG.SESS.NUM%; key$
 294: 0566: 
 295: 0566:    DELREC.SRPOG = 0
 296: 0573:    EXIT FUNCTION
 297: 057d: 
 298: 057d: DELREC.SRPOG.ERROR:
 299: 058d: 
 300: 058d:    CURRENT.REPORT.NUM% = SRPOG.REPORT.NUM%
 301: 05a3:    FILE.OPERATION$ = "D"
 302: 05ba:    CURRENT.CODE$ = key$
 303: 05d5: 
 304: 05d5:   END FUNCTION
 305: 05ec: End of Compilation
