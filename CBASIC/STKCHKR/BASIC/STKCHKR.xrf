
			    Symbol Table Information
     No Variables in Common:


Global Variables:



  NAME				  CLASS		      TYPE	  OFFSET

IMSTC.SESS.NUM%			 simple variable     integer*2 	 00000000h
	       77d,649m,661,845
IMSTC.RECL%			 simple variable     integer*2 	 00000000h
	       78d,661
IMSTC.REPORT.NUM%		 simple variable     integer*2 	 00000000h
	       79d
IMSTC.STOCK.FIGURE%		 simple variable     integer*2 	 00000000h
	       80d,771,772
IMSTC.AMTSALE%			 simple variable     integer*4 	 00000000h
	       83d
IMSTC.NEXT.SID%			 simple variable     integer*4 	 00000000h
	       84d
IMSTC.NUMITEMS%			 simple variable     integer*4 	 00000000h
	       85d
IMSTC.RESERVED%			 simple variable     integer*4 	 00000000h
	       86d
IMSTC.RESTART%			 simple variable     integer*4 	 00000000h
	       87d
IMSTC.SID%			 simple variable     integer*4 	 00000000h
	       88d
IMSTC.STKMQ.RESTART%		 simple variable     integer*4 	 00000000h
	       89d
IMSTC.TSL.RESTART%		 simple variable     integer*4 	 00000000h
	       90d
IMSTC.BAR.CODE$			 simple variable     string	 00000000h
	       93d,598m,767m
IMSTC.FILE.NAME$		 simple variable     string	 00000000h
	       94d,661
IMSTC.FILLER$			 simple variable     string	 00000000h
	       95d
IMSTC.HOLD.PENDING$		 simple variable     string	 00000000h
	       96d
IMSTC.REASON.ITEM.REMOVED$	 simple variable     string	 00000000h
	       97d
IMSTC.STATUS.FLAG$		 simple variable     string	 00000000h
	       98d
STOCK.FLAGS%			 simple variable     integer*1 	 00000000h
	       152d
STOCK.RECL%			 simple variable     integer*1 	 00000000h
	       153d,736
STOCK.LAST.COUNT%		 simple variable     integer*2 	 00000000h
	       156d
STOCK.LAST.REC%			 simple variable     integer*2 	 00000000h
	       157d
STOCK.REPORT.NUM%		 simple variable     integer*2 	 00000000h
	       158d
STOCK.SESS.NUM%			 simple variable     integer*2 	 00000000h
	       159d,648m,736,762
STOCK.STOCK.FIG%		 simple variable     integer*2 	 00000000h
	       160d,750
STOCK.NEXT.SID%			 simple variable     integer*4 	 00000000h
	       163d
STOCK.SID%			 simple variable     integer*4 	 00000000h
	       164d
STOCK.BOOTS.CODE$		 simple variable     string	 00000000h
	       167d,746m,749
STOCK.DATE.LAST.COUNT$		 simple variable     string	 00000000h
	       168d
STOCK.DATE.LAST.GAP$		 simple variable     string	 00000000h
	       169d
STOCK.DATE.LAST.MOVE$		 simple variable     string	 00000000h
	       170d
STOCK.DATE.LAST.REC$		 simple variable     string	 00000000h
	       171d
STOCK.FILE.NAME$		 simple variable     string	 00000000h
	       172d,660,728,736
STOCK.FILLER$			 simple variable     string	 00000000h
	       173d
STOCK.STATUS.1$			 simple variable     string	 00000000h
	       174d
STCOR.FILE.NAME$		 simple variable     string	 00000000h
	       193d,792
STCOR.ITEM.CODE$		 simple variable     string	 00000000h
	       194d,603m,611,793m,800,810m,818,831m,835
STCOR.REST$			 simple variable     string	 00000000h
	       195d
STCOR.SERIAL.NO$		 simple variable     string	 00000000h
	       196d,794m,801
STCOR.STORE.NO$			 simple variable     string	 00000000h
	       197d,795m,802
STCOR.RUN.TYPE$			 simple variable     string	 00000000h
	       198d,796m,803
STCOR.HDR.FILLER$		 simple variable     string	 00000000h
	       201d,804
STCOR.STMVT.DATE$		 simple variable     string	 00000000h
	       203d,604m,612,811m,819
STCOR.STKCNT.FLAG$		 simple variable     string	 00000000h
	       204d,608m,616,815m,823
STCOR.DET.FILLER$		 simple variable     string	 00000000h
	       206d,617,824
STCOR.TRL.FILLER$		 simple variable     string	 00000000h
	       208d,837
STCOR.REC.TYPE$			 simple variable     string	 00000000h
	       209d
STCOR.SESS.NUM%			 simple variable     integer*2 	 00000000h
	       212d,610,652m,792,799,817,834,838
STCOR.REPORT.NUM%		 simple variable     integer*2 	 00000000h
	       213d
STCOR.SALES.QUANT%		 simple variable     integer*2 	 00000000h
	       214d,605m,613,812m,820
STCOR.STMVT.QUANT%		 simple variable     integer*2 	 00000000h
	       216d,606m,614,813m,821
STCOR.STOCK.COUNT%		 simple variable     integer*2 	 00000000h
	       218d,607m,615,814m,822
STCOR.REC.NO%			 simple variable     integer*4 	 00000000h
	       221d
STCOR.RECL%			 simple variable     integer*4 	 00000000h
	       222d
STCOR.REC.COUNT%		 simple variable     integer*4 	 00000000h
	       223d,832m,836,847

Function: IMSTC.SET returns real

	       254d,643

Function: READ.IMSTC returns integer*2 

	       257d,599,768

Function: READ.IMSTC.LOCK returns integer*2 

	       261d

Function: WRITE.IMSTC returns integer*2 

	       265d

Function: WRITE.IMSTC.UNLOCK.HOLD returns integer*2 

	       269d

Function: WRITE.IMSTC.UNLOCK returns integer*2 

	       273d

Function: WRITE.IMSTC.HOLD returns integer*2 

	       277d

Function: STOCK.SET returns real

	       308d,644

Function: READ.STOCK returns integer*2 

	       311d,747

Function: WRITE.STOCK returns integer*2 

	       315d

Function: WRITE.STOCK.HOLD returns integer*2 

	       319d

Function: READ.STOCK.LOCK returns integer*2 

	       323d

Function: WRITE.STOCK.UNLOCK returns integer*2 

	       327d

Function: WRITE.STOCK.UNLOCK.HOLD returns integer*2 

	       331d

Function: STCOR.SET returns real

	       347d,645

Function: READ.STCOR returns integer*2 

	       350d

Function: PROCESS.KEYED.FILE returns integer*2 

	       377d,728

  NAME				  CLASS		      TYPE	  OFFSET

FILE.NAME$			 parameter	     string	 00000000h
	       377d,381d
REPORT.NUM%			 parameter	     integer*2 	 00000004h
	       378d,382d
READONLY$			 parameter	     string	 00000006h
	       379d,381d


Function: GETN1 returns integer*2 

	       400d

  NAME				  CLASS		      TYPE	  OFFSET

S$				 parameter	     string	 00000000h
	       400d,401d
P%				 parameter	     integer*2 	 00000004h
	       400d,402d


Function: GETN2 returns integer*2 

	       407d,584

  NAME				  CLASS		      TYPE	  OFFSET

S$				 parameter	     string	 00000000h
	       407d,408d
P%				 parameter	     integer*2 	 00000004h
	       407d,409d


Function: GETN4 returns integer*4 

	       414d

  NAME				  CLASS		      TYPE	  OFFSET

S$				 parameter	     string	 00000000h
	       414d,415d
P%				 parameter	     integer*2 	 00000004h
	       414d,416d


Function: GETR10 returns real

	       421d

  NAME				  CLASS		      TYPE	  OFFSET

S$				 parameter	     string	 00000000h
	       421d,422d
P%				 parameter	     integer*2 	 00000004h
	       421d,423d


Function: PUTN1 returns integer*1 

	       428d

  NAME				  CLASS		      TYPE	  OFFSET

S$				 parameter	     string	 00000000h
	       428d,429d
P%				 parameter	     integer*2 	 00000004h
	       428d,430d
N%				 parameter	     integer*1 	 00000006h
	       428d,431d


Function: PUTN2 returns integer*1 

	       436d

  NAME				  CLASS		      TYPE	  OFFSET

S$				 parameter	     string	 00000000h
	       436d,437d
P%				 parameter	     integer*2 	 00000004h
	       436d,438d
N%				 parameter	     integer*2 	 00000006h
	       436d,439d


Function: PUTN4 returns integer*1 

	       444d

  NAME				  CLASS		      TYPE	  OFFSET

S$				 parameter	     string	 00000000h
	       444d,445d
P%				 parameter	     integer*2 	 00000004h
	       444d,446d
N%				 parameter	     integer*4 	 00000006h
	       444d,447d


Function: PUTR10 returns integer*1 

	       452d

  NAME				  CLASS		      TYPE	  OFFSET

S$				 parameter	     string	 00000000h
	       452d,453d
P%				 parameter	     integer*2 	 00000004h
	       452d,454d
R				 parameter	     real	 00000006h
	       452d,455d


Function: PEEKN2 returns integer*2 

	       460d

  NAME				  CLASS		      TYPE	  OFFSET

A%				 parameter	     integer*4 	 00000000h
	       460d,461d


Function: PEEKN4 returns integer*4 

	       466d

  NAME				  CLASS		      TYPE	  OFFSET

A%				 parameter	     integer*4 	 00000000h
	       466d,467d


Function: PEEKR10 returns real

	       472d

  NAME				  CLASS		      TYPE	  OFFSET

A%				 parameter	     integer*4 	 00000000h
	       472d,473d


Function: POKEN2 returns integer*1 

	       478d

  NAME				  CLASS		      TYPE	  OFFSET

A%				 parameter	     integer*4 	 00000000h
	       478d,479d
N%				 parameter	     integer*2 	 00000004h
	       478d,480d


Function: POKEN4 returns integer*1 

	       485d

  NAME				  CLASS		      TYPE	  OFFSET

A%				 parameter	     integer*4 	 00000000h
	       485d,486d
N%				 parameter	     integer*4 	 00000004h
	       485d,487d


Function: POKER10 returns integer*1 

	       492d

  NAME				  CLASS		      TYPE	  OFFSET

A%				 parameter	     integer*4 	 00000000h
	       492d,493d
R				 parameter	     real	 00000004h
	       492d,494d


Subprogram: ADXSERVE

	       514d,646

  NAME				  CLASS		      TYPE	  OFFSET

RETURN.CODE%			 parameter	     integer*4 	 00000000h
	       514d,525d
ADX.FUNCTION%			 parameter	     integer*2 	 00000004h
	       515d,522d
ADX.PARM.1%			 parameter	     integer*2 	 00000008h
	       516d,523d
ADX.PARM.2$			 parameter	     string	 0000000ch
	       517d,520d


Function: ADXSTART returns integer*2 

	       545d

  NAME				  CLASS		      TYPE	  OFFSET

ADX.NAME$			 parameter	     string	 00000000h
	       545d,550d
ADX.PARM$			 parameter	     string	 00000004h
	       546d,551d
ADX.MESS$			 parameter	     string	 00000008h
	       547d,552d


Subprogram: ADXCOPYF

	       569d

  NAME				  CLASS		      TYPE	  OFFSET

RETC				 parameter	     integer*4 	 00000000h
	       569d,571d
INFILE				 parameter	     string	 00000004h
	       569d,572d
OUTFILE				 parameter	     string	 00000008h
	       569d,572d
OPT0				 parameter	     integer*2 	 0000000ch
	       569d,573d
OPT1				 parameter	     integer*2 	 00000010h
	       569d,573d
OPT2				 parameter	     integer*2 	 00000014h
	       569d,573d


Function: PROCESS.KEYED.RECORD$ returns string

	       578d,594m

  NAME				  CLASS		      TYPE	  OFFSET

RECORD$				 parameter	     string	 00000000h
	       578d,579d,583,584,594
ERROR.DETECTED			 label		     
	       582,622d
IMSTC.CHECK			 label		     
	       586,597d
STCOR.MAIN			 label		     
	       588,602d
END.FUNC			 label		     
	       592d,632

Module-Global Variables:



  NAME				  CLASS		      TYPE	  OFFSET

A%				 simple variable     integer*1 	 00000000h
	       11d,656m,670,676,677,682m
B%				 simple variable     integer*1 	 00000001h
	       11d,669,673m,675,684
TRUE				 simple variable     integer*1 	 00000002h
	       11d,654m,673,675,684
FALSE				 simple variable     integer*1 	 00000003h
	       11d,655m
BLOCK%				 simple variable     integer*2 	 00000000h
	       12d
I%				 simple variable     integer*2 	 00000000h
	       12d
RC%				 simple variable     integer*2 	 00000004h
	       12d,599m,646,747m,748,768m,770
INPUT.SESS.NUM%			 simple variable     integer*2 	 00000006h
	       12d,650m,738,741,742,761
KEYSTK.SESS.NUM%		 simple variable     integer*2 	 00000000h
	       12d
THE.END%			 simple variable     integer*2 	 00000008h
	       12d,737m,740,781m
DIRSTK.SESS.NUM%		 simple variable     integer*2 	 0000000ah
	       12d,651m,660,846
CLR%				 simple variable     integer*2 	 0000000ch
	       12d,587,588,653m,697m,710m,727,739,752,753,844,847
CURRENT.PARAM%			 simple variable     integer*2 	 0000000eh
	       12d,672,677,680m,680,685
COMMAND.LEN%			 simple variable     integer*2 	 00000010h
	       12d,667m,668,672,685
DIVIDE.MATCH%			 simple variable     integer*2 	 00000012h
	       12d,670m,671,672,674,676,681,682,685
PREV.DIVIDE.MATCH%		 simple variable     integer*2 	 00000014h
	       13d,672,681m,685
STRING.SECTION%			 simple variable     integer*2 	 00000016h
	       13d,676m,677
CHK.FILE%			 simple variable     integer*2 	 00000018h
	       13d,700m,713m,719
PARAM1.LEN%			 simple variable     integer*2 	 0000001ah
	       13d,689m,691,698
PARAM2.LEN%			 simple variable     integer*2 	 0000001ch
	       13d,705m,706,711
HDR.WRTN%			 simple variable     integer*2 	 0000001eh
	       13d,657m,805m,830
RECORDS%			 simple variable     integer*4 	 00000020h
	       15d,618m,618,797m,825m,825,832
RET.CODE%			 simple variable     integer*4 	 00000000h
	       15d
RECORD$				 simple variable     string	 00000000h
	       16d
TEMP$				 simple variable     string	 00000000h
	       16d
OUTPUT$				 simple variable     string	 00000000h
	       16d
STOCK.IC$			 simple variable     string	 00000024h
	       16d,583m,587,598,598,603,749m,752,755,767,767,810
STOCK.SL$			 simple variable     string	 00000028h
	       16d,584m,587,588,607,750m,752,753,771,772m
INPUTFILE$			 simple variable     string	 0000002ch
	       16d,735m,738
INPCODE$			 simple variable     string	 00000030h
	       16d,742,743,744m,744,745,746
STORE.NUMBER$			 simple variable     string	 00000034h
	       16d,647m,795
ADXSERVE.DATA$			 simple variable     string	 00000038h
	       16d,646,647
FILE.NAME$			 simple variable     string	 0000003ch
	       16d,699m,712m,735
NORMAL.RUN$			 simple variable     string	 00000040h
	       16d,692m
PARAM$				 array(1)	     string	 00000044h
	       16d,658,672m,677m,685m,689,694,696,698,698,699,705,707,709,
	       711,711,712
ALL$				 simple variable     string	 00000048h
	       17d,695m,708m,717
ERROR.DETECTED			 label		     
	       636,851d
INITIALISATION			 label		     
	       637,642d
MAIN.PROGRAM			 label		     
	       638,665d
TERMINATION			 label		     
	       639,843d
@RDUMMY				 simple variable     real	 0000004ch
CHECK.ALL			 label		     
	       718,726d
CHECK.FILE			 label		     
	       720,734d
STCOR.HEADER			 label		     
	       727,739,791d
END.OF.FILE			 label		     
	       741,780d
IMSTC.CHECK			 label		     
	       751,766d
STCOR.MAIN			 label		     
	       753,809d
LOOP.END			 label		     
	       759d,782
NO.FILE				 label		     
	       785d
STCOR.TRAILER			 label		     
	       829d,844

