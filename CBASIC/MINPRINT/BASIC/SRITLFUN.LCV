\********************************************************************
\***      Space and Range Planogram Live Item database (SRITL)
\***      Version A           Neil Bennett          07.07.2006
\***
\....................................................................

  INTEGER*2 GLOBAL                   \
      CURRENT.REPORT.NUM%

  STRING GLOBAL                      \
      CURRENT.CODE$,                 \
      FILE.OPERATION$

  STRING                             \
      SRITL.ARRAY$

  %INCLUDE SRITLDEC.J86
\********************************************************************
\***      EXTERNAL FUNCTION DECLARATIONS FOR THE SRITL FILE
\***      REFERENCE : SRITLDEC.J86
\***      Version A           Neil Bennett            5th June 2006
\***
\********************************************************************

  INTEGER*1 GLOBAL        \
    SRITL.RECORD.CHAIN%,  \ Chain Sequence
    SRITL.MODULE.COUNT%,  \ Family hierarchy key level
    SRITL.MODULE.SEQ%(1), \ Module sequence
    SRITL.REPEAT.CNT%(1)  ! Repeat count

  INTEGER*2 GLOBAL        \
    SRITL.CORE.COUNT%,    \ Sum of repeat count for core items
    SRITL.MAX.MOD.KEYS%,  \ Maximum number of modules
    SRITL.NON.CORE.CNT%,  \ Sum of repeat count for non core items
    SRITL.SESS.NUM%,      \
    SRITL.REPORT.NUM%,    \
    SRITL.RECL%           !

  INTEGER*4 GLOBAL        \
    SRITL.POGDB%(1)       ! Unique POG Database key

  STRING GLOBAL           \
    SRITL.FILE.NAME$,     \ File name
    SRITL.COPY.NAME$,     \ File name
    SRITL.ITEM.CODE$,     \ Boots Item Code
    SRITL.CORE.FLAG$(1),  \ Core/Non Core flag Y/N
    SRITL.FILLER$         !



\--------------------------------------------------------------------

  %INCLUDE BTCMEM.J86
!********************************************************************
!***
!***    INCLUDED CODE:  BTCMEM.J86
!***    AUTHOR:         Stuart William McConnachie
!***    DATE:           26th February 2006
!***
!********************************************************************
!***
!***    Controller CBASIC Memory Functions
!***
!********************************************************************

!Get a single byte integer from a string offset
FUNCTION GETN1 (S$, P%) EXTERNAL
    STRING S$
    INTEGER*2 P%
    INTEGER*2 GETN1
END FUNCTION

!Get a two byte integer from a string offset
FUNCTION GETN2 (S$, P%) EXTERNAL
    STRING S$
    INTEGER*2 P%
    INTEGER*2 GETN2
END FUNCTION

!Get a four byte integer from a string offset
FUNCTION GETN4 (S$, P%) EXTERNAL
    STRING S$
    INTEGER*2 P%
    INTEGER*4 GETN4
END FUNCTION

!Get a 10 byte CBASIC real from a string offset
FUNCTION GETR10 (S$, P%) EXTERNAL
    STRING S$
    INTEGER*2 P%
    REAL GETR10
END FUNCTION

!Put a single byte integer into a string at offset
FUNCTION PUTN1 (S$, P%, N%) EXTERNAL
    STRING S$
    INTEGER*2 P%
    INTEGER*1 N%
    INTEGER*1 PUTN1
END FUNCTION

!Put a two byte integer into a string at offset
FUNCTION PUTN2 (S$, P%, N%) EXTERNAL
    STRING S$
    INTEGER*2 P%
    INTEGER*2 N%
    INTEGER*1 PUTN2
END FUNCTION

!Put a four byte integer into a string at offset
FUNCTION PUTN4 (S$, P%, N%) EXTERNAL
    STRING S$
    INTEGER*2 P%
    INTEGER*4 N%
    INTEGER*1 PUTN4
END FUNCTION

!Put a 10 byte CBASIC real into a string at offset
FUNCTION PUTR10 (S$, P%, R) EXTERNAL
    STRING S$
    INTEGER*2 P%
    REAL R
    INTEGER*1 PUTR10
END FUNCTION

!Peek a two byte integer from a memory address
FUNCTION PEEKN2 (A%) EXTERNAL
    INTEGER*4 A%
    INTEGER*2 PEEKN2
END FUNCTION

!Peek a four byte integer from a memory address
FUNCTION PEEKN4 (A%) EXTERNAL
    INTEGER*4 A%
    INTEGER*4 PEEKN4
END FUNCTION

!Peek a 10 byte CBASIC real from a memory address
FUNCTION PEEKR10 (A%) EXTERNAL
    INTEGER*4 A%
    REAL PEEKR10
END FUNCTION

!Poke a two byte integer to a memory address
FUNCTION POKEN2 (A%, N%) EXTERNAL
    INTEGER*4 A%
    INTEGER*2 N%
    INTEGER*1 POKEN2
END FUNCTION

!Poke a four byte integer to a memory address
FUNCTION POKEN4 (A%, N%) EXTERNAL
    INTEGER*4 A%
    INTEGER*4 N%
    INTEGER*1 POKEN4
END FUNCTION

!Poke a 10 byte CBASIC real to a memory address
FUNCTION POKER10 (A%, R) EXTERNAL
    INTEGER*4 A%
    REAL R
    INTEGER*1 POKER10
END FUNCTION


\--------------------------------------------------------------------

  FUNCTION BUILD.SRITL.KEY$

   STRING   BUILD.SRITL.KEY$
   STRING   work$

   work$ = SRITL.ITEM.CODE$ + CHR$(SRITL.RECORD.CHAIN%)

   BUILD.SRITL.KEY$ = work$
   work$ = ""

  END FUNCTION

\--------------------------------------------------------------------

  SUB SRITL.SPLIT.ARRAY

   INTEGER*2 i%

   FOR i% = 0 TO SRITL.MAX.MOD.KEYS% -1

      SRITL.POGDB%(i%)      = GETN4(SRITL.ARRAY$, i%*7 +0)
      SRITL.MODULE.SEQ%(i%) = GETN1(SRITL.ARRAY$, i%*7 +4)
      SRITL.REPEAT.CNT%(i%) = GETN1(SRITL.ARRAY$, i%*7 +5)
      SRITL.CORE.FLAG$(i%)  = MID$ (SRITL.ARRAY$, i%*7 +7, 1)

   NEXT i%

  END SUB

\--------------------------------------------------------------------

  SUB SRITL.CONCAT.ARRAY

   INTEGER*2 i%

   SRITL.ARRAY$ = STRING$(7, CHR$(00))
   SRITL.ARRAY$ = STRING$(SRITL.MAX.MOD.KEYS%, SRITL.ARRAY$)

   FOR i% = 0 TO SRITL.MAX.MOD.KEYS% -1

      CALL PUTN4(SRITL.ARRAY$, i%*7 +0, SRITL.POGDB%(i%))
      CALL PUTN1(SRITL.ARRAY$, i%*7 +4, SRITL.MODULE.SEQ%(i%))
      CALL PUTN1(SRITL.ARRAY$, i%*7 +5, SRITL.REPEAT.CNT%(i%))
      CALL PUTN1(SRITL.ARRAY$, i%*7 +6, ASC(SRITL.CORE.FLAG$(i%)    \
                                                           + "?"))

   NEXT i%

  END SUB

\--------------------------------------------------------------------

  FUNCTION SRITL.SET PUBLIC

   SRITL.REPORT.NUM%   = 721
   SRITL.RECL%         = 127
   SRITL.FILE.NAME$    = "SRITML"
   SRITL.COPY.NAME$    = "ADXLXACN::D:\ADX_UDT3\SRITEML.BAK"
   SRITL.MAX.MOD.KEYS% = 16

   DIM SRITL.POGDB%      (SRITL.MAX.MOD.KEYS%-1)
   DIM SRITL.MODULE.SEQ% (SRITL.MAX.MOD.KEYS%-1)
   DIM SRITL.REPEAT.CNT% (SRITL.MAX.MOD.KEYS%-1)
   DIM SRITL.CORE.FLAG$  (SRITL.MAX.MOD.KEYS%-1)

  END FUNCTION

\--------------------------------------------------------------------

  FUNCTION READ.SRITL PUBLIC

   INTEGER*2 READ.SRITL
   STRING    key$

   READ.SRITL = 1

   IF END #SRITL.SESS.NUM% THEN READ.SRITL.ERROR

   key$ = BUILD.SRITL.KEY$

   READ FORM "T5,I1,I2,I2,C112,C6";                                 \
          #SRITL.SESS.NUM% KEY key$;                                \
             SRITL.MODULE.COUNT%,                                   \
             SRITL.CORE.COUNT%,                                     \
             SRITL.NON.CORE.CNT%,                                   \
             SRITL.ARRAY$,                                          \
             SRITL.FILLER$

   CALL SRITL.SPLIT.ARRAY

   READ.SRITL = 0
   EXIT FUNCTION

READ.SRITL.ERROR:

   CURRENT.REPORT.NUM% = SRITL.REPORT.NUM%
   FILE.OPERATION$ = "R"
   CURRENT.CODE$ = key$

  END FUNCTION

\--------------------------------------------------------------------

  FUNCTION WRITE.SRITL PUBLIC

   INTEGER*2 WRITE.SRITL
   STRING    key$

   WRITE.SRITL = 1

   IF END #SRITL.SESS.NUM% THEN WRITE.SRITL.ERROR

   key$ = BUILD.SRITL.KEY$
   CALL SRITL.CONCAT.ARRAY

   WRITE FORM "C4,I1,I2,I2,C112,C6";                                \
          #SRITL.SESS.NUM%;                                         \
             key$,                                                  \
             SRITL.MODULE.COUNT%,                                   \
             SRITL.CORE.COUNT%,                                     \
             SRITL.NON.CORE.CNT%,                                   \
             SRITL.ARRAY$,                                          \
             SRITL.FILLER$

   WRITE.SRITL = 0
   EXIT FUNCTION

WRITE.SRITL.ERROR:

   CURRENT.REPORT.NUM% = SRITL.REPORT.NUM%
   FILE.OPERATION$ = "W"
   CURRENT.CODE$ = key$

  END FUNCTION
