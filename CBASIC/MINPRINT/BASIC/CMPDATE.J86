!********************************************************************
!***
!***    INCLUDED CODE:  CMPDATE.J86
!***    AUTHOR:         Stuart William McConnachie
!***    DATE:           27th January 1997
!***
!********************************************************************
!***   
!***    Version B            Nik Sen                 30th March 1998
!***    Changes to cope with a date of '000000' by replacing it with
!***    '850101' before comparison. An all zero's date is valid in 
!***    certain date fields and CMPDATE was returning the wrong result
!***    when comparing with an actual date. Also change to cope with
!***    dates of '999999' as some date fields are initialised to this
!***    as a high value.
!***
!***    Version C    Stuart William McConnachie   20th December 1999
!***    Improved function efficiency by changing tests for high and
!***    low values, added above, to integers (rather than strings).
!***    Also, using 850101 as a replacement for 000000, will not give
!***    valid results after 350101 because of the 50 year wrap, so
!***    corrected this.
!***
!***    Version D.  Stuart William McConnachie    26th February 2006
!***    Place this code in it's own module in FUNLIB.  Make all
!***    the functions herein EXTERNAL accordingly.
!***
!********************************************************************
!***    
!***    The following functions compare dates, checking for
!***    century boundries.  Dates in the 50 years prior to the
!***    compared date are less than the compared date, dates in
!***    50 years after the compared date are greater than the
!***    compared date.
!***    Can handle dates in both packed and unpacked formats, or
!***    a mixture of both.
!***    In the case of a error, for example IH after detecting
!***    illegal characters in VAL, the functions default to
!***    comparing strings without testing for a change of century.
!***
!***    DATE.GT(DATE1$, DATE2$)  same as  DATE1$ >  DATE2$
!***    DATE.GE(DATE1$, DATE2$)  same as  DATE1$ >= DATE2$
!***    DATE.LT(DATE1$, DATE2$)  same as  DATE1$ <  DATE2$
!***    DATE.LE(DATE1$, DATE2$)  same as  DATE1$ <= DATE2$
!***
!********************************************************************

FUNCTION DATE.GT(DATE1$, DATE2$) EXTERNAL                               !DSWM
    STRING    DATE1$, DATE2$
    INTEGER*1 DATE.GT
END FUNCTION


FUNCTION DATE.GE(DATE1$, DATE2$) EXTERNAL                               !DSWM
    STRING    DATE1$, DATE2$
    INTEGER*1 DATE.GE
END FUNCTION


FUNCTION DATE.LT(DATE1$, DATE2$) EXTERNAL                               !DSWM
    STRING    DATE1$, DATE2$
    INTEGER*1 DATE.LT
END FUNCTION


FUNCTION DATE.LE(DATE1$, DATE2$) EXTERNAL                               !DSWM
    STRING    DATE1$, DATE2$
    INTEGER*1 DATE.LE
END FUNCTION

