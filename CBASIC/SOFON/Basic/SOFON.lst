   1: 0000: \************************************************************************
   2: 0000: \***
   3: 0000: \***    SOFON            Ranjith Gopalankutty          08/05/2018        
   4: 0000: \***                                                                     
   5: 0000: \***    This utility will check if a store is closed by reading SSCLS    
   6: 0000: \***    If so will check if any of the tills are signed on. If so report 
   7: 0000: \***    it to the log file.   
   8: 0000: \***
   9: 0000: \***    Version A        Ranjith Gopalankutty         11/07/2018
  10: 0000: \***    Addressed the comments on indent and not writing an OK file, now 
  11: 0000: \***    the program writes an output called SOFON.OK if the error        
  12: 0000: \***    is '0'
  13: 0000: \*********************************************************************** 
  14: 0000:      
  15: 0000: %INCLUDE BEMFDEC.J86
  16: 0000: \******************************************************************************
  17: 0000: \***
  18: 0000: \***	   %INCLUDE FOR BOOTS ERROR MESSAGE FILE - FIELD DECLARATIONS
  19: 0000: \***                                             - FILE REFERENCE PARAMETERS
  20: 0000: \***
  21: 0000: \***                         FILE TYPE : Direct
  22: 0000: \***
  23: 0000: \***                         REFERENCE : BEMFDEC
  24: 0000: \***
  25: 0000: \***	Version A               Mark Walker                  1st November 1993
  26: 0000: \***
  27: 0000: \******************************************************************************
  28: 0000: 
  29: 0000: 	STRING GLOBAL			BEMF.MESSAGE$,			\
  30: 0000: 					BEMF.FILE.NAME$
  31: 0000: 
  32: 0000: 	INTEGER*2 GLOBAL		BEMF.RECL%,			\
  33: 0000: 					BEMF.REPORT.NUM%,		\
  34: 0000: 					BEMF.SESS.NUM%
  35: 0000: 
  36: 0000: 	INTEGER*4 GLOBAL		BEMF.REC.NO%
  37: 0000: %INCLUDE BOOTSDEC.J86
  38: 0000: \******************************************************************************
  39: 0000: \******************************************************************************
  40: 0000: \***
  41: 0000: \***
  42: 0000: \***
  43: 0000: \******************************************************************************
  44: 0000: 
  45: 0000: 
  46: 0000: %INCLUDE PSBF01G.J86
  47: 0000: REM \
  48: 0000: \*******************************************************************************
  49: 0000: \*******************************************************************************
  50: 0000: \***
  51: 0000: \***       %INCLUDE FOR GLOBAL DEFINITIONS FOR FUNCTION APPLICATION.LOG
  52: 0000: \***
  53: 0000: \***                FUNCTION NUMBER    : PSBF01
  54: 0000: \***
  55: 0000: \***                REFERENCE          : PSBF01G.J86
  56: 0000: \***
  57: 0000: \***                DATE OF LAST AMENDMENT  - 27/2/86
  58: 0000: \***
  59: 0000: \***
  60: 0000: \*******************************************************************************
  61: 0000: 
  62: 0000:       INTEGER GLOBAL  F01.RETURN.CODE%
  63: 0000: 
  64: 0000: 
  65: 0000: %INCLUDE PSBF20G.J86
  66: 0000: REM\
  67: 0000: \*******************************************************************************
  68: 0000: \*******************************************************************************
  69: 0000: \***
  70: 0000: \***     %INCLUDE GLOBAL VARIABLE DEFINITIONS FOR SESS.NUM.UTILITY FUNCTION
  71: 0000: \***
  72: 0000: \***                       REFERENCE     : PSBF20G.J86
  73: 0000: \*** 
  74: 0000: \***     Version A              Bruce Scrive                   5th May 1988   
  75: 0000: \*** 
  76: 0000: \***     Version B              Robert Cowey                   7th May 1991
  77: 0000: \***     Global variable F20.INTEGER.FILE.NO% changed from one byte integer
  78: 0000: \***     to two byte integer.
  79: 0000: \***
  80: 0000: \***     Version D              Andrew Wedgeworth             1st July 1992
  81: 0000: \***     F20.RETURN.CODE% removed as it is no longer required.
  82: 0000: \***
  83: 0000: \*******************************************************************************
  84: 0000: \*******************************************************************************
  85: 0000: 
  86: 0000:       STRING    GLOBAL F20.FILE.NAME$,                                 \
  87: 0000:                        F20.STRING.FILE.NO$,                            \
  88: 0000:                        F20.TABLE.DIMENSIONED.FLAG$,                    \
  89: 0000:                        SESS.NUM.TABLE$(1)
  90: 0000: 
  91: 0000:       INTEGER*2 GLOBAL F20.INTEGER.FILE.NO%
  92: 0000: 
  93: 0000:       ! 1 line deleted from here                                       ! DAW 
  94: 0000: 
  95: 0000: %INCLUDE SSCLSDEC.J86
  96: 0000: \*****************************************************************************
  97: 0000: \*****************************************************************************
  98: 0000: \***
  99: 0000: \***               %INCLUDE FOR STORE CLOSE - FIELD DECLARATIONS
 100: 0000: \***                                          FILE REFERENCE PARAMETERS
 101: 0000: \***
 102: 0000: \***                      FILE TYPE    : DIRECT
 103: 0000: \***
 104: 0000: \***                      REFERENCE    : SSCLSDEA
 105: 0000: \***
 106: 0000: \***           VERSION A : STEVEN GOULDING  14.10.92
 107: 0000: \***
 108: 0000: \***           VERSION B : PAUL BOWERS      22.06.06
 109: 0000: \***                       A6C 24Hr Trading Support
 110: 0000: \***
 111: 0000: \***           Version C : Andrew Paton     May 2015
 112: 0000: \***           FOD-F392(Retail Stock 5
 113: 0000: \***           New variable SSCLS.STORE.CLOSED$ added to string global 
 114: 0000: \***
 115: 0000: \*****************************************************************************
 116: 0000: \*****************************************************************************
 117: 0000: 
 118: 0000: REM \
 119: 0000: 
 120: 0000:   STRING GLOBAL           \
 121: 0000:     SSCLS.FILE.NAME$
 122: 0000: 
 123: 0000:   INTEGER*2 GLOBAL        \
 124: 0000:     SSCLS.SESS.NUM%,      \
 125: 0000:     SSCLS.REPORT.NUM%     
 126: 0000:     
 127: 0000:   INTEGER*4 GLOBAL        \
 128: 0000:     SSCLS.REC.NO%     
 129: 0000: REM \
 130: 0000: 
 131: 0000:   STRING GLOBAL              \
 132: 0000:     SSCLS.KEYMODE$,          \ Logical Key mode flag -                                    A6C PAB
 133: 0000:     SSCLS.FLAG$,             \ 1BYTE - STORE CLOSING FLAG - "1" SET, "0" RESET
 134: 0000:     SSCLS.STORE.CLOSED$,     \ 1BYTE - Store Closed indicator          \CAP
 135: 0000:     SSCLS.FILLER$            ! 15 BYTE FILLER (ZEROES)
 136: 0000:     
 137: 0000: %INCLUDE TSFDEC.J86
 138: 0000: \*****************************************************************************
 139: 0000: \*****************************************************************************
 140: 0000: \***
 141: 0000: \***      %INCLUDE FOR TERMINAL STATUS FILE - FIELD DECLARATIONS
 142: 0000: \***                                          FILE REFERENCE PARAMETERS
 143: 0000: \***
 144: 0000: \***                      FILE TYPE    : KEYED
 145: 0000: \***
 146: 0000: \***                      REFERENCE    : TSFDEC
 147: 0000: \***
 148: 0000: \***           VERSION A : STEVEN GOULDING              13.10.92
 149: 0000: \***
 150: 0000: \***           VERSION B : STEVE WINDSOR                15.09.93
 151: 0000: \***           Updated to keep in step.
 152: 0000: \***
 153: 0000: \***           VERSION C : STUART WILLIAM MCCONNACHIE   18.03.97
 154: 0000: \***           Added extra fields in user data.
 155: 0000: \*** 
 156: 0000: \***           VERSION D : REBECCA DAKIN                22.02.99
 157: 0000: \***           Added ACSALD.CUT.OFF, as part of Cash Accounting project.
 158: 0000: \***
 159: 0000: \***           VERSION E : AMY HOGGARD                  16.10.00
 160: 0000: \***           Added TILLBAG.CUT.OFF, as part of ECO project.
 161: 0000: \***
 162: 0000: \***           VERSION F : STUART WILLIAM MCCONNACHIE   20.05.05
 163: 0000: \***           Added "new" fields as no one else can be bothered.
 164: 0000: \***           Corrected offset bug of controller ID.
 165: 0000: \***
 166: 0000: \***           VERSION G : JAMIE THORPE                 05.10.05
 167: 0000: \***           Added new INVDUE.DATE record to the store record 
 168: 0000: \***           (for Zero TSF proj.)
 169: 0000: \***           This is the date that the most recent INVDUE file
 170: 0000: \***           was created.
 171: 0000: \***
 172: 0000: \***    VERSION H               Mark Walker                      3rd Nov 2014
 173: 0000: \***    F294 PCI Phase 1
 174: 0000: \***    Includes the following changes:
 175: 0000: \***    - Removed redundant 'smartcard software level' field.
 176: 0000: \***    - Extended TSF.INDICAT2% integer field from 1 to 2 bytes.
 177: 0000: \***
 178: 0000: \*****************************************************************************
 179: 0000: \*****************************************************************************
 180: 0000: 
 181: 0000:     STRING GLOBAL               \
 182: 0000:         TSF.FILE.NAME$,         \
 183: 0000:         TSF.REC$(1),            \ One dimensional array
 184: 0000:         TSF.SECTOR.FILLER$,     \
 185: 0000:         TSF.SECTOR.INFO$
 186: 0000:         
 187: 0000:     INTEGER*1 GLOBAL            \
 188: 0000:         TSF.REC.SUB%            ! Subscript used with TSF.REC array
 189: 0000: 
 190: 0000:     INTEGER*2 GLOBAL            \
 191: 0000:         TSF.SESS.NUM%,          \
 192: 0000:         TSF.RECL%,              \
 193: 0000:         TSF.REPORT.NUM%,        \
 194: 0000:         TSF.SECTOR.NUM%
 195: 0000: 
 196: 0000:     STRING GLOBAL               \
 197: 0000:         TSF.TERM.STORE$,        \ 2 byte UPD.Terminal number or 
 198: 0000:                                 \ 9999 for store (key)
 199: 0000:         TSF.TSL.NAME$,          \ 8 bytes. Most recent old TSL file
 200: 0000:         TSF.MONITOR$,           \ 2 byte UPD last monitoring terminal
 201: 0000:         TSF.TLOGFLAG$,          \ 1 byte, EALLGHC processed flag
 202: 0000:         TSF.OPERATOR$,          \ Operator number
 203: 0000:         TSF.TRANSNUM$,          \ Most recent transaction
 204: 0000:         TSF.RCPSTATUS$,         \ Store close requested through RCF                                                             
 205: 0000:         TSF.SIGN.OFF.DELAY$,    \ 1 byte PD counter to auto sign off    \  !CSWM
 206: 0000:         TSF.USER$,              \ User data
 207: 0000:         TSF.CONTROLLER$,        \ Controller ID
 208: 0000:         TSF.INVDUE.DATE$,       \ Creation date of the INVDUE
 209: 0000:                                 \ (Updated by PSS33)                    \   !GJT
 210: 0000:         TSF.SPACE$              ! 34 bytes or 14 bytes
 211: 0000: 
 212: 0000:     INTEGER*1 GLOBAL            \
 213: 0000:         TSF.INDICAT0%,          \ Indicator byte 0
 214: 0000:         TSF.INDICAT1%,          \ Indicator byte 1
 215: 0000: \       TSF.INDICAT2%,          \ Indicator byte 2                      \   !HMW
 216: 0000:         TSF.MTSL.CUT.OFF%,      \ MTSL cut-off required flag            \  !CSWM
 217: 0000:         TSF.CUSTD.CUT.OFF%,     \ CUSTD cut-off required flag           \  !CSWM
 218: 0000:         TSF.ACSAL.CUT.OFF%,     \ ACSAL cut-off required flag               !DRD
 219: 0000:         TSF.TILLBAG.CUT.OFF%    ! TILLBAG cut-off required flag             !EAH
 220: 0000:     
 221: 0000:     INTEGER*2 GLOBAL            \
 222: 0000: \       TSF.SC.LEVEL%           ! Smartcard software level              \   !HMW
 223: 0000:         TSF.INDICAT2%           ! Indicator flags 2                         !HMW
 224: 0000: 
 225: 0000:     INTEGER*4 GLOBAL            \
 226: 0000:         TSF.GROSSPOS,           \ Gross plus
 227: 0000:         TSF.GROSSNEG,           \ Gross minus
 228: 0000:         TSF.NETCASH,            \ Net cash
 229: 0000:         TSF.NETNCASH,           \ Net non-cash
 230: 0000:         TSF.AMTLOAN,            \ Loans
 231: 0000:         TSF.AMTPICKU,           \ Withdrawals
 232: 0000:         TSF.AMTCASHC,           \ Cash count
 233: 0000:         TSF.NETCCURR,           \ Net cash currency face value
 234: 0000:         TSF.NETCCCURR           ! Net cash count currency face value
 235: 0000: 
 236: 0000:  
 237: 0000: 
 238: 0000: \***********************************************************************
 239: 0000: \*
 240: 0000: \*    Global variable definitions
 241: 0000: \*
 242: 0000: \***********************************************************************
 243: 0000: 
 244: 0000: STRING     GLOBAL        \
 245: 0000:      FILE.OPERATION$,    \
 246: 0000:      PINFO.TABLE$,       \
 247: 0000:      PASSED.STRING$,     \
 248: 0000:      SVC.PARAM$          
 249: 0000: 
 250: 0000: INTEGER*4  GLOBAL        \
 251: 0000:    ADX.FUNCTION%,        \
 252: 0000:    ADX.PARAM%,           \
 253: 0000:    CURRENT.REPORT.NUM%,  \
 254: 0000:    EVENT.NO%,            \
 255: 0000:    PASSED.INTEGER%,      \
 256: 0000:    RC%
 257: 0000:  
 258: 0000: STRING                  \
 259: 0000:     TERMS.LOG.NAME$,    \
 260: 0000:     TERMS.OK.NAME$,     \
 261: 0000:     FUNCTION.FLAG$,     \
 262: 0000:     FILE.NAME$,         \
 263: 0000:     PATTERN$,           \
 264: 0000:     FILE.RECORD$
 265: 0000:     
 266: 0000:        
 267: 0000: 
 268: 0000: INTEGER*4               \
 269: 0000:     SOFON.SESS.NUM%,    \
 270: 0000:     TERMS.OK.SESS%,     \
 271: 0000:     TERMS.SESS.NUM%,    \
 272: 0000:     FILE.RECL%,         \
 273: 0000:     OPTIONS%,           \
 274: 0000:     OFFSET%,            \
 275: 0000:     MODE%,              \
 276: 0000:     FID%,               \
 277: 0000:     RECORD.COUNT%,      \
 278: 0000:     READKF.RC%,         \
 279: 0000:     TERMKF.RC%
 280: 0000: 
 281: 0000:  ! REAL END.OF.FILE                                                     ! ARG
 282: 0000:  
 283: 0000: INTEGER*1              \
 284: 0000:    END.OF.FILE%,       \
 285: 0000:    ERROR.COUNT%
 286: 0000: 
 287: 0000: \***********************************************************************
 288: 0000: \*
 289: 0000: \*    Included code defining external Boots functions
 290: 0000: \*
 291: 0000: \***********************************************************************
 292: 0000: 
 293: 0000: %INCLUDE PSBF01E.J86 
 294: 0000: REM \
 295: 0000: \*******************************************************************************
 296: 0000: \*******************************************************************************
 297: 0000: \***
 298: 0000: \***      %INCLUDE FOR EXTERNAL DEFINITION OF FUNCTION APPLICATION.LOG
 299: 0000: \***
 300: 0000: \***                      FUNCTION NUMBER   : PSBF01
 301: 0000: \***
 302: 0000: \***                    INCLUDE REFERENCE : PSBF01E.J86
 303: 0000: \*** 
 304: 0000: \***      Version B           Andrew Wedgeworth          1st July 1992
 305: 0000: \***      Three parameters which passed to the function have been removed.
 306: 0000: \***      APPLICATION.LOG has been added as a variable name (this holds the
 307: 0000: \***      return code).
 308: 0000: \***
 309: 0000: \*******************************************************************************
 310: 0000: 
 311: 0000: 
 312: 0000:    FUNCTION APPLICATION.LOG (MESSAGE.NO%,                                     \
 313: 0000:                              VAR.STRING.1$,                                   \
 314: 0000:                              VAR.STRING.2$,                                   \
 315: 0000:                              EVENT.NO%)  EXTERNAL
 316: 0000: 
 317: 0000:       INTEGER*1 EVENT.NO%
 318: 0000: 
 319: 0000:       INTEGER*2 APPLICATION.LOG,                                       \ GAW
 320: 0000:                 MESSAGE.NO%
 321: 0000: 
 322: 0000:       STRING VAR.STRING.1$,                                            \
 323: 0000:              VAR.STRING.2$
 324: 0000: 
 325: 0000:    END FUNCTION
 326: 0000: 
 327: 0000: \*******************************************************************************
 328: 0000: %INCLUDE PSBF20E.J86 
 329: 0000: REM\
 330: 0000: \*******************************************************************************
 331: 0000: \*******************************************************************************
 332: 0000: \***
 333: 0000: \***       %INCLUDE FOR EXTERNAL DEFINITION OF SESS.NUM.UTILITY
 334: 0000: \***
 335: 0000: \***                  REFERENCE     : PSBF20E.J86
 336: 0000: \***
 337: 0000: \***     VERSION C            Janet Smith                13th May 1992
 338: 0000: \***     Increased PASSED.INTEGER to 2 bytes to cater for more than
 339: 0000: \***     128 files.
 340: 0000: \***
 341: 0000: \***     VERSION D.           Andrew Wedgeworth          1st July 1992
 342: 0000: \***     Removal of redundant parameters and addition of SESS.NUM.UTILITY
 343: 0000: \***     as a variable.  This new variable contains the function's return
 344: 0000: \***     code.
 345: 0000: \***
 346: 0000: \*******************************************************************************
 347: 0000: \*******************************************************************************
 348: 0000: 
 349: 0000:    FUNCTION SESS.NUM.UTILITY (FUNCTION.FLAG$,                          \
 350: 0000:                               PASSED.INTEGER%,                         \
 351: 0000:                               PASSED.STRING$)                          \
 352: 0000:    EXTERNAL
 353: 0000: 
 354: 0000:    STRING    FUNCTION.FLAG$,                                           \
 355: 0000:              PASSED.STRING$
 356: 0000:    ! 3 variables removed from here                                     ! CAW
 357: 0000: 
 358: 0000: 
 359: 0000:    INTEGER*2 SESS.NUM.UTILITY,                                         \ CAW
 360: 0000:              PASSED.INTEGER%				               ! CJAS
 361: 0000: 
 362: 0000:    END FUNCTION
 363: 0000: 
 364: 0000: %INCLUDE PSBF24E.J86
 365: 0000: REM \
 366: 0000: \*******************************************************************************
 367: 0000: \*******************************************************************************
 368: 0000: \***
 369: 0000: \***    %INCLUDE FOR EXTERNAL DEFINITION OF STANDARD.ERROR.DETECTED FUNCTION
 370: 0000: \***
 371: 0000: \***                      REFERENCE     : PSBF24E.J86
 372: 0000: \***
 373: 0000: \***    Version A                 Janet Smith                  13th May 1992
 374: 0000: \***
 375: 0000: \*******************************************************************************
 376: 0000: \*******************************************************************************
 377: 0000: 
 378: 0000:    FUNCTION STANDARD.ERROR.DETECTED(ERRN%,                 \
 379: 0000: 				    ERRFILE%,              \
 380: 0000: 				    ERRL%,                 \
 381: 0000: 				    ERR$)        EXTERNAL
 382: 0000: 				    
 383: 0000:           STRING    ERR$
 384: 0000: 
 385: 0000:           INTEGER*2 ERRFILE%,              \
 386: 0000: 	            ERRL%,                 \
 387: 0000: 		    STANDARD.ERROR.DETECTED
 388: 0000: 		    
 389: 0000:           INTEGER*4 ERRN%
 390: 0000: 	  		    
 391: 0000:    END FUNCTION
 392: 0000: 
 393: 0000: 
 394: 0000: %INCLUDE BEMFEXT.J86 
 395: 0000: \******************************************************************************
 396: 0000: \***
 397: 0000: \***        EXTERNAL FUNCTION DEFINITIONS FOR THE ITEM REFERENCE FILE
 398: 0000: \***                                                            
 399: 0000: \***                        REFERENCE : BEMFEXT
 400: 0000: \***
 401: 0000: \***    Version A               Mark Walker                   1st November 1993
 402: 0000: \***
 403: 0000: \***    Version B       Stuart William McConnachie          25th September 2000
 404: 0000: \***    READ.BEMF function has got lost!
 405: 0000: \***
 406: 0000: \******************************************************************************
 407: 0000: 
 408: 0000:     FUNCTION BEMF.SET EXTERNAL
 409: 0000:     END FUNCTION
 410: 0000:     
 411: 0000:     FUNCTION READ.BEMF EXTERNAL
 412: 0000:     INTEGER*1 READ.BEMF
 413: 0000:     END FUNCTION
 414: 0000:     
 415: 0000:     
 416: 0000: %INCLUDE BOOTSEXT.J86
 417: 0000: \******************************************************************************
 418: 0000: \******************************************************************************
 419: 0000: SUB LOG.ERROR(F.1$) EXTERNAL
 420: 0000:     STRING  F.1$
 421: 0000: END SUB
 422: 0000: 
 423: 0000: \******************************************************************************
 424: 0000: \******************************************************************************
 425: 0000: FUNCTION FORCE.CASE$(DATA$,TYPE%) EXTERNAL
 426: 0000:     STRING      FORCE.CASE$
 427: 0000:     STRING      DATA$
 428: 0000:     INTEGER*2   TYPE%
 429: 0000:     STRING      IN$, OUT$
 430: 0000:     STRING      LWR$, UPR$
 431: 0000: END FUNCTION
 432: 0000: 
 433: 0000: \******************************************************************************
 434: 0000: \******************************************************************************
 435: 0000: FUNCTION REMOVE.CHARACTER$(DATA$,F.CHR$) EXTERNAL
 436: 0000:     STRING      DATA$
 437: 0000:     STRING      F.CHR$
 438: 0000:     STRING      REMOVE.CHARACTER$
 439: 0000:     INTEGER*2   START%
 440: 0000:     INTEGER*2   END%
 441: 0000:     INTEGER*2   POS%
 442: 0000:     INTEGER*2   F.LEN%
 443: 0000: END FUNCTION
 444: 0000: 
 445: 0000: \******************************************************************************
 446: 0000: \******************************************************************************
 447: 0000: FUNCTION REMOVE.SPACES$(DATA$) EXTERNAL
 448: 0000:     STRING      DATA$
 449: 0000:     STRING      REMOVE.SPACES$
 450: 0000:     INTEGER*2   START%
 451: 0000:     INTEGER*2   END%
 452: 0000:     INTEGER*2   POS%
 453: 0000: END FUNCTION
 454: 0000: 
 455: 0000: \*******************************************************************************
 456: 0000: \***
 457: 0000: \***    FUNCTION     :    TIME.STAMP$
 458: 0000: \***    
 459: 0000: \***    Returns a string with formatted date and/or time detail
 460: 0000: \***                 Passed values are 1 = Date, 2 = Time
 461: 0000: \*******************************************************************************
 462: 0000: FUNCTION TIME.STAMP$(F.TYPE%) EXTERNAL
 463: 0000:     STRING      TIME.STAMP$
 464: 0000:     INTEGER*2   F.TYPE%
 465: 0000:     STRING      F.DT$
 466: 0000:     STRING      F.RET$
 467: 0000: END FUNCTION
 468: 0000: \*******************************************************************************
 469: 0000: 
 470: 0000: 
 471: 0000: \*******************************************************************************
 472: 0000: \*******************************************************************************
 473: 0000: FUNCTION PRINT.MSG$(MSG$,F%,L%) EXTERNAL
 474: 0000: STRING      PRINT.MSG$
 475: 0000: STRING      MSG$
 476: 0000: INTEGER*2   F%
 477: 0000: INTEGER*2   L%
 478: 0000: STRING      IN$
 479: 0000: STRING      F.FORM$
 480: 0000: END FUNCTION
 481: 0000: \*******************************************************************************
 482: 0000: 
 483: 0000: \*******************************************************************************
 484: 0000: \***
 485: 0000: \***    SUBROUTINE     :    BACKGROUND.MSG(B.MSG$)
 486: 0000: \***    
 487: 0000: \***    Displays passed message to the background message.
 488: 0000: \*******************************************************************************
 489: 0000: SUB BACKGROUND.MSG(B.MSG$) EXTERNAL
 490: 0000:     STRING      B.MSG$
 491: 0000:     INTEGER*4   B.RET%
 492: 0000: END SUB
 493: 0000: \*******************************************************************************
 494: 0000: 
 495: 0000: !*****************************************************************************!
 496: 0000: !***                                                                          !
 497: 0000: !*** SUBROUTINE :   NO.OPEN.FILE                                              !
 498: 0000: !***                    F.REPORT%       - Passed report number for logging    !
 499: 0000: !***                    F.OPEN.FLAG$    - Returned flag for not-opened        !
 500: 0000: !***                                                                          !
 501: 0000: !*** This subroutine logs an application 106 error with the passed report     !
 502: 0000: !*** number. It also sets a return variable to "N" to flag that the file is   !
 503: 0000: !*** not Open because of the failure.                                         !
 504: 0000: !***                                                                          !
 505: 0000: !*****************************************************************************!
 506: 0000: SUB NO.OPEN.FILE(F.REPORT%,F.OPEN.FLAG$) EXTERNAL                                      
 507: 0000:     INTEGER*2   F.REPORT%                                                         
 508: 0000:     STRING      F.OPEN.FLAG$                                                      
 509: 0000:     STRING      F.1$, F.2$
 510: 0000:     INTEGER*2   F.EVENT%
 511: 0000: END SUB                                                                       
 512: 0000: !*****************************************************************************!
 513: 0000: 
 514: 0000: 
 515: 0000: FUNCTION NUMBER.OF.DAYS%(START$,END$) EXTERNAL
 516: 0000: INTEGER*2   NUMBER.OF.DAYS%
 517: 0000: STRING      START$
 518: 0000: STRING      END$
 519: 0000: INTEGER*2   F.DAYS%
 520: 0000: INTEGER*4   S.DAYS%
 521: 0000: INTEGER*4   E.DAYS%
 522: 0000: END FUNCTION
 523: 0000: 
 524: 0000: FUNCTION HEX.FORMAT$(F.DATA$) EXTERNAL
 525: 0000: STRING  HEX.FORMAT$
 526: 0000: STRING  F.DATA$
 527: 0000: STRING      F.RET$
 528: 0000: INTEGER*2   F.LEN%
 529: 0000: STRING      F.TMP$(2)
 530: 0000: STRING      F.FORM$
 531: 0000: STRING      F.ASCII$
 532: 0000: STRING      F.ASC$
 533: 0000: STRING      F.HEX$
 534: 0000: STRING      F.WORK$, F.W2$
 535: 0000: INTEGER*2   F.LOOP%, F.L2%
 536: 0000: END FUNCTION
 537: 0000: 
 538: 0000: FUNCTION FORMAT.NUMBER$(F.NUM$,F.DEC%) EXTERNAL
 539: 0000: STRING      FORMAT.NUMBER$
 540: 0000: STRING      F.NUM$
 541: 0000: INTEGER*2   F.DEC%
 542: 0000: INTEGER*4   F.NUM%
 543: 0000: END FUNCTION
 544: 0000: 
 545: 0000: \*******************************************************************************
 546: 0000: FUNCTION FORMAT.BOOTS.CODE$(F.CODE$) EXTERNAL
 547: 0000: STRING  FORMAT.BOOTS.CODE$
 548: 0000: STRING  F.CODE$
 549: 0000: END FUNCTION
 550: 0000: 
 551: 0000: FUNCTION FORMAT.STRING$(F.STRING$,F.L%,F.P$,F.J%) EXTERNAL
 552: 0000: STRING    FORMAT.STRING$
 553: 0000: STRING    F.STRING$
 554: 0000: INTEGER*2 F.L%
 555: 0000: STRING    F.P$
 556: 0000: INTEGER*2 F.J%
 557: 0000: END FUNCTION
 558: 0000: 
 559: 0000: SUB GET.BLOCK.SIZE(F.BLOCK.SIZE%,F.FILENAME$,F.SIZE%) EXTERNAL
 560: 0000: INTEGER*4   F.BLOCK.SIZE%
 561: 0000: STRING      F.FILENAME$
 562: 0000: INTEGER*4   F.SIZE%
 563: 0000: INTEGER*4   F.BLOCK%
 564: 0000: INTEGER*2   F.SECTOR%
 565: 0000: INTEGER*2   F.LOOP%
 566: 0000: STRING      F.BLOCK.LENGTH$
 567: 0000: END SUB
 568: 0000: %INCLUDE TSFEXT.J86
 569: 0000: \*****************************************************************************
 570: 0000: \*****************************************************************************
 571: 0000: \***
 572: 0000: \***         FUNCTION DEFINITIONS FOR TERMINAL STATUS
 573: 0000: \***
 574: 0000: \***                      REFERENCE    : TSFEXTA
 575: 0000: \***
 576: 0000: \***           VERSION A : STEVEN GOULDING  14.10.92
 577: 0000: \***
 578: 0000: \***           VERSION B : STEVE WINDSOR    15.09.93
 579: 0000: \***           EXTERNAL label missing from READ.TSF.SECTOR function.
 580: 0000: \***
 581: 0000: \*****************************************************************************
 582: 0000: \****************************************************************************
 583: 0000: 
 584: 0000:    FUNCTION TSF.SET EXTERNAL
 585: 0000:    END FUNCTION
 586: 0000: 
 587: 0000: FUNCTION READ.TSF EXTERNAL
 588: 0000:    INTEGER*1 READ.TSF
 589: 0000:   END FUNCTION
 590: 0000: 
 591: 0000:   FUNCTION READ.TSF.LOCK EXTERNAL
 592: 0000:    INTEGER*1 READ.TSF.LOCK
 593: 0000:   END FUNCTION
 594: 0000: 
 595: 0000:   FUNCTION WRITE.TSF EXTERNAL
 596: 0000:    INTEGER*1 WRITE.TSF
 597: 0000:   END FUNCTION
 598: 0000: 
 599: 0000:   FUNCTION WRITE.TSF.UNLOCK EXTERNAL
 600: 0000:    INTEGER*1 WRITE.TSF.UNLOCK
 601: 0000:   END FUNCTION
 602: 0000: 
 603: 0000: FUNCTION WRITE.TSF.UNLOCK.HOLD EXTERNAL
 604: 0000:    INTEGER*1 WRITE.TSF.UNLOCK.HOLD         
 605: 0000:   END FUNCTION
 606: 0000: 
 607: 0000: FUNCTION READ.TSF.SECTOR EXTERNAL					!BSJW
 608: 0000:    INTEGER*1 READ.TSF.SECTOR               
 609: 0000:   END FUNCTION
 610: 0000: 
 611: 0000: %INCLUDE SSCLSEXT.J86
 612: 0000: \*****************************************************************************
 613: 0000: \*****************************************************************************
 614: 0000: \***
 615: 0000: \***         FUNCTION DEFINITIONS FOR SET STORE CLOSE
 616: 0000: \***
 617: 0000: \***                      REFERENCE    : SSCLSEXA
 618: 0000: \***
 619: 0000: \***           VERSION A : STEVEN GOULDING  14.10.92
 620: 0000: \***
 621: 0000: \*****************************************************************************
 622: 0000: \*****************************************************************************
 623: 0000: 
 624: 0000:    FUNCTION SSCLS.SET EXTERNAL
 625: 0000:    END FUNCTION
 626: 0000: 
 627: 0000:   FUNCTION WRITE.SSCLS EXTERNAL
 628: 0000:    INTEGER*1 WRITE.SSCLS
 629: 0000:   END FUNCTION
 630: 0000: 
 631: 0000:   FUNCTION READ.SSCLS EXTERNAL
 632: 0000:    INTEGER*1 READ.SSCLS
 633: 0000:   END FUNCTION
 634: 0000: 
 635: 0000: %INCLUDE KFASMEXT.J86
 636: 0000: \*******************************************************************************
 637: 0000: \*******************************************************************************
 638: 0000: \***
 639: 0000: \***   EXTERNAL FUNCTION DEFINITIONS FOR KEYED FILE ASSEMBLER FUNCTIONS
 640: 0000: \***
 641: 0000: \*******************************************************************************
 642: 0000: \*******************************************************************************
 643: 0000: 
 644: 0000: \*******************************************************************************
 645: 0000: \*******************************************************************************
 646: 0000: \***
 647: 0000: \***    Version A.              Mark Walker                      5th Feb 1998
 648: 0000: \***    Initial version.
 649: 0000: \***
 650: 0000: \***    Version B.              Mark Walker                     30th Jan 2014
 651: 0000: \***    Added new WRITEKF routine.
 652: 0000: \***
 653: 0000: \***    Version C.              Mark Walker                     21st May 2014
 654: 0000: \***    Extended READKF interface to include a mode flag.
 655: 0000: \***
 656: 0000: \***    Version D.              Mark Walker                      9th Jan 2017
 657: 0000: \***    Added new RECLKF routine.
 658: 0000: \***
 659: 0000: \*******************************************************************************
 660: 0000: \*******************************************************************************
 661: 0000: 
 662: 0000: \*******************************************************************************
 663: 0000: \***
 664: 0000: \***    FUNCTION        :       INITKF
 665: 0000: \***
 666: 0000: \******************************************************************************* 
 667: 0000: \***
 668: 0000: \***    Assembler function that initialises a keyed file for processing
 669: 0000: \***
 670: 0000: \******************************************************************************* 
 671: 0000: 
 672: 0000:     FUNCTION INITKF(FILE.NAME$,OPTIONS%) EXTERNAL
 673: 0000:     INTEGER*2       OPTIONS%
 674: 0000:     INTEGER*4       INITKF
 675: 0000:     STRING          FILE.NAME$
 676: 0000:     END FUNCTION      
 677: 0000: 
 678: 0000: \*******************************************************************************
 679: 0000: \***
 680: 0000: \***    FUNCTION        :       TERMKF
 681: 0000: \***
 682: 0000: \******************************************************************************* 
 683: 0000: \***
 684: 0000: \***    Assembler function that closes a file
 685: 0000: \***
 686: 0000: \******************************************************************************* 
 687: 0000: 
 688: 0000:     FUNCTION TERMKF(FID%) EXTERNAL
 689: 0000:     INTEGER*4       TERMKF
 690: 0000:     INTEGER*4       FID%
 691: 0000:     END FUNCTION      
 692: 0000: 
 693: 0000: \*******************************************************************************
 694: 0000: \***
 695: 0000: \***    FUNCTION        :       READKF
 696: 0000: \***
 697: 0000: \******************************************************************************* 
 698: 0000: \***
 699: 0000: \***    Assembler function that reads records from a keyed file that contain
 700: 0000: \***    a pattern string at a specified offset within the record
 701: 0000: \***
 702: 0000: \******************************************************************************* 
 703: 0000: 
 704: 0000:     FUNCTION READKF(RECORD$,PATTERN$,OFFSET%,MODE%) EXTERNAL            !CMW
 705: 0000:     INTEGER*2       MODE%                                               !CMW
 706: 0000:     INTEGER*4       OFFSET%
 707: 0000:     INTEGER*4       READKF
 708: 0000:     STRING          RECORD$
 709: 0000:     STRING          PATTERN$
 710: 0000:     END FUNCTION       
 711: 0000: 
 712: 0000: \***********************************************************************!BMW
 713: 0000: \***                                                                    !BMW
 714: 0000: \***    FUNCTION        :       WRITEKF                                 !BMW
 715: 0000: \***                                                                    !BMW
 716: 0000: \***********************************************************************!BMW
 717: 0000: \***                                                                    !BMW
 718: 0000: \***    Assembler function that updates records in a keyed file.        !BMW
 719: 0000: \***                                                                    !BMW
 720: 0000: \***********************************************************************!BMW
 721: 0000:                                                                         !BMW
 722: 0000:     FUNCTION WRITEKF(RECORD$) EXTERNAL                                  !BMW
 723: 0000:     INTEGER*4       WRITEKF                                             !BMW
 724: 0000:     STRING          RECORD$                                             !BMW
 725: 0000:     END FUNCTION                                                        !BMW
 726: 0000: 
 727: 0000: \***********************************************************************!DMW
 728: 0000: \***                                                                    !DMW
 729: 0000: \***   FUNCTION        :       RECLKF                                   !DMW
 730: 0000: \***                                                                    !DMW
 731: 0000: \***********************************************************************!DMW
 732: 0000: \***                                                                    !DMW
 733: 0000: \***   Assembler function that returns record length of a keyed file.   !DMW
 734: 0000: \***                                                                    !DMW
 735: 0000: \***********************************************************************!DMW
 736: 0000:                                                                         !DMW
 737: 0000:     FUNCTION RECLKF(FILE.NAME$) EXTERNAL                                !DMW
 738: 0000:     INTEGER*2 RECLKF                                                    !DMW
 739: 0000:     STRING FILE.NAME$                                                   !DMW
 740: 0000:     END FUNCTION                                                        !DMW
 741: 0000: 
 742: 0000: %INCLUDE BTCMEM.J86
 743: 0000: !********************************************************************
 744: 0000: !***
 745: 0000: !***    INCLUDED CODE:  BTCMEM.J86
 746: 0000: !***    AUTHOR:         Stuart William McConnachie
 747: 0000: !***    DATE:           26th February 2006
 748: 0000: !***
 749: 0000: !********************************************************************
 750: 0000: !***
 751: 0000: !***    Controller CBASIC Memory Functions
 752: 0000: !***
 753: 0000: !********************************************************************
 754: 0000: 
 755: 0000: !Get a single byte integer from a string offset
 756: 0000: FUNCTION GETN1 (S$, P%) EXTERNAL
 757: 0000:     STRING S$
 758: 0000:     INTEGER*2 P%
 759: 0000:     INTEGER*2 GETN1
 760: 0000: END FUNCTION
 761: 0000: 
 762: 0000: !Get a two byte integer from a string offset
 763: 0000: FUNCTION GETN2 (S$, P%) EXTERNAL
 764: 0000:     STRING S$
 765: 0000:     INTEGER*2 P%
 766: 0000:     INTEGER*2 GETN2
 767: 0000: END FUNCTION
 768: 0000: 
 769: 0000: !Get a four byte integer from a string offset
 770: 0000: FUNCTION GETN4 (S$, P%) EXTERNAL
 771: 0000:     STRING S$
 772: 0000:     INTEGER*2 P%
 773: 0000:     INTEGER*4 GETN4
 774: 0000: END FUNCTION
 775: 0000: 
 776: 0000: !Get a 10 byte CBASIC real from a string offset
 777: 0000: FUNCTION GETR10 (S$, P%) EXTERNAL
 778: 0000:     STRING S$
 779: 0000:     INTEGER*2 P%
 780: 0000:     REAL GETR10
 781: 0000: END FUNCTION
 782: 0000: 
 783: 0000: !Put a single byte integer into a string at offset
 784: 0000: FUNCTION PUTN1 (S$, P%, N%) EXTERNAL
 785: 0000:     STRING S$
 786: 0000:     INTEGER*2 P%
 787: 0000:     INTEGER*1 N%
 788: 0000:     INTEGER*1 PUTN1
 789: 0000: END FUNCTION
 790: 0000: 
 791: 0000: !Put a two byte integer into a string at offset
 792: 0000: FUNCTION PUTN2 (S$, P%, N%) EXTERNAL
 793: 0000:     STRING S$
 794: 0000:     INTEGER*2 P%
 795: 0000:     INTEGER*2 N%
 796: 0000:     INTEGER*1 PUTN2
 797: 0000: END FUNCTION
 798: 0000: 
 799: 0000: !Put a four byte integer into a string at offset
 800: 0000: FUNCTION PUTN4 (S$, P%, N%) EXTERNAL
 801: 0000:     STRING S$
 802: 0000:     INTEGER*2 P%
 803: 0000:     INTEGER*4 N%
 804: 0000:     INTEGER*1 PUTN4
 805: 0000: END FUNCTION
 806: 0000: 
 807: 0000: !Put a 10 byte CBASIC real into a string at offset
 808: 0000: FUNCTION PUTR10 (S$, P%, R) EXTERNAL
 809: 0000:     STRING S$
 810: 0000:     INTEGER*2 P%
 811: 0000:     REAL R
 812: 0000:     INTEGER*1 PUTR10
 813: 0000: END FUNCTION
 814: 0000: 
 815: 0000: !Peek a two byte integer from a memory address
 816: 0000: FUNCTION PEEKN2 (A%) EXTERNAL
 817: 0000:     INTEGER*4 A%
 818: 0000:     INTEGER*2 PEEKN2
 819: 0000: END FUNCTION
 820: 0000: 
 821: 0000: !Peek a four byte integer from a memory address
 822: 0000: FUNCTION PEEKN4 (A%) EXTERNAL
 823: 0000:     INTEGER*4 A%
 824: 0000:     INTEGER*4 PEEKN4
 825: 0000: END FUNCTION
 826: 0000: 
 827: 0000: !Peek a 10 byte CBASIC real from a memory address
 828: 0000: FUNCTION PEEKR10 (A%) EXTERNAL
 829: 0000:     INTEGER*4 A%
 830: 0000:     REAL PEEKR10
 831: 0000: END FUNCTION
 832: 0000: 
 833: 0000: !Poke a two byte integer to a memory address
 834: 0000: FUNCTION POKEN2 (A%, N%) EXTERNAL
 835: 0000:     INTEGER*4 A%
 836: 0000:     INTEGER*2 N%
 837: 0000:     INTEGER*1 POKEN2
 838: 0000: END FUNCTION
 839: 0000: 
 840: 0000: !Poke a four byte integer to a memory address
 841: 0000: FUNCTION POKEN4 (A%, N%) EXTERNAL
 842: 0000:     INTEGER*4 A%
 843: 0000:     INTEGER*4 N%
 844: 0000:     INTEGER*1 POKEN4
 845: 0000: END FUNCTION
 846: 0000: 
 847: 0000: !Poke a 10 byte CBASIC real to a memory address
 848: 0000: FUNCTION POKER10 (A%, R) EXTERNAL
 849: 0000:     INTEGER*4 A%
 850: 0000:     REAL R
 851: 0000:     INTEGER*1 POKER10
 852: 0000: END FUNCTION
 853: 0000: 
 854: 0000: 
 855: 0000: ON ERROR GOTO ERROR.DETECTED
 856: 002f: 
 857: 002f:     PRINT  TIME.STAMP$(2)  + "-Till sign on check starts"
 858: 005d: 
 859: 005d:     GOSUB INITIALISATION     
 860: 006f:     GOSUB MAIN.PROCESSING
 861: 0081:     GOSUB TERMINATION
 862: 0093:  
 863: 0093: STOP.PROGRAM:
 864: 009b: 
 865: 009b:     STOP
 866: 00a8: 
 867: 00a8: INITIALISATION:
 868: 00b8:     ERROR.COUNT% = 0
 869: 00c5:     CALL SSCLS.SET
 870: 00e0:     CALL TSF.SET
 871: 00fb:     TERMS.LOG.NAME$ = "ADXLXACN::C:/TERMS.LOG"
 872: 0110:     TERMS.SESS.NUM% = 456   
 873: 0125:     TERMS.OK.NAME$  = "ADXLXACN::C:/TERMS.ERR"
 874: 013a:     TERMS.OK.SESS%  = 457
 875: 014f:     SOFON.SESS.NUM% = 458
 876: 0164:     
 877: 0164: 
 878: 0164:     GOSUB ALLOCATE.SESSION.NUMBERS
 879: 0176: 
 880: 0176:     IF END #TERMS.SESS.NUM% THEN NO.FILE 
 881: 0193:     OPEN TERMS.LOG.NAME$ AS TERMS.SESS.NUM%  APPEND
 882: 01b8: 
 883: 01b8:     CREATE POSFILE TERMS.OK.NAME$ AS TERMS.OK.SESS%
 884: 01dc: 
 885: 01dc: RETURN
 886: 01ec: 
 887: 01ec: NO.FILE:
 888: 01fc: 
 889: 01fc:     CREATE POSFILE TERMS.LOG.NAME$ AS TERMS.SESS.NUM% 
 890: 0220: 
 891: 0220: RETURN
 892: 0230: 
 893: 0230: ALLOCATE.SESSION.NUMBERS:
 894: 0240: 
 895: 0240:     FUNCTION.FLAG$ = "O"                           
 896: 0255: 
 897: 0255:     PASSED.INTEGER% = SSCLS.REPORT.NUM%                                
 898: 0272:     PASSED.STRING$  = SSCLS.FILE.NAME$                                 
 899: 0290:     GOSUB CALL.F20.SESS.NUM.UTILITY                                    
 900: 02a2:     SSCLS.SESS.NUM% = F20.INTEGER.FILE.NO%                             
 901: 02b8: 
 902: 02b8:     !PASSED.INTEGER% = TERMS.REPORT.NUM%                                ! ARG
 903: 02b8:     !PASSED.STRING$  = TERMS.LOG.NAME$                                  ! ARG
 904: 02b8:     !GOSUB CALL.F20.SESS.NUM.UTILITY                                    ! ARG
 905: 02b8:     !TERMS.SESS.NUM% = F20.INTEGER.FILE.NO%                             ! ARG
 906: 02b8: 
 907: 02b8:     !PASSED.INTEGER% = TERMS.OK.SESS%                                   ! ARG
 908: 02b8:     !PASSED.STRING$  = TERMS.OK.NAME$                                   ! ARG
 909: 02b8:     !GOSUB CALL.F20.SESS.NUM.UTILITY                                    ! ARG
 910: 02b8:     !TERMS.OK.SESS% = F20.INTEGER.FILE.NO%                              ! ARG
 911: 02b8:                               
 912: 02b8: 
 913: 02b8: RETURN	
 914: 02c8: 
 915: 02c8: CALL.F20.SESS.NUM.UTILITY: 
 916: 02d8:         
 917: 02d8:     FILE.OPERATION$ = FUNCTION.FLAG$
 918: 02f3:     CURRENT.REPORT.NUM% = PASSED.INTEGER%
 919: 030c:     RC% = SESS.NUM.UTILITY (FUNCTION.FLAG$, PASSED.INTEGER%,       \
 920: 0349:                                  PASSED.STRING$)
 921: 0349:     IF RC% <> 0 THEN GOTO ERROR.DETECTED
 922: 036b: 
 923: 036b: RETURN
 924: 037b: 
 925: 037b: MAIN.PROCESSING:
 926: 038b: 
 927: 038b:     OPEN SSCLS.FILE.NAME$ DIRECT RECL 16 AS SSCLS.SESS.NUM% NODEL
 928: 03b3: 
 929: 03b3:     SSCLS.REC.NO% = 1           
 930: 03ca:     RC% = READ.SSCLS           
 931: 03e9: 
 932: 03e9:     IF RC% = 0 THEN BEGIN
 933: 040b:        
 934: 040b:         IF SSCLS.STORE.CLOSED$  = "Y" THEN BEGIN
 935: 0429:             GOSUB READ.TERMS
 936: 043e:     
 937: 043e:         ENDIF ELSE BEGIN
 938: 0446:     
 939: 0446:             PRINT DATE$ + "-" + TIME.STAMP$(2) + "-Store is not closed , not reading TSF"
 940: 0488:             PRINT #TERMS.SESS.NUM% ; DATE$ + "-" + TIME.STAMP$(2) + "-Store is not closed , not reading TSF"
 941: 04d9:         ENDIF
 942: 04e1:     ENDIF
 943: 04e9: 
 944: 04e9: RETURN
 945: 04f9: 
 946: 04f9: READ.TERMS:
 947: 0509: 
 948: 0509:     FILE.NAME$ = "EALTERMS"
 949: 051e:     FILE.RECL% = 63
 950: 0533:     OPTIONS%   = 201AH
 951: 0548:     PATTERN$   = ""
 952: 055d:     OFFSET%    = 0
 953: 0572:     MODE%      = 0
 954: 0587:  
 955: 0587:     FID% = INITKF(FILE.NAME$,OPTIONS%)
 956: 05b4: 
 957: 05b4:     ! Check for errors opening file
 958: 05b4:     IF FID% <= 0 THEN BEGIN
 959: 05cd:         PRINT #TERMS.OK.SESS% ; "OPENING ERROR"
 960: 05ed:         STOP
 961: 05fa:     ENDIF
 962: 0602: 
 963: 0602:     RECORD.COUNT% = 0
 964: 0617: 
 965: 0617:     END.OF.FILE% = 0
 966: 0624: 
 967: 0624:     ! Continue until end of file reached
 968: 0624:     WHILE NOT END.OF.FILE%
 969: 062f: 
 970: 062f:         FILE.RECORD$ = STRING$(FILE.RECL%,CHR$(0))
 971: 0654: 
 972: 0654:         READKF.RC% = READKF(FILE.RECORD$,PATTERN$,OFFSET%,MODE%)
 973: 0691: 
 974: 0691:         IF READKF.RC% = 0 THEN BEGIN
 975: 06af: 
 976: 06af:             TSF.TERM.STORE$        = LEFT$(FILE.RECORD$,2)
 977: 06d3: 
 978: 06d3:             IF TSF.TERM.STORE$ <> PACK$("9999") THEN BEGIN
 979: 06fc: 
 980: 06fc:                  TSF.INDICAT0%          = ASC(MID$(FILE.RECORD$,3,1))  ! ARG
 981: 0724:             !    TSF.INDICAT1%          = ASC(MID$(FILE.RECORD$,4,1))  ! ARG
 982: 0724:             !    TSF.GROSSPOS           = GETN4(FILE.RECORD$,4)        ! ARG
 983: 0724:             !    TSF.GROSSNEG           = GETN4(FILE.RECORD$,8)        ! ARG
 984: 0724:             !    TSF.NETCASH            = GETN4(FILE.RECORD$,12)       ! ARG
 985: 0724:             !    TSF.NETNCASH           = GETN4(FILE.RECORD$,16)       ! ARG
 986: 0724:             !    TSF.AMTLOAN            = GETN4(FILE.RECORD$,20)       ! ARG
 987: 0724:             !    TSF.AMTPICKU           = GETN4(FILE.RECORD$,24)       ! ARG
 988: 0724:             !    TSF.AMTCASHC           = GETN4(FILE.RECORD$,28)       ! ARG
 989: 0724:             !    TSF.OPERATOR$          = MID$(FILE.RECORD$,33,4)      ! ARG
 990: 0724:             !    TSF.TRANSNUM$          = MID$(FILE.RECORD$,37,2)      ! ARG
 991: 0724:             !    TSF.SIGN.OFF.DELAY$    = MID$(FILE.RECORD$,39,1)      ! ARG
 992: 0724:             !    TSF.INDICAT2%          = GETN2(FILE.RECORD$,39)       ! ARG
 993: 0724:             !    TSF.USER$              = MID$(FILE.RECORD$,42,5)      ! ARG
 994: 0724:             !    TSF.CONTROLLER$        = MID$(FILE.RECORD$,47,2)      ! ARG
 995: 0724:             !    TSF.NETCCURR           = GETN4(FILE.RECORD$,48)       ! ARG
 996: 0724:             !    TSF.NETCCCURR          = GETN4(FILE.RECORD$,52)       ! ARG
 997: 0724:             !    TSF.SPACE$             = MID$(FILE.RECORD$,57,7)      ! ARG
 998: 0724:                  
 999: 0724:                  
1000: 0724:                 IF  TSF.INDICAT0%  = 8 THEN BEGIN
1001: 0739: 
1002: 0739:                     PRINT  DATE$ + "-" + TIME.STAMP$(2) + "-" + UNPACK$(TSF.TERM.STORE$) + " IS IN SIGNED ON STATUS"
1003: 079a:                     PRINT #TERMS.SESS.NUM% ; DATE$ + "-" + TIME.STAMP$(2) + "-" + UNPACK$(TSF.TERM.STORE$) + " IS IN SIGNED ON STATUS" 
1004: 080a: 
1005: 080a:                     RECORD.COUNT% = RECORD.COUNT% + 1
1006: 0823:                 ENDIF
1007: 082b:   
1008: 082b:             ENDIF
1009: 0836:   
1010: 0836:         ENDIF ELSE BEGIN 
1011: 083e:   
1012: 083e:             IF READKF.RC% = -1 THEN BEGIN
1013: 0859:                 END.OF.FILE% = -1
1014: 0868:             ENDIF ELSE BEGIN
1015: 0870:             ! Check whether an error has been returned
1016: 0870:                 IF READKF.RC% < -1 THEN BEGIN
1017: 0889:                     PRINT #TERMS.OK.SESS% ; "READKF ERROR " 
1018: 08a9:                     STOP
1019: 08b6:                 ENDIF
1020: 08be:             ENDIF                                
1021: 08c6: 
1022: 08c6:         ENDIF
1023: 08ce: 
1024: 08ce:     WEND
1025: 08e0: 
1026: 08e0:     TERMKF.RC% = TERMKF(FID%)
1027: 0905: 
1028: 0905:     IF TERMKF.RC% < 0 THEN BEGIN
1029: 091e:         PRINT #TERMS.OK.SESS% ; "File close failed"
1030: 093e:     ENDIF
1031: 0946:  
1032: 0946: RETURN
1033: 0956: 
1034: 0956: DEALLOCATE.SESSION.NUMBERS:
1035: 0966: 
1036: 0966:     FUNCTION.FLAG$ = "C"                                               
1037: 097b: 
1038: 097b:     PASSED.INTEGER% = SSCLS.REPORT.NUM%                                
1039: 0998:     PASSED.STRING$  = SSCLS.FILE.NAME$                                 
1040: 09b6:     GOSUB CALL.F20.SESS.NUM.UTILITY                                    
1041: 09c8:     SSCLS.SESS.NUM% = F20.INTEGER.FILE.NO%                             
1042: 09de: 
1043: 09de:     !PASSED.INTEGER% = TERMS.REPORT.NUM%                                ! ARG
1044: 09de:     !PASSED.STRING$  = TERMS.LOG.NAME$                                  ! ARG
1045: 09de:     !GOSUB CALL.F20.SESS.NUM.UTILITY                                    ! ARG
1046: 09de:     !TERMS.SESS.NUM% = F20.INTEGER.FILE.NO%                             ! ARG
1047: 09de: 
1048: 09de:     !PASSED.INTEGER% = TERMS.OK.SESS%                                   ! ARG
1049: 09de:     !PASSED.STRING$  = TERMS.OK.NAME$                                   ! ARG
1050: 09de:     !GOSUB CALL.F20.SESS.NUM.UTILITY                                    ! ARG
1051: 09de:     !TERMS.OK.SESS% = F20.INTEGER.FILE.NO%                              ! ARG
1052: 09de:                               
1053: 09de: 
1054: 09de: RETURN
1055: 09ee: 
1056: 09ee: TERMINATION:
1057: 09fe: 
1058: 09fe:     IF RECORD.COUNT% = 0 THEN BEGIN
1059: 0a19:         PRINT #TERMS.SESS.NUM% ; DATE$ + "-" + TIME.STAMP$(2) + "-No tills are in signed on status"
1060: 0a6a:     ENDIF 
1061: 0a72:     
1062: 0a72:     IF ERROR.COUNT% = 0 THEN BEGIN
1063: 0a81:        CREATE POSFILE "C:\SOFON.OK" AS SOFON.SESS.NUM%
1064: 0aa1:     ENDIF
1065: 0aa9:      
1066: 0aa9:     GOSUB DEALLOCATE.SESSION.NUMBERS
1067: 0abb:     CLOSE TERMS.OK.SESS%
1068: 0ad0:     CLOSE TERMS.SESS.NUM%
1069: 0ae5:     CLOSE SSCLS.SESS.NUM%
1070: 0af9: 
1071: 0af9: RETURN
1072: 0b09: 
1073: 0b09: ERROR.DETECTED:
1074: 0b19: 
1075: 0b19:     ERROR.COUNT% = ERROR.COUNT%  + 1 
1076: 0b25:     PRINT #TERMS.OK.SESS% ; ERR
1077: 0b49:     PRINT #TERMS.OK.SESS% ; ERRF%
1078: 0b6b:     PRINT #TERMS.OK.SESS% ; ERRL
1079: 0b92: 
1080: 0b92: ! RETURN                                                                !ARG
1081: 0b92: End of Compilation
