\/* TIME STAMP BLOCK **********************************************
\** END OF TIME STAMP BLOCK **************************************/
!! THIS MODULE WAS CREATED BY APAR IR70269
!*********************************************************************
!
! ASSEMBLER SUBROUTNE DEFINITIONS
!
! These definitions should be copied by any routine which wishes to
! use the performanced enhanced assembler routines.
!
!*********************************************************************
 
!*********************************************************************
!
! SUBSTR
!
! This routine performs a merge of two strings. String P3$, offset P4
! is merged into string P1$ offset P2 for a length of P5 bytes
!
! CAUTION: P1$ must be long enough to totally contain P3$
!
! NOTE: THE OFFSETS PASSED TO THIS ROUTINE ARE ZERO INDEXED
!
!*********************************************************************
 
 FUNCTION SUBSTR (P1$,P2,P3$,P4,P5) EXTERNAL
 STRING P1$,P3$
 INTEGER*2 P2,P4,P5
 END FUNCTION
 
!*********************************************************************
!
! GETN2/GETN4
!
! These routines extract a two/four byte integer from a string.
! P2 is the offset within the string
!
! NOTE: THE OFFSET PASSED TO THIS ROUTINE IS ZERO INDEXED
!
!*********************************************************************
 
 FUNCTION GETN2(P1$,P2) EXTERNAL
 INTEGER*2 GETN2
 STRING P1$
 INTEGER*2 P2
 END FUNCTION
 
 FUNCTION GETN4(P1$,P2) EXTERNAL
 INTEGER*4 GETN4
 STRING P1$
 INTEGER*2 P2
 END FUNCTION
 
!*********************************************************************
!
! PUTN2/PUTN4
!
! These routines insert a two/four byte integer into a string.
! P2 is the offset within the string and P3 is the source integer
!
! NOTE: THE OFFSET PASSED TO THIS ROUTINE IS ZERO INDEXED
!
!*********************************************************************
 
 FUNCTION PUTN2(P1$,P2,P3) EXTERNAL
 STRING P1$
 INTEGER*2 P2,P3
 END FUNCTION
 
 FUNCTION PUTN4(P1$,P2,P3) EXTERNAL
 STRING P1$
 INTEGER*2 P2
 INTEGER*4 P3
 END FUNCTION
 
!*********************************************************************
!
! PACKBIN2/4
!
! These routines take a packed decimal string and convert to integer
! (The equivalent of CBASIC INT%(VAL(UNPACK$())) )
! P1 is the source string, P2 the string offset and P3 the length
!
! NOTE: THE OFFSET PASSED TO THIS ROUTINE IS ZERO INDEXED
!
!*********************************************************************
 
 FUNCTION PACKBIN2(P1$,P2,P3) EXTERNAL
 INTEGER*2 PACKBIN2
 STRING P1$
 INTEGER*2 P2,P3
 END FUNCTION
 
 FUNCTION PACKBIN4(P1$,P2,P3) EXTERNAL
 INTEGER*4 PACKBIN4
 STRING P1$
 INTEGER*2 P2,P3
 END FUNCTION
 
!*********************************************************************
!
! ADDIN2/4
!
! These routines add an integer into an integer which is imbedded within
! a string.  P1$ is the string containing at offset P2 the integer to be
! updated.  P3 is the integer to be added into P1$.
!
! NOTE: THE OFFSET PASSED TO THIS ROUTINE IS ZERO INDEXED
!
!*********************************************************************
 
 FUNCTION ADDIN4(P1$,P2,P3) EXTERNAL
 INTEGER*4 ADDIN4
 STRING P1$
 INTEGER*2 P2
 INTEGER*4 P3
 END FUNCTION
 
 FUNCTION ADDIN2(P1$,P2,P3) EXTERNAL
 INTEGER*2 ADDIN2
 STRING P1$
 INTEGER*2 P2,P3
 END FUNCTION
 
!*********************************************************************
!
! MATCHB
!
! This routine performs a fast match function when the string being
! searched for contains only a single character.  As with the MATCH
! function, P1$ is the character to be found, P2$ is the string to be
! searched, and P3 the offst at which to start the search.
!
!*********************************************************************
 
 FUNCTION MATCHB(P1$,P2$,P3) EXTERNAL
 INTEGER*2 MATCHB
 STRING P1$
 STRING P2$
 INTEGER*2 P3
 END FUNCTION
 
\ REM!! *************************************************************!!
\ REM!! PROCEDURE - CONVERT A PACKED DECIMAL DATA STRING TO A        !!
\ REM!! 4 BYTE BINARY INTEGER REPRESENTED AS A STRING.               !!
\ REM!! STRING "OUT$" MUST BE INITIALIZED BEFORE CALLING THE ROUTINE.!!
\ REM!! *************************************************************!!
 
SUB UPDBIN4 (IN$,OUT$) EXTERNAL
STRING IN$,OUT$
END SUB
 
\ REM!! *************************************************************!!
\ REM!! PROCEDURE - CONVERT A PACKED DECIMAL DATA STRING TO A        !!
\ REM!! 3 BYTE BINARY INTEGER REPRESENTED AS A STRING.               !!
\ REM!! STRING "OUT$" MUST BE INITIALIZED BEFORE CALLING THE ROUTINE.!!
\ REM!! *************************************************************!!
 
SUB UPDBIN3 (IN$,OUT$) EXTERNAL
STRING IN$,OUT$
END SUB
 
\ REM!! *************************************************************!!
\ REM!! PROCEDURE - CONVERT A PACKED DECIMAL DATA STRING TO A        !!
\ REM!! 2 BYTE BINARY INTEGER REPRESENTED AS A STRING.               !!
\ REM!! STRING "OUT$" MUST BE INITIALIZED BEFORE CALLING THE ROUTINE.!!
\ REM!! *************************************************************!!
 
SUB UPDBIN2 (IN$,OUT$) EXTERNAL
STRING IN$,OUT$
END SUB
 
\ REM!! *************************************************************!!
\ REM!! PROCEDURE - CONVERT A PACKED DECIMAL DATA STRING TO A        !!
\ REM!! 1 BYTE BINARY INTEGER REPRESENTED AS A STRING.               !!
\ REM!! STRING "OUT$" MUST BE INITIALIZED BEFORE CALLING THE ROUTINE.!!
\ REM!! *************************************************************!!
 
SUB UPDBIN1 (IN$,OUT$) EXTERNAL
STRING IN$,OUT$
END SUB
 
\ REM!! *************************************************************!!
\ REM!! PROCEDURE - CONVERT A PACKED DECIMAL DATA STRING TO A        !!
\ REM!! 4 BYTE HEX REPRESENTATION OF A 2-BYTE INTEGER                !!
\ REM!! STRING "OUT$" MUST BE INITIALIZED BEFORE CALLING THE ROUTINE.!!
\ REM!! *************************************************************!!
 
SUB UPDHEX2 (IN$,OUT$) EXTERNAL
STRING IN$,OUT$
END SUB
 
\ REM!! *************************************************************!!
\ REM!! PROCEDURE - CONVERT A PACKED DECIMAL DATA STRING TO A        !!
\ REM!! 2 BYTE HEX REPRESENTATION OF A 1-BYTE INTEGER                !!
\ REM!! STRING "OUT$" MUST BE INITIALIZED BEFORE CALLING THE ROUTINE.!!
\ REM!! *************************************************************!!
 
SUB UPDHEX1 (IN$,OUT$) EXTERNAL
STRING IN$,OUT$
END SUB
 
\ REM!! *************************************************************!!
\ REM!! PROCEDURE - CONVERT AN INPUT 4 BYTE INTEGER REPRESENTED AS A !!
\ REM!! STRING TO A 2 BYTE BINARY INTEGER REPRESENTED AS A STRING    !!
\ REM!! WHERE BOTH THE INPUT AND OUTPUT MAY BE IMBEDDED WITHIN THE   !!
\ REM!! GIVEN STRING AT THE GIVEN OFFSET.                            !!
\ REM!! STRING "OUT$" MUST BE INITIALIZED BEFORE CALLING THE ROUTINE.!!
\ REM!!
\ REM!! NOTE: THE OFFSETS PASSED TO THIS ROUTINE ARE UNIT INDEXED
\ REM!! *************************************************************!!
 
SUB INTBIN2 (IN$,IN%,OUT$,OUT%) EXTERNAL
STRING IN$,OUT$
INTEGER IN%,OUT%
END SUB
 
\ REM!! *************************************************************!!
\ REM!! PROCEDURE - CONVERT AN INPUT 4 BYTE INTEGER REPRESENTED AS A !!
\ REM!! STRING TO A 3 BYTE BINARY INTEGER REPRESENTED AS A STRING    !!
\ REM!! WHERE BOTH THE INPUT AND OUTPUT MAY BE IMBEDDED WITHIN THE   !!
\ REM!! GIVEN STRING AT THE GIVEN OFFSET.                            !!
\ REM!! STRING "OUT$" MUST BE INITIALIZED BEFORE CALLING THE ROUTINE.!!
\ REM!!
\ REM!! NOTE: THE OFFSETS PASSED TO THIS ROUTINE ARE UNIT INDEXED
\ REM!! *************************************************************!!
 
SUB INTBIN3 (IN$,IN%,OUT$,OUT%) EXTERNAL
STRING IN$,OUT$
INTEGER IN%,OUT%
END SUB
 
\ REM!! *************************************************************!!
\ REM!! PROCEDURE - CONVERT AN INPUT 4 BYTE INTEGER REPRESENTED AS A !!
\ REM!! STRING TO A 4 BYTE BINARY INTEGER REPRESENTED AS A STRING    !!
\ REM!! WHERE BOTH THE INPUT AND OUTPUT MAY BE IMBEDDED WITHIN THE   !!
\ REM!! GIVEN STRING AT THE GIVEN OFFSET.                            !!
\ REM!! STRING "OUT$" MUST BE INITIALIZED BEFORE CALLING THE ROUTINE.!!
\ REM!!
\ REM!! NOTE: THE OFFSETS PASSED TO THIS ROUTINE ARE UNIT INDEXED
\ REM!! *************************************************************!!
 
SUB INTBIN4 (IN$,IN%,OUT$,OUT%) EXTERNAL
STRING IN$,OUT$
INTEGER IN%,OUT%
END SUB
 
