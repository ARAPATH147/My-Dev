:
:  DW
:  17D
:  Order & Collect, Returns & Refunds
:
: **************************************
: * DEFINE LOGICAL FILE NAMES          *
: **************************************
:
rem Package name
DEFINE PNAME=17D
rem Package name and version
DEFINE PNAMEV=17D6
:
DEFINE BACKRUN=NO
IF %1. == BACKOUT. DEFINE BACKRUN=YES
IF %2. == BACKOUT. DEFINE BACKRUN=YES
IF %3. == BACKOUT. DEFINE BACKRUN=YES
IF %4. == BACKOUT. DEFINE BACKRUN=YES

DEFINE ASMRUN=1A 1B 1C
DEFINE ASMKILL=2A 2B 2C
DEFINE ASMCHK=-SA -SB -SC
Rem If package should not accept the previous major set to NO
DEFINE ACEPTASM=YES
Rem Set ASMTEST to NO if you do not want ASM to apply in test mode
DEFINE ASMTEST=YES

rem -----------------------------------------------------------------------------------------------------------------------
  Rem Package start time, package will wait until this time
  Rem After 11 check will be after this, make sure it is before 23:00 or time set on SLEPTIME
  Rem Set to 999999 if not required.
  DEFINE RUNTIME=999999

  rem Time should be before midnight
  rem Once this time has past package will then wait for midnight
  DEFINE SLEPTIME=230000
  rem Times should be after midnight
  DEFINE WAKETIME=011000
  DEFINE  ENDTIME=023000
rem ----------------------------------------------------------------------------------------------------------------------

IF NOT %BACKRUN%==YES {
  rem package to check for. Set to NOCHECK if not required
  DEFINE PCHECK=17C
  :
  rem Set to YES or NO
  DEFINE RUNASM=YES
  IF %RUNASM%==YES {
     DEFINE ACEPTASM=YES
  }  
  :
  rem Till IPL required
  rem Set to STC, TL or ASM (ASM till reload)
  rem or rem it out for no reload.
  DEFINE TIPL=ASM
  :
  rem Close check YES or NO
  DEFINE CLOSE=YES
  :
  rem Controller IPL YES or NO
  DEFINE CIPL=YES
  :
  rem Run IPL batch YES or NO
  DEFINE RUNIPL=YES
  :
  rem CRC Check YES or NO and whether to UNZIP
  DEFINE CHECKCRC=YES
  DEFINE DOUNZIP=YES
  :
  Rem YES or NO. Dependent on whether a run of PKGJOBS is required
  DEFINE PJOBS=YES
  :
  DEFINE CNVSION1=NO
  DEFINE CNVSION2=NO
  DEFINE CNVSION3=NO
  DEFINE CNVSION4=NO
  DEFINE CNVSION5=NO
}
ELSE {
  DEFINE PCHECK=NOCHECK
  DEFINE RUNASM=YES
  DEFINE TIPL=ASM
  DEFINE CLOSE=YES
  DEFINE CIPL=YES
  DEFINE RUNIPL=YES
  DEFINE CHECKCRC=NO
  DEFINE DOUNZIP=NO
  DEFINE PJOBS=YES
  :
  DEFINE CNVSION1=YES
  DEFINE CNVSION2=YES
  DEFINE CNVSION3=YES
  DEFINE CNVSION4=YES
  DEFINE CNVSION5=YES
}
rem TINFO
IF NOT %BACKRUN%==YES {
  rem TINFOUTL to reset IPL flags
  DEFINE TRSTFLGS=Y
  rem TINFOUTL to run post package check
  DEFINE TPKGCHK=Y  
}  
ELSE {
  DEFINE TRSTFLGS=N
  DEFINE TPKGCHK=N
}
IF NOT %TIPL%==ASM {
  IF NOT %TIPL%==STC {
    IF NOT %TIPL%==TL {
      DEFINE TRSTFLGS=N
      DEFINE TPKGCHK=N
    }
  }
}
rem TINFO
:
IF %RUNASM%==YES DEFINE CIPL=YES
IF EXIST C:\ADX_UMNT\ADXILI0F.%PNAME% ERASE C:\ADX_UMNT\ADXILI0F.%PNAME%
:
IF %CIPL%==NO DEFINE RUNIPL=NO
:
IF %RUNIPL%==YES {
  IF %BACKRUN%==YES {
    ECHO -NCE COMMAND -C ADXLXAAN::C:\ADX_UMNT\%PNAME%IPL.BAT MASTER BACKOUT %PNAMEV% >ADXLXAAN::C:\ADX_UMNT\ADXILI0F.%PNAME%
    ECHO -NCF COMMAND -C ADXLXABN::C:\ADX_UMNT\%PNAME%IPL.BAT ALTERNATE BACKOUT %PNAMEV% >>ADXLXAAN::C:\ADX_UMNT\ADXILI0F.%PNAME%
  }
  ELSE {
    rem TINFO
    ECHO -NCE COMMAND -C ADXLXAAN::C:\ADX_UMNT\%PNAME%IPL.BAT MASTER %PNAMEV% %TPKGCHK% >ADXLXAAN::C:\ADX_UMNT\ADXILI0F.%PNAME%
    ECHO -NCF COMMAND -C C:\ADX_UMNT\%PNAME%IPL.BAT ALTERNATE %PNAMEV% %TPKGCHK% >>ADXLXAAN::C:\ADX_UMNT\ADXILI0F.%PNAME%
    rem TINFO
    ECHO -NCE COPY C:\ADX_SDT1\ADXNSCEF.DAT C:\ADXNSCEF.%PNAME%>>ADXLXAAN::C:\ADX_UMNT\ADXILI0F.%PNAME%
    ECHO -NCE COPY C:\ADX_SDT1\ADXNSCFF.DAT C:\ADXNSCF1.%PNAME%>>ADXLXAAN::C:\ADX_UMNT\ADXILI0F.%PNAME%
    ECHO -NCF COPY ADXLXAAN::C:\ADX_SDT1\ADXNSCFF.DAT ADXLXAAN::C:\ADXNSCFF.%PNAME%>>ADXLXAAN::C:\ADX_UMNT\ADXILI0F.%PNAME%
  }
}
IF %BACKRUN%==NO {
  IF %RUNASM%==YES {
    IF %ASMTEST%==YES {
      ECHO >C:\ADX_UMNT\TEST%PNAME%.DAT
    }
  }
}
:
C:
CD \
DEFINE CE:=ADXLXAAN::C:\
DEFINE CF:=ADXLXABN::C:\
DEFINE CUPGM:=ADXLXAAN::C:\ADX_UPGM\
DEFINE CUBUL:=ADXLXAAN::C:\ADX_UBUL\
DEFINE CUMNT:=ADXLXAAN::C:\ADX_UMNT\
DEFINE CUDT1:=ADXLXACN::C:\ADX_UDT1\
DEFINE CSBUL:=ADXLXAAN::C:\ADX_SBUL\
DEFINE CSPGM:=ADXLXAAN::C:\ADX_SPGM\
DEFINE CSMNT:=ADXLXAAN::C:\ADX_SMNT\
DEFINE CIBUL:=ADXLXAAN::C:\ADX_IBUL\
DEFINE CIPGM:=ADXLXAAN::C:\ADX_IPGM\
DEFINE CIMNT:=ADXLXAAN::C:\ADX_IMNT\
DEFINE CSDT1:=ADXLXAAN::C:\ADX_SDT1\
DEFINE CSDT1CF:=ADXLXACN::C:\ADX_SDT1\
DEFINE CIDT1:=ADXLXAAN::C:\ADX_IDT1\
DEFINE CIDT1CF:=ADXLXACN::C:\ADX_IDT1\
DEFINE DUDT1:=ADXLXACN::D:\ADX_UDT1\
DEFINE DUDT1CE:=ADXLXAAN::D:\ADX_UDT1\
DEFINE DPHRM:=ADXLXACN::D:\PHRMDATA\
DEFINE DPHRMCE:=ADXLXAAN::D:\PHRMDATA\
DEFINE PHRMTRN:=ADXLXAAN::D:\PHARMTRN\
DEFINE ROOTMNT:=ADXLXAAN::C:\ROOTMNT\
DEFINE CRCFAIL=ADXLXAAN::C:\%PNAME%FAIL.CRC
DEFINE OUTLOG=ADXLXAAN::C:\%PNAME%OUT
DEFINE ERRLOG=ADXLXAAN::C:\%PNAME%ERR
DEFINE FAILLOG=ADXLXAAN::C:\%PNAME%FAIL
DEFINE OKFILE=ADXLXAAN::C:\%PNAME%.OK
DEFINE PKGKILL=ADXLXAAN::C:\%PNAME%KILL

:
: ***************************************
: Prepare for restart
: ***************************************
IF NOT EXIST ADXLXAAN::C:\ADX_UPGM\CHKSTAT.286 {
   ECHO CHKSTAT.286 IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
IF EXIST ADX_UMNT:THISNODE.BAT {
  FSET ADX_UMNT:THISNODE.BAT -R=OFF
}
IF EXIST ADX_UMNT:ADXILI0F.%PNAME% {
  FSET ADX_UMNT:ADXILI0F.%PNAME% -R=OFF
}
IF EXIST OUTLOG {
  IF NOT EXIST C:\%PNAME%OUT.1ST {
    REN OUTLOG C:\%PNAME%OUT.1ST
  }
}
IF EXIST ADX_UMNT:PKGCHECK.BAT DEL ADX_UMNT:PKGCHECK.BAT
IF EXIST C:\ROOTMNT\PKGCHECK.BAT DEL C:\ROOTMNT\PKGCHECK.BAT
IF EXIST ADX_UBUL:*.* {
  FSET ADX_UBUL:*.* -R=OFF
}
IF EXIST C:\CONTILL.* DEL C:\CONTTILL.*
FSET ADX_UMNT:*.%PNAME% -R=OFF
CUPGM:CHKSTAT >> OUTLOG
IF ERRORLEVEL 5 GOTO STATERR
IF ERRORLEVEL 4 GOTO STATSPACE
IF ERRORLEVEL 3 GOTO STATNODE
IF ERRORLEVEL 2 GOTO NOTMASTER
IF NOT EXIST ADXLXAAN::C:\CHKSTAT.OK GOTO STATERR
:
BATCH C:\ADX_UMNT\THISNODE.BAT
:
IF NOT %THISNODE%==CE {
  IF EXIST C:\CHKSTAT.TWN GOTO NODEERR
}
:
IF NOT EXIST ADXLXAAN::C:\MC55RF MD ADXLXAAN::C:\MC55RF
IF NOT EXIST ADXLXAAN::C:\MC55BH MD ADXLXAAN::C:\MC55BH
IF NOT EXIST ADXLXAAN::C:\ROOTMNT MD ADXLXAAN::C:\ROOTMNT
IF NOT EXIST ADXLXAAN::C:\ROOTMNT\MC55BH MD ADXLXAAN::C:\ROOTMNT\MC55BH
IF NOT EXIST ADXLXAAN::C:\ROOTMNT\MC55RF MD ADXLXAAN::C:\ROOTMNT\MC55RF
IF NOT EXIST ADXLXAAN::C:\ROOTMNT\MC70 MD ADXLXAAN::C:\ROOTMNT\MC70
IF NOT EXIST ADXLXAAN::C:\ROOTMNT\DHCP MD ADXLXAAN::C:\ROOTMNT\DHCP
IF NOT EXIST C:\CHKSTAT.TWN GOTO SKIPDIR
IF EXIST C:\CHKSTAT.TWN {
  IF NOT EXIST ADXLXCFN::C:\ROOTMNT MD ADXLXCFN::C:\ROOTMNT
  IF NOT EXIST ADXLXCFN::C:\MC55RF MD ADXLXCFN::C:\MC55RF
  IF NOT EXIST ADXLXCFN::C:\MC55BH MD ADXLXCFN::C:\MC55BH
}
:SKIPDIR
IF EXIST ADXLXAAN::C:\ASMFAIL.%PNAME% ERASE ADXLXAAN::C:\ASMFAIL.%PNAME%
IF EXIST ERRLOG ERASE ERRLOG
IF EXIST FAILLOG ERASE FAILLOG
IF EXIST NODEOK ERASE NODEOK
IF NOT %BACKRUN%==YES {
  rem
}
ELSE {
  DEFINE OUTLOG=ADXLXAAN::C:\%PNAME%BKOUT
  DEFINE ERRLOG=ADXLXAAN::C:\%PNAME%BKERR
  DEFINE FAILLOG=ADXLXAAN::C:\%PNAME%BKFL
}
:
ECHO CHECKING FOR ESSENTIAL UTILITIES >>OUTLOG
IF NOT EXIST ADXLXAAN::C:\ADX_UPGM\WAIT.286 {
   ECHO WAIT.286 IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF NOT EXIST ADXLXAAN::C:\ADX_UPGM\CHKSIZE.286 {
   ECHO CHKSIZE.286 IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF NOT EXIST ADXLXAAN::C:\ADX_SPGM\CRC32.286 {
   ECHO CRC32.286 IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF NOT EXIST ADXLXAAN::C:\ADX_UPGM\PKGJOBS.286 {
   ECHO C:\ADX_UPGM\PKGJOBS.286 IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF %PJOBS%.==YES. {
   IF NOT EXIST ADXLXAAN::C:\ADX_UMNT\PKGJOBS.%PNAME% {
      ECHO C:\ADX_UMNT\PKGJOBS.%PNAME% IS NOT FOUND >>OUTLOG
      GOTO MISSING
   }
}
:
IF NOT EXIST ADXLXACN::D:\ADX_UDT1\BGIPL.PKG {
   ECHO D:\ADX_UDT1\BGIPL.PKG IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF NOT EXIST ADXLXACN::D:\ADX_UDT1\BGIPL.CHK {
   ECHO D:\ADX_UDT1\BGIPL.CHK IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF NOT EXIST ADXLXAAN::C:\ADX_UPGM\TINFOUTL.286 {
   ECHO C:\ADX_UPGM\TINFOUTL.286 IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF NOT EXIST ADXLXAAN::C:\ADX_UPGM\PKGCHECK.286 {
   ECHO C:\ADX_UPGM\PKGCHECK.286 IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF NOT EXIST ADXLXAAN::C:\ADX_UPGM\PKGCHECK.BAT {
   ECHO C:\ADX_UPGM\PKGCHECK.BAT IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF NOT EXIST ADXLXAAN::C:\ADX_UPGM\CHKCLOSE.286 {
   ECHO C:\ADX_UPGM\CHKCLOSE.286 IS NOT FOUND >>OUTLOG
   GOTO MISSING
}
:
IF %BACKRUN%==YES {
  IF %RUNASM%==YES {
    IF NOT EXIST ADXLXAAN::C:\ADX_UBUL\CHKASM.%PNAME% {
      ECHO ADXLXAAN::C:\ADX_UBUL\CHKASM.%PNAME% IS MISSING >>OUTLOG
      ECHO ADXLXAAN::C:\ADX_UBUL\CHKASM.%PNAME% IS MISSING >>ERRLOG
      GOTO FAIL
    }
  }
}
:
IF NOT %PCHECK%.==NOCHECK. {
  IF NOT EXIST ADXLXACN::D:\ADX_UDT1\PKGVER.BIN {
    ECHO ADXLXACN::D:\ADX_UDT1\PKGVER.BIN IS MISSING >>OUTLOG
    GOTO NOPKGVER
  }
  :
  CUPGM:CHKVER %PCHECK%
  IF ERRORLEVEL 3 GOTO FILEEMP
  IF ERRORLEVEL 2 GOTO MISMATCH
  IF ERRORLEVEL 1 GOTO FAILURE
  ECHO PREVIOUS PACKAGE VERSION IS CORRECT >> OUTLOG
}
:
IF NOT %BACKRUN%==YES {
  IF %ACEPTASM%==YES {
    REM Accept standard PCF's if they are still in test.
    IF EXIST ADXLXAAN::C:\ADX_UBUL\ADXCSTAD.DAT {
      ECHO PCF FOUND IN ADXLXAAN::C:\ADX_UBUL\ >>OUTLOG
      ECHO Accepting ASM 3A >>OUTLOG
      ADXCST0L BACKGRND N BY 3A
    }
    IF EXIST ADXLXAAN::C:\ADX_IBUL\ADXCSTBD.DAT {
      ECHO PCF FOUND IN ADXLXAAN::C:\ADX_IBUL\ >>OUTLOG
      ECHO Accepting ASM 3B >>OUTLOG
      ADXCST0L BACKGRND N BY 3B
    }
    IF EXIST ADXLXAAN::C:\ADX_SBUL\ADXCSTCD.DAT {
      ECHO PCF FOUND IN ADXLXAAN::C:\ADX_SBUL\ >>OUTLOG
      ECHO Accepting ASM 3C >>OUTLOG
      ADXCST0L BACKGRND N BY 3C
    }
    IF EXIST ADXLXAAN::C:\ADX_IBUL\ADXCBTAD.DAT {
      ECHO DIF PCF FOUND IN ADXLXAAN::C:\ADX_IBUL\ >>OUTLOG
      ECHO Accepting ASM 3BA >>OUTLOG
      ADXCST0L BACKGRND N BY 3BA
    }
    :
    DEFINE GOTASM=N
    IF EXIST ADXLXAAN::C:\ADX_UBUL\ADXCSTAD.DAT {
      ECHO PCF FOUND IN ADXLXAAN::C:\ADX_UBUL\ >>OUTLOG
      DEFINE GOTASM=Y
    }
    IF EXIST ADXLXAAN::C:\ADX_IBUL\ADXCSTBD.DAT {
      ECHO PCF FOUND IN ADXLXAAN::C:\ADX_IBUL\ >>OUTLOG
      DEFINE GOTASM=Y
    }
    IF EXIST ADXLXAAN::C:\ADX_SBUL\ADXCSTCD.DAT {
      ECHO PCF FOUND IN ADXLXAAN::C:\ADX_SBUL\ >>OUTLOG
      DEFINE GOTASM=Y
    }
    IF EXIST ADXLXAAN::C:\ADX_IBUL\ADXCBTAD.DAT {
      ECHO DIF PCF FOUND IN ADXLXAAN::C:\ADX_IBUL\ >>OUTLOG
      DEFINE GOTASM=Y
    }
    IF %GOTASM%.==Y. {
      IF %RUNASM%==YES {
        ECHO OTHER RELEASE IS STILL IN BACKUP >>OUTLOG
        TYPE CSHSF >>OUTLOG
        GOTO FAIL
      }
    }
    ECHO Clearing C:\ADX_UBUL >>OUTLOG
    IF EXIST C:\ADX_UBUL\*.* ECHO Y|ERASE C:\ADX_UBUL\*.*      
  }
}
:
IF EXIST OKFILE ERASE OKFILE
IF EXIST ADXLXAAN::C:\%PNAME%BK.OK ERASE ADXLXAAN::C:\%PNAME%BK.OK
IF EXIST NODEOK ERASE NODEOK
IF EXIST NODEBKOK ERASE NODEBKOK
IF EXIST ADXLXAAN::C:\%PNAME%BK%PARTNODE%.OK ERASE ADXLXAAN::C:\%PNAME%BK%PARTNODE%.OK
IF EXIST ADXLXAAN::C:\%PNAME%%PARTNODE%.OK ERASE ADXLXAAN::C:\%PNAME%%PARTNODE%.OK
:
IF %BACKRUN%==YES {
  DEFINE OKFILE=ADXLXAAN::C:\%PNAME%BK.OK
}
IF %BACKRUN%==YES {
  DEFINE OKFILE=ADXLXAAN::C:\%PNAME%BK.OK
}
ELSE {
  IF EXIST OUTLOG ERASE OUTLOG
}
IF EXIST ERRLOG ERASE ERRLOG
IF EXIST FAILLOG ERASE FAILLOG
:
ECHO %PNAME% Started with options %1 %2 %3 %4 %5 >>OUTLOG
IF %BACKRUN%==YES {
  ECHO Store %STORENUM% %THISNODE% %PNAME% Backout run requested (T)>>OUTLOG
}
ELSE {
  ECHO Store %STORENUM% %THISNODE% %PNAME% Install run requested (T)>>OUTLOG
}
ADX_UPGM:DT.286 >> OUTLOG
:
IF EXIST PKGKILL GOTO ABORT

IF %1. == NOCRC. GOTO SKIPCRC
IF %2. == NOCRC. GOTO SKIPCRC
IF %3. == NOCRC. GOTO SKIPCRC
IF %4. == NOCRC. GOTO SKIPCRC
:
IF %CHECKCRC%.==YES. {
  IF NOT EXIST ADXLXAAN::C:\ADX_UMNT\%PNAME%_CRC.BAT {
    ECHO C:\ADX_UMNT\%PNAME%_CRC.BAT IS NOT FOUND >>OUTLOG
    GOTO MISSING
  }
  ECHO VERIFYING CRC INTEGRITY OF TRANSMITTED ZIP FILES (T)>>OUTLOG
  CUPGM:DT.286 >>OUTLOG
  :
  BATCH C:\ADX_UMNT\%PNAME%_CRC.BAT OUTLOG
  IF EXIST C:\CHKCRC.ERR {
    ECHO C:\CHKCRC.ERR FOUND >> OUTLOG
    GOTO CRCFAIL
  }
  IF EXIST C:\CHKCRC.MIS {
    ECHO CRC CHECK FOUND FILES MISSING >> OUTLOG
    GOTO MISSING
  }
  :
  IF EXIST ADXLXAAN::C:\ADX_UMNT\%PNAME%SCOCR.BAT {
    ECHO VERIFYING CRC INTEGRITY OF SCO PACKAGE FILES (T)>>OUTLOG
    CUPGM:DT.286 >>OUTLOG
    :
    BATCH C:\ADX_UMNT\%PNAME%SCOCR.BAT OUTLOG
    IF EXIST C:\CHKCRC.ERR {
      ECHO C:\CHKCRC.ERR FOUND >> OUTLOG
      GOTO CRCFAIL
    }
    IF EXIST C:\CHKCRC.MIS {
      ECHO CRC CHECK FOUND FILES MISSING >> OUTLOG
      GOTO MISSING
    }
  }
  :
  ECHO TRANSMITTED ZIP FILES HAVE PASSED THE CRC32 INTEGRITY CHECK > C:\%PNAME%_CRC.OK
  ECHO TRANSMITTED ZIP FILES HAVE PASSED THE CRC32 INTEGRITY CHECK (T)>> OUTLOG
  CUPGM:DT.286 >>OUTLOG
}
:
:SKIPCRC
:
IF EXIST PKGKILL GOTO ABORT

IF %1. == NOCLOSE. GOTO SKIPCLOS
IF %2. == NOCLOSE. GOTO SKIPCLOS
IF %3. == NOCLOSE. GOTO SKIPCLOS
IF %4. == NOCLOSE. GOTO SKIPCLOS
:
IF %CIPL%.==YES. {
  IF %RUNASM%==YES {
    ECHO ********************************************************** > ADXLXAAN::C:\PACKAGE.PRN
    ECHO ********************************************************** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****     MESSAGE FROM THE BOOTS IT SERVICE DESK     ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****        IMPORTANT INFORMATION REQUIRING         ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****               IMMEDIATE ACTION                 ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****      TONIGHT THE %PNAME% EPOS UPGRADE WILL BE      ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****           ATTEMPTED IN YOUR STORE              ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****   TO ENSURE THE UPGRADE IS SUCCESSFUL PLEASE   ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****     ENSURE THAT YOU PERFORM STORE CLOSE AT     ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****          THE END OF THE TRADING DAY,           ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****          UNLESS YOU TRADE PAST 00.30           ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****      PLEASE REFER TO THE %PNAME% EPOS UPGRADE      ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****  GUIDANCE YOU RECEIVED IN A RECENT MYSTORENET  ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****    MESSAGE FOR CONTENT DETAILS AS YOU MAY BE   ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****    REQUIRED TO COMPLETE CERTAIN TASKS PRIOR    ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****            TO BEING ABLE TO TRADE              ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****        TO ENSURE THAT THE MORNING TEAM         ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****         ARE AWARE OF THIS EPOS UPGRADE         ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****   TAKE THE SHEET AND AFFIX TO THE CONTROLLER   ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****     ENSURE A MEMBER OF STAFF IS IN STORE       ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****   AT LEAST 60 MINUTES PRIOR TO THE START OF    ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****    TRADING TO MAKE SURE THE CONTROLLER AND     ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****       TILL(S) HAVE RELOADED SUCCESSFULLY       ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****   IF YOU EXPERIENCE ANY PROBLEMS AS A RESULT   ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****    OF THIS UPGRADE PLEASE CONTACT THE BOOTS    ***** >> ADXLXAAN::C:\PACKAGE.PRN
    IF EXIST ADXLXAAN::C:\EIRE.YES {
      ECHO *****       IT SERVICE DESK ON +44 115 9181234       ***** >> ADXLXAAN::C:\PACKAGE.PRN
    }
    ELSE {
      ECHO *****        IT SERVICE DESK ON 0115 9182000         ***** >> ADXLXAAN::C:\PACKAGE.PRN
    }
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO ********************************************************** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO ********************************************************** >> ADXLXAAN::C:\PACKAGE.PRN
  }
  ELSE {
    ECHO ********************************************************** > ADXLXAAN::C:\PACKAGE.PRN
    ECHO ********************************************************** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****     MESSAGE FROM THE BOOTS IT SERVICE DESK     ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****    TONIGHT SOME ESSENTIAL FILE MAINTENANCE     ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****        WILL BE CARRIED OUT ON YOUR STORE       ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                 CONTROLLER                     ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****   TO ENSURE THE UPGRADE IS SUCCESSFUL PLEASE   ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****     ENSURE THAT YOU PERFORM STORE CLOSE AT     ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****          THE END OF THE TRADING DAY,           ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****          UNLESS YOU TRADE PAST 00.30           ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****     ENSURE A MEMBER OF STAFF IS IN STORE       ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****   AT LEAST 60 MINUTES PRIOR TO THE START OF    ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****    TRADING TO MAKE SURE THE CONTROLLER AND     ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****       TILL(S) HAVE RELOADED SUCCESSFULLY       ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****       PLEASE NOTE THAT ALL PPCs AND PODs       ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****    WILL REQUIRE RELOADING ONCE THIS UPGRADE    ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****      HAS BEEN APPLIED SUCCESSFULLY.            ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****    IF YOU EXPERIENCE ANY PROBLEMS PRIOR TO     ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO *****     OR AFTER THE UPGRADE THEN PLEASE CALL      ***** >> ADXLXAAN::C:\PACKAGE.PRN
    IF EXIST ADXLXAAN::C:\EIRE.YES {
      ECHO *****  THE BOOTS IT SERVICE DESK ON +44 115 9181234  ***** >> ADXLXAAN::C:\PACKAGE.PRN
    }
    ELSE {
      ECHO *****   THE BOOTS IT SERVICE DESK ON 0115 9182000    ***** >> ADXLXAAN::C:\PACKAGE.PRN
    }
    ECHO *****                                                ***** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO ********************************************************** >> ADXLXAAN::C:\PACKAGE.PRN
    ECHO ********************************************************** >> ADXLXAAN::C:\PACKAGE.PRN
  }
  ECHO  >> ADXLXAAN::C:\PACKAGE.PRN
  PRINT ADXLXAAN::C:\PACKAGE.PRN -D=ADXLXACN::PRN1
}
:
rem -------------------------------------------------------------------------------------------------------------------
IF NOT %RUNTIME%==999999 {
  IF EXIST ADXLXAAN::C:\A11.TSG DEL ADXLXAAN::C:\A11.TSG
  ECHO Waiting until %RUNTIME% >>OUTLOG

  :RUNWAIT
  IF EXIST PKGKILL GOTO ABORT

  CUPGM:CHKTIME.286 %RUNTIME%
  CUPGM:CHKSIZE ADXLXAAN::C:\A11.TSG = 0
  IF ERRORLEVEL 1 GOTO RUNGO
  CUPGM:WAIT 60
  CUPGM:DT.286 >>OUTLOG
  
  GOTO RUNWAIT  
  :RUNGO
}
rem -------------------------------------------------------------------------------------------------------------------

IF %CLOSE%.==YES. {
rem ----------------------------------------------------------------------------------------------------
  DEFINE SLEPT=NO
  ECHO CHECKING FOR STORE CLOSE >> OUTLOG
  :
  IF EXIST ADXLXAAN::C:\A11.TSG DEL ADXLXAAN::C:\A11.TSG
  :
  ECHO CHECKING IF TIME IS BEFORE 23:00 >> OUTLOG
  :
  :LOOPTRAN
rem ----------------------------------------------------------------------------------------------------  
  IF EXIST PKGKILL GOTO ABORT
  
  IF %SLEPT%==NO {
    CUPGM:CHKTIME.286 %SLEPTIME%
    CUPGM:CHKSIZE ADXLXAAN::C:\A11.TSG = 0
    IF ERRORLEVEL 1 GOTO SLEEP1
    CUPGM:WAIT 60
    GOTO ECHECK1
  
    :SLEEP1
    IF %WAKETIME%==999999 {
      GOTO AFTER11
    }  
  
    ECHO Waiting for midnight >>OUTLOG
    rem wait for 23:59/midnight
    :SLEPMORE
    IF EXIST PKGKILL GOTO ABORT
    CUPGM:CHKTIME.286 235900
    CUPGM:CHKSIZE ADXLXAAN::C:\A11.TSG = 0
    IF ERRORLEVEL 1 GOTO SLEEP3
    ADX_UPGM:DT.286 >>OUTLOG
    CUPGM:WAIT 30
    GOTO SLEPMORE
  
    :SLEEP3
    rem Make sure we have passed midnight
    CUPGM:WAIT 120
  
    rem go to sleep
    DEFINE SLEPT=SLEEP
    ADX_UPGM:DT.286 >>OUTLOG
    :ECHECK1
  }

  IF %SLEPT%==SLEEP {
    rem wait for wake time
    ECHO Sleeping until %waketime% >> OUTLOG
  
    :SLEEPING
    IF EXIST PKGKILL GOTO ABORT

    CUPGM:CHKTIME.286 %WAKETIME%
    CUPGM:CHKSIZE ADXLXAAN::C:\A11.TSG = 0
    IF ERRORLEVEL 1 GOTO SLEEP2
    ADX_UPGM:DT.286 >>OUTLOG
    CUPGM:WAIT 60
    GOTO SLEEPING
    
    :SLEEP2
    rem wakey wakey
    ECHO WAKING UP >>OUTLOG
    ADX_UPGM:DT.286 >>OUTLOG
    DEFINE SLEPT=YES  
  }

  IF %SLEPT%==YES {
    rem wait for end time  
    CUPGM:CHKTIME.286 %endtime%
    CUPGM:CHKSIZE ADXLXAAN::C:\A11.TSG = 0
    IF ERRORLEVEL 1 GOTO TIMESUP
    CUPGM:WAIT 60
    ADX_UPGM:DT.286 >>OUTLOG 
  }

  CUPGM:CHKCLOSE KYLIE>>OUTLOG
  IF ERRORLEVEL 20 GOTO CHKCLS20
  IF ERRORLEVEL 11 GOTO CHKCLS11
  IF ERRORLEVEL 10 GOTO CHKCLS10
  IF ERRORLEVEL 5 GOTO CHKCLS5
  IF ERRORLEVEL 2 GOTO CHKCLS2
  IF ERRORLEVEL 1 GOTO CHKCLS1
  
  :CHKCLS2
    rem Store not closed
    ECHO Waiting for Store Close >>OUTLOG
    ADX_UPGM:DT.286 >>OUTLOG
    goto LOOPTRAN
  :CHKCLS20
    rem CHKCLOSE failed
    ECHO CHKCLOSED failed. See C:\CHKCLOSE.ERR >>OUTLOG
    GOTO Fail
  :CHKCLS11
    rem SSCLS not found
    ECHO CHKCLOSED reports SSCLS not found >>OUTLOG
    GOTO FAIL
  :CHKCLS10
    rem Unable to access SSCLS
    ECHO Unable to access SSCLS >>OUTLOG
    ADX_UPGM:DT.286 >>OUTLOG
    GOTO LOOPTRAN
  :CHKCLS5
    rem Unknown status on SSCLS  
    ECHO Unknown status on SSCLS >>OUTLOG
    ADX_UPGM:DT.286 >>OUTLOG
    GOTO LOOPTRAN	
  :CHKCLS1
    rem Store Closed

  ECHO THE STORE IS CLOSED >> OUTLOG
  CUPGM:DT.286 >> OUTLOG

  Rem Give PSB30 a chance to get going
  CUPGM:WAIT 120
  
  ADX_UPGM:PKGTIMER -T1 -RSTART -M43 >>OUTLOG
  ADX_UPGM:PKGTIMER -T2 -RSTART -M118 >>OUTLOG
  
  :IMFLOOP
  IF EXIST PKGKILL GOTO ABORT
  DEFINE IMFSTAT=x
  ADX_UPGM:IMFSTAT
  IF ERRORLEVEL 12 GOTO IMFE12
  IF ERRORLEVEL 11 GOTO IMFE11
  IF ERRORLEVEL 10 GOTO IMFE10
  IF ERRORLEVEL 9 GOTO IMFE9
  IF ERRORLEVEL 2 GOTO IMFE2
  IF ERRORLEVEL 1 GOTO IMFE1
  
  :IMFE12
    ECHO Error running IMFSTAT >>OUTLOG
    DEFINE IMFSTAT=ERROR
    GOTO CHKTIMER
  :IMFE11
    ECHO IMFSTAT could not access IMFOK. >>OUTLOG
    DEFINE IMFSTAT=FILE
    GOTO CHKTIMER
  :IMFE10
    ECHO IMFSTAT could not access IMFOK due other program using it. >>OUTLOG
    ADX_UPGM:WAIT 60
  
      ADX_UPGM:PKGTIMER -T2 -RSTATUS
      IF ERRORLEVEL 4 GOTO TIMERERR
      IF ERRORLEVEL 2 GOTO TIMER2A
      IF ERRORLEVEL 1 GOTO TIMER1A
     :TIMERERR
      ECHO PKGTIMER unknown ERRORLEVEL >>OUTLOG
      GOTO FAIL
  
    :TIMER2A
      GOTO IMFLOOP
    :TIMER1A
      ECHO Unable to access the IMFOK due access conflicts >>OUTLOG
      ECHO for two hours. Aborting package.>>OUTLOG
      TYPE IMFOK >>OUTLOG
      ADX_UPGM:DT >>OUTLOG

      ECHO Unable to access the IMFOK due access conflicts >>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      ECHO for two hours. Aborting package.>>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      TYPE IMFOK >>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      ADX_UPGM:DT >>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      GOTO FAIL

  :IMFE9
    ECHO IMFOK is not complete, process is not running. >>OUTLOG
    TYPE IMFOK >>OUTLOG
    DEFINE IMFSTAT=INCOMPLETE
    GOTO CHKTIMER
  :IMFE2
    ECHO IMFOK is complete but date is not correct. >>OUTLOG
    TYPE IMFOK>>OUTLOG
    DEFINE IMFSTAT=DATE
    GOTO CHKTIMER
  :IMFE1
    ECHO IMFOK is complete. >>OUTLOG
    TYPE IMFOK >>OUTLOG
    ADX_UPGM:DT >>OUTLOG
    GOTO IMFOKOK
   
  :CHKTIMER
  ADX_UPGM:WAIT 60
  ADX_UPGM:PKGTIMER -T1 -RSTATUS
  IF ERRORLEVEL 4 GOTO TIMERERR
  IF ERRORLEVEL 2 GOTO TIMER2
  IF ERRORLEVEL 1 GOTO TIMER1
    ECHO PKGTIMER unknown ERRORLEVEL >>OUTLOG
    GOTO FAIL
  
  :TIMER2
    ECHO Waiting ... >>OUTLOG
    ADX_UPGM:DT >>OUTLOG
    GOTO IMFLOOP
  :TIMER1
    ECHO 45 minute wait complete >>OUTLOG
    ADX_UPGM:DT >>OUTLOG
    IF %IMFSTAT%==DATE {
      ECHO IMFOK is complete except for date OK to Proceed >>OUTLOG
      TYPE IMFOK >>OUTLOG
    }
    IF %IMFSTAT%==INCOMPLETE {
      ECHO IMFOK is NOT complete and is not being processed. OK to Proceed >>OUTLOG
      TYPE IMFOK >>OUTLOG
      rem ECHO IMFOK is NOT complete. NOT OK to Proceed >>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      rem TYPE IMFOK >>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      rem GOTO FAIL
    }
    IF %IMFSTAT%==FILE {
      ECHO Unable to access the IMFOK. NOT OK to Proceed >>OUTLOG
      TYPE IMFOK >>OUTLOG
      ECHO Unable to access the IMFOK. NOT OK to Proceed >>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      TYPE IMFOK >>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      GOTO FAIL
    }
    IF %IMFSTAT%==ERROR {
      ECHO IMFSTAT failing. Unable to check IMOK status >>OUTLOG
      TYPE IMFOK >>OUTLOG
      ECHO IMFSTAT failing. Unable to check IMOK status >>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      TYPE IMFOK >>ADXLXAAN::C:\%PNAME%IMFOK.ERR
      GOTO FAIL
    }
  :IMFOKOK  
}
:SKIPCLOS
:
IF %1. == NOUNZIP. GOTO SKIPZIP
IF %2. == NOUNZIP. GOTO SKIPZIP
IF %3. == NOUNZIP. GOTO SKIPZIP
IF %4. == NOUNZIP. GOTO SKIPZIP
:
IF %BACKRUN%==NO {
  IF %RUNASM%==YES {
    IF EXIST C:\ADX_UMNT\ADXC?T?D.DAT ERASE C:\ADX_UMNT\ADXC?T?D.DAT
    IF EXIST C:\ADX_IMNT\ADXC?T?D.DAT ERASE C:\ADX_IMNT\ADXC?T?D.DAT
    IF EXIST C:\ADX_SMNT\ADXC?T?D.DAT ERASE C:\ADX_SMNT\ADXC?T?D.DAT
  }
}
:
IF EXIST PKGKILL GOTO ABORT
IF %DOUNZIP%==YES {
  ECHO DECOMPRESSING FILES (T)>> OUTLOG
  CUPGM:DT.286 >>OUTLOG
  CD /ADX_UMNT
  :
  ECHO Unzip %PNAME%_UMNT >>OUTLOG
  ADXNSZZL -xo -N C:\ADX_UMNT\%PNAME%_UMNT.ZIP -d ADXLXAAN::C:\ADX_UMNT\ >>OUTLOG  
  IF ERRORLEVEL 1 GOTO NOUNZIP
  :
  ECHO Unzip %PNAME%_IMNT >>OUTLOG
  ADXNSZZL -xo -N C:\ADX_UMNT\%PNAME%_IMNT.ZIP -d ADXLXAAN::C:\ADX_IMNT\ >>OUTLOG  
  IF ERRORLEVEL 1 GOTO NOUNZIP
  :
  ECHO Unzip %PNAME%_SMNT >>OUTLOG
  ADXNSZZL -xo -N C:\ADX_UMNT\%PNAME%_SMNT.ZIP -d ADXLXAAN::C:\ADX_SMNT\ >>OUTLOG  
  IF ERRORLEVEL 1 GOTO NOUNZIP
  :
  ECHO Unzip %PNAME%_ROOT >>OUTLOG
  ADXNSZZL -xo -N C:\ADX_UMNT\%PNAME%_ROOT.ZIP -d ADXLXAAN::C:\ROOTMNT\ >>OUTLOG  
  IF ERRORLEVEL 1 GOTO NOUNZIP
  :
  ECHO DECOMPRESSING COMPLETE (T)>> OUTLOG
  CUPGM:DT.286 >>OUTLOG
  :
  IF EXIST ADXLXAAN::C:\ADX_UMNT\%PNAME%SCOCR.BAT {
    ECHO SCO PACKAGE EXISTS. PERFORMING SCO PACKAGE DECOMPRESS (T)>>OUTLOG
    CUPGM:DT.286 >>OUTLOG
    :
    IF EXIST ADXLXAAN::C:\ADX_UMNT\%PNAME%V5SCO.ZIP {
      ECHO Unzip %PNAME%V5SCO.ZIP >>OUTLOG
      ADXNSZZL -xo -N C:\ADX_UMNT\%PNAME%V5SCO.ZIP -d ADXLXAAN::C:\ADX_UMNT\ >>OUTLOG        
      IF ERRORLEVEL 1 GOTO NOUNZIP
    }
    :
    IF EXIST ADXLXAAN::C:\ADX_UMNT\%PNAME%_RSCO.ZIP {
      ECHO Unzip %PNAME%_RSCO.ZIP >>OUTLOG
      ADXNSZZL -xo -N C:\ADX_UMNT\%PNAME%_RSCO.ZIP -d ADXLXAAN::C:\ADX_UMNT\ >>OUTLOG        
      IF ERRORLEVEL 1 GOTO NOUNZIP
    }
    ECHO SCO DECOMPRESSING COMPLETE (T)>> OUTLOG
    CUPGM:DT.286 >>OUTLOG
  }
}
CD \
:SKIPZIP
IF EXIST PKGKILL GOTO ABORT
rem TINFO
IF NOT %BACKRUN%==YES {
  ECHO BACKING UP TILLINFO.BIN >> OUTLOG
  COPY D:\ADX_UDT1\TILLINFO.BIN C:\ADX_UBUL\TILLINFO.%PNAME% >>*OUTLOG >> OUTLOG
}

IF %TRSTFLGS%==Y {
  ECHO Setting till info package flags >>OUTLOG
  ADX_UPGM:TINFOUTL -RI
}
rem TINFO
:
IF %RUNASM%==YES {
  Rem **************************************************
  Rem Set up the check for the PCF's being used
  Rem **************************************************
  ECHO Running CHKASM >> OUTLOG
  IF %BACKRUN%==YES {
    ADX_UPGM:CHKASM.286 -3 %ASMCHK% -$%PNAME% >> OUTLOG
  }
  ELSE {
    ADX_UPGM:CHKASM.286 -1 %ASMCHK% -$%PNAME% >> OUTLOG
  }
  IF ERRORLEVEL 50 GOTO CASMU
  IF ERRORLEVEL 40 GOTO CASMPKG
  IF ERRORLEVEL 20 GOTO CASMBBAD
  IF ERRORLEVEL 10 GOTO CASMPCF
  IF ERRORLEVEL 1 GOTO CASMU
}
:
IF %BACKRUN%==YES GOTO BACKOUT
:
: *****************************************
: *** DOING LAN CHECKS FOR DISTRIBUTION ***
: *****************************************
IF %RUNASM%==YES {
  ECHO CHECK IF SINGLE/TWIN >> OUTLOG
  :
  IF NOT EXIST ADXLXAAN::C:\CHKSTAT.TWN GOTO NODIST
  :
  :DISTIT
  ECHO Distributing Files (T)>> OUTLOG
  CUPGM:DT.286 >>OUTLOG
  Rem Make files read only to prevent them getting distributed
  Rem They either need to be local or are different on both controllers
  FSET C:\ADX_UMNT\THISNODE.BAT -R=ON
  FSET C:\ADX_UMNT\ADXILI0F.%PNAME% -R=ON
  FSET C:\ADX_UMNT\%PNAME%*.* -R=ON
  FSET C:\ADX_UMNT\V5*.ZIP* -R=ON
  
  ECHO DISTRIBUTING MAINTENANCE DIRECTORIES >>OUTLOG
  ADXCSU0L 3 5 ADXLXAAN::C:\ADX_UMNT\
  ADXCSU0L 3 5 ADXLXAAN::C:\ADX_IMNT\
  ADXCSU0L 3 5 ADXLXAAN::C:\ADX_SMNT\
  ECHO DISTRIBUTION COMPLETE >>OUTLOG

  FSET C:\ADX_UMNT\THISNODE.BAT -R=OFF
  FSET C:\ADX_UMNT\ADXILI0F.%PNAME% -R=OFF
  FSET C:\ADX_UMNT\%PNAME%*.* -R=OFF
  FSET C:\ADX_UMNT\V5*.ZIP* -R=OFF
  ECHO Distribution Complete (T)>> OUTLOG
  CUPGM:DT.286 >>OUTLOG
  :NODIST
}
IF EXIST PKGKILL GOTO ABORT
:
: **************************
: *** BEGIN FILE DELETES ***
: **************************
:
FOR %A IN (ADXJAVNF ADXJAVDF ADXJAVLF ADXJAVSF ADXJAVQF ADXJAVFF ADXJAVJF ADXJAVUF) DO IF EXIST CSPGM:%A.DAT DEL CSPGM:%A.DAT >>OUTLOG
FOR %A IN (ADXDLDEF ADXDLCEF ADXDLCFF ADXDFDEF ADXDFCEF ADXDFCFF ADXCSCUF) DO IF EXIST CSPGM:%A.DAT DEL CSPGM:%A.DAT >>OUTLOG
:
IF EXIST ADXLXAAN::C:\SIREMOTE.LOG DEL ADXLXAAN::C:\SIREMOTE.LOG >>OUTLOG
IF EXIST ADXLXAAN::C:\SICMPUTL.LOG DEL ADXLXAAN::C:\SICMPUTL.LOG >>OUTLOG
IF EXIST ADXLXAAN::C:\COMNINST.LOG DEL ADXLXAAN::C:\COMNINST.LOG >>OUTLOG
:
: ******************************
: ***   BEGIN FILE BACKUPS   ***
: ******************************
:
:
: *****************************
: ***   BEGIN FILE COPIES   ***
: *****************************
:
IF %PJOBS%==YES {
  ECHO Executing program Package Jobs >> OUTLOG
  ADX_UPGM:PKGJOBS -O%PNAME% -R%OUTLOG%
  IF ERRORLEVEL 50 GOTO T50
  IF ERRORLEVEL 45 GOTO T45
  IF ERRORLEVEL 40 GOTO T40
  IF ERRORLEVEL 20 GOTO T20
  IF ERRORLEVEL 10 GOTO T10
  IF ERRORLEVEL 9 GOTO T9

  GOTO CONT
  :T50
   ECHO PKGJOBS FAILED >>OUTLOG
   GOTO FIN
  :T45
   ECHO PACKAGE NAME NOT PASSED TO PKGJOBS >>OUTLOG
   GOTO FIN
  :T40
   ECHO PKGJOBS control file not found. (PKGJOBS.%PNAME%) >>OUTLOG
   GOTO FIN
  :T20
   ECHO PKGJOBS FAILED WITH INVALID XML FILE >>OUTLOG
   GOTO FIN
  :T10
   ECHO FILE OPERATION IN PKGJOBS FAILED, BACKED OUT >>OUTLOG
   GOTO FIN
  :T9
   ECHO FILE OPERATION IN PKGJOBS FAILED, BACK OUT ALSO FAILED >>OUTLOG
   GOTO FIN
  :
  :CONT
}
:
: *******************************
: ** BEGIN PROGRAM EXECUTIONS ***
: *******************************
:
Rem To backout on failure - GOTO BACKOUT
  Rem Conversion 1

  DEFINE CNVSION1=NO
:
  Rem Conversion 2


  DEFINE CNVSION2=NO
:
  Rem Conversion 3


  DEFINE CNVSION3=NO
:
  Rem Conversion 4


  DEFINE CNVSION4=NO
:
  Rem Conversion 5


  DEFINE CNVSION5=NO
:
: *************************
: ***     TILL IPL      ***
: *************************
:
IF %TIPL%.==STC. {
  ECHO Sending STC to the tills >>OUTLOG
  ADXCS20L BACKGRND N 12
}
IF %TIPL%.==TL. {
  ECHO Reloading tills >>OUTLOG
  ADXCS20L BACKGRND N 11
}
:
: *************************
: ***   CONTROLLER IPL  ***
: *************************
IF %RUNIPL%==YES {
  : **********************************
  : ***   COPY IN INTERCEPT FILE   ***
  : **********************************
  :
  IF %RUNASM%==NO {
    COPY ADXLXAAN::C:\ADX_UMNT\%PNAME%IPL.BAT ADXLXAAN::C:\ROOTMNT >*ERRLOG >> OUTLOG
  }

  ECHO BACKING UP ADXILI0F.DAT >> OUTLOG
  COPY CSDT1:ADXILI0F.DAT CSDT1:ADXILI0F.PAB >*ERRLOG >> OUTLOG
  ECHO COPYING IN NEW ADXILI0F.%PNAME% >> OUTLOG
  COPY C:\ADX_UMNT\ADXILI0F.%PNAME%+ADXLXAAN::C:\ADX_SDT1\ADXILI0F.DAT ADXLXAAN::C:\ADX_SDT1\ADXILI0F.DAT>*ERRLOG >> OUTLOG
  :
  IF EXIST ADXLXAAN::C:\CHKSTAT.TWN {
    COPY ADXLXAAN::C:\ADX_UMNT\%PNAME%IPL.BAT ADXLXABN::C:\ADX_UMNT >*ERRLOG >> OUTLOG

    ECHO BACKING UP ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
    COPY ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT ADXLXABN::C:\ADX_SDT1\ADXILI0F.PAB >>*OUTLOG >> OUTLOG
    ECHO COPYING IN NEW ADXILI0F.%PNAME% FOR CF>> OUTLOG
    COPY C:\ADX_UMNT\ADXILI0F.%PNAME%+ADXLXABN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT >>*OUTLOG >> OUTLOG
  }
}
:
IF %CIPL%.==YES. {
  IF EXIST C:\ADX_SPGM\ADXCSCVF.EMP {
    COPY C:\ADX_SPGM\ADXCSCVF.EMP C:\ADX_SPGM\ADXCSCVF.DAT
  }
  IF EXIST C:\ADX_SDT1\ADXILIPF.DAT DEL C:\ADX_SDT1\ADXILIPF.DAT
  IF EXIST ADXLXAAN::C:\CHKSTAT.TWN {
    IF EXIST ADXLXABN::C:\ADX_SDT1\ADXILIPF.DAT DEL ADXLXABN::C:\ADX_SDT1\ADXILIPF.DAT  
  }
}
:
IF %RUNASM%==YES {
  : ******************
  : ** EXECUTE ASM ***
  : ******************
  :
  ECHO START ASM >> OUTLOG
  ECHO ASM IN TEST MODE (T)>> OUTLOG
  ADX_UPGM:DT >> OUTLOG
  IF EXIST ADXLXAAN::C:\CHKSTAT.MC1 {
    IF %TIPL%.==ASM. {
      ADXCST0L BACKGRND N BY %ASMRUN% TL
    }
    ELSE {
      ADXCST0L BACKGRND N BY %ASMRUN%
    }
  }
  ELSE {
    IF %TIPL%.==ASM. {
      ADXCST0L BACKGRND N %ASMRUN% TL
    }
    ELSE {
      ADXCST0L BACKGRND N %ASMRUN%
    }
  }
  :
  ECHO ASM/IPL DID NOT EXECUTE >>OUTLOG
  ECHO RESTORE ORIGINAL IPL INTERCEPT FILE >>OUTLOG
  COPY ADXLXAAN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXAAN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
  IF EXIST ADXLXAAN::C:\CHKSTAT.TWN {
    COPY ADXLXABN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
  }
  ECHO APPENDING ASM STATUS FILE >> OUTLOG
  TYPE CSHSF >>OUTLOG
  TYPE CSHSF >>FAILLOG
  :
  GOTO FAIL
}

IF %CIPL%.==YES. {
  : ******************
  : ** EXECUTE IPL ***
  : ******************
  IF %RUNIPL%.==NO. {
    ECHO Doing UPLIST >>OUTLOG
    BATCH CUPGM:UPLIST.BAT %PNAMEV%

    ECHO %PNAME% HAS COMPLETED SUCCESSFULLY > OKFILE
    ADXCSU0L 3 5 %OKFILE% >>OUTLOG >>*OUTLOG
    ECHO %PNAME% HAS COMPLETED SUCCESSFULLY > NODEOK
    ADXCSU0L 3 5 %NODEOK% >>OUTLOG >>*OUTLOG
    ECHO %PNAME%GO FINISHED >> OUTLOG
    IF EXIST ERRLOG ERASE ERRLOG
  }
  ECHO Reloading Controllers (T)>> OUTLOG
  CUPGM:DT.286 >> OUTLOG
  :
  ADX_UPGM:SETCIPL.286 UPGRADE
  ADXCS20L BACKGRND N 14
}
ELSE {
  ECHO Doing UPLIST >>OUTLOG
  BATCH CUPGM:UPLIST.BAT %PNAMEV%

  ECHO %PNAME% HAS COMPLETED SUCCESSFULLY > OKFILE
  ADXCSU0L 3 5 %OKFILE% >>OUTLOG >>*OUTLOG
  ECHO %PNAME% HAS COMPLETED SUCCESSFULLY > NODEOK
  ADXCSU0L 3 5 %NODEOK% >>OUTLOG >>*OUTLOG
  ECHO %PNAME% HAS COMPLETED SUCCESSFULLY (T)>> OUTLOG
  IF EXIST ERRLOG ERASE ERRLOG
  CUPGM:DT.286 >>OUTLOG

  IF %TIPL%.==TL. GOTO CTILLIPL
  IF %TIPL%.==STC. GOTO CTILLIPL
  GOTO NOCTIPL
  :CTILLIPL  
  Rem Reload controller/tills
  ECHO Till reload required reloading controller/tills >>OUTLOG
  FOR %A IN (ADXLXAAN::C:\CONTTILL.*) DO ADX_UPGM:SETCIPL.286 UPGRADE %A
  FOR %A IN (ADXLXAAN::C:\CONTTILL.*) DO ADX_UPGM:NETIPL.286 Y %A 10
  
  IF EXIST C:\CHKSTAT.CT {
    Rem If this is a controller/till then reload it
    IF %TIPL%.==TL. {
      ECHO Till reload required reloading as this is a controller/till >>OUTLOG
      ADX_UPGM:SETCIPL.286 UPGRADE %THISNODE%
      ADXCS20L BACKGRND N 13
    }
    IF %TIPL%.==STC. {
      ECHO Till reload required reloading as this is a controller/till >>OUTLOG
      ADX_UPGM:SETCIPL.286 UPGRADE %THISNODE%
      ADXCS20L BACKGRND N 13
    }    
  }  
  :NOCTIPL
  GOTO FIN
}
:
:IPLFAIL
ECHO IPL DID NOT EXECUTE >>OUTLOG
ECHO IPL DID NOT EXECUTE >>FAILLOG
COPY ADXLXAAN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXAAN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
IF EXIST ADXLXAAN::C:\CHKSTAT.TWN {
  COPY ADXLXABN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
}
IF EXIST OKFILE DEL OKFILE
IF EXIST NODEOK DEL NODEOK
GOTO FAIL
:
Rem -------------------------------------------------------------------------------------------------------
Rem -------------------------------------------------------------------------------------------------------
Rem ************************************
Rem ***            BACKOUT           ***
Rem ************************************
:BACKOUT
ECHO STARTING BACKOUT >> OUTLOG
rem TINFO
IF EXIST C:\ADX_UBUL\TILLINFO.%PNAME% {
  ECHO Restoring TILLINFO.BIN >> OUTLOG
  COPY C:\ADX_UBUL\TILLINFO.%PNAME% D:\ADX_UDT1\TILINFO.BIN >*ERRLOG >> OUTLOG
}
rem TINFO
:
IF %PJOBS%==YES {
  ECHO Backing out PKGJOBS >> OUTLOG
  ADX_UPGM:PKGJOBS -O%PNAME% -R%OUTLOG% -B >>OUTLOG
  IF ERRORLEVEL 10 GOTO PCONT
  IF ERRORLEVEL 1 GOTO PERROR
  GOTO PCONT
  :PERROR
    ECHO Error occurred during backout of PKGJOBS >> OUTLOG
    ECHO Error occurred during backout of PKGJOBS >> ERRLOG
    GOTO PCONT2
  :PCONT
  ECHO PKGJOBS Backed out >> OUTLOG
  :PCONT2
}
:
IF %CNVSION5%==YES {

  ECHO Conversion 5 backed out >>OUTLOG
}
IF %CNVSION4%==YES {

  ECHO Conversion 4 backed out >>OUTLOG
}
IF %CNVSION3%==YES {

  ECHO Conversion 3 backed out >>OUTLOG
}
IF %CNVSION2%==YES {

  ECHO Conversion 2 backed out >>OUTLOG
}
IF %CNVSION1%==YES {

  ECHO Conversion 1 backed out >>OUTLOG
}
:
IF %BACKRUN%==YES {
  IF %RUNIPL%==YES {
    : **********************************
    : ***   COPY IN INTERCEPT FILE   ***
    : **********************************
    :
rem    IF NOT EXIST ADXLXAAN::C:\ADX_UMNT\%PNAME%IPL.BAT {
rem      COPY ADXLXAAN::C:\ADX_UMNT\%PNAME%IPL.BAT ADXLXAAN::C:\ROOTMNT >*ERRLOG >> OUTLOG
rem    }
    ECHO BACKING UP ADXILI0F.DAT >> OUTLOG
    COPY CSDT1:ADXILI0F.DAT CSDT1:ADXILI0F.PAB >*ERRLOG >> OUTLOG
    ECHO COPYING IN NEW ADXILI0F.%PNAME% >> OUTLOG
    COPY C:\ADX_UMNT\ADXILI0F.%PNAME%+ADXLXAAN::C:\ADX_SDT1\ADXILI0F.DAT ADXLXAAN::C:\ADX_SDT1\ADXILI0F.DAT>*ERRLOG >> OUTLOG
    :
    IF EXIST ADXLXAAN::C:\CHKSTAT.TWN {
      COPY ADXLXAAN::C:\ADX_UMNT\%PNAME%IPL.BAT ADXLXABN::C:\ADX_UMNT >*ERRLOG >> OUTLOG

      ECHO BACKING UP ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
      COPY ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT ADXLXABN::C:\ADX_SDT1\ADXILI0F.PAB >*ERRLOG >> OUTLOG
      ECHO COPYING IN NEW ADXILI0F.%PNAME% >> OUTLOG
      COPY C:\ADX_UMNT\ADXILI0F.%PNAME%+ADXLXABN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT>*ERRLOG >> OUTLOG
    }
  }

  IF %RUNASM%==YES {
    ECHO START ASM CANCEL>> OUTLOG
    ADX_UPGM:DT >> OUTLOG
    IF EXIST ADXLXAAN::C:\CHKSTAT.MC1 {
      IF %TIPL%.==ASM. {
        ADXCST0L BACKGRND N BY %ASMKILL% TL
      }
      ELSE {
        ADXCST0L BACKGRND N BY %ASMKILL%
      }
    }
    ELSE {
      IF %TIPL%.==ASM. {
        ADXCST0L BACKGRND N %ASMKILL% TL
      }
      ELSE {
        ADXCST0L BACKGRND N %ASMKILL%
      }
    }
    :
    ECHO ASM CANCEL DID NOT EXECUTE >>OUTLOG
    ECHO RESTORE ORIGINAL IPL INTERCEPT FILE >>OUTLOG
    COPY ADXLXAAN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXAAN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
    IF EXIST ADXLXAAN::C:\CHKSTAT.TWN {
      COPY ADXLXABN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
    }
    ECHO APPENDING ASM STATUS FILE >> OUTLOG
    TYPE CSHSF >>OUTLOG
    TYPE CSHSF >>FAILLOG
    :
    GOTO FAIL
  }
  ELSE {
    IF %TIPL%==TL {
      ECHO Sending reload to the tills >>OUTLOG
      ADXCS20L BACKGRND N 11
    }
    IF %TIPL%==STC {
      ECHO Sending STC to the tills >>OUTLOG
      ADXCS20L BACKGRND N 12
    }
    :
    IF %CIPL%==YES {
      : *************************
      : ***   CONTROLLER IPL  ***
      : *************************
      :
      IF NOT %RUNIPL%==YES {
        ECHO %PNAME% HAS COMPLETED BACKOUT > OKFILE
        ADXCSU0L 3 5 %OKFILE% >>OUTLOG >>*OUTLOG

        ECHO Doing UPLIST >>OUTLOG
        BATCH CUPGM:UPLIST.BAT BACKOUT%PNAMEV%
      }
      ECHO %PNAME%GO FINISHED BACKOUT. Reloading Controller(s) >> OUTLOG
      CUPGM:DT.286 >> OUTLOG
      ADXCS20L BACKGRND N 14
      :
      ECHO IPL DID NOT EXECUTE >>OUTLOG
      ECHO RESTORE ORIGINAL IPL INTERCEPT FILE >>OUTLOG
      COPY ADXLXAAN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXAAN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
      IF EXIST ADXLXAAN::C:\CHKSTAT.TWN {
        COPY ADXLXABN::C:\ADX_SDT1\ADXILI0F.PAB ADXLXABN::C:\ADX_SDT1\ADXILI0F.DAT >> OUTLOG
      }
      IF EXIST OKFILE ERASE OKFILE
      IF EXIST NODEBKOK ERASE NODEBKOK
      GOTO BFAIL
    }
    ELSE {
      ECHO Doing UPLIST >>OUTLOG
      BATCH CUPGM:UPLIST.BAT BACKOUT%PNAMEV%

      ECHO %PNAME%GO FINISHED BACKOUT. >> OUTLOG
      ECHO %PNAME% HAS COMPLETED BACKOUT > OKFILE
      ADXCSU0L 3 5 %OKFILE% >>OUTLOG >>*OUTLOG
      ECHO %PNAME% HAS COMPLETED BACKOUT > NODEBKOK
      ADXCSU0L 3 5 %NODEBKOK% >>OUTLOG >>*OUTLOG
      
      IF %TIPL%.==TL. GOTO BCTILIPL
      IF %TIPL%.==STC. GOTO BCTILIPL
      GOTO BNOCTIPL
      :BCTILIPL  
      Rem Reload controller/tills
      ECHO Backout - Till reload required reloading controller/tills >>OUTLOG
      FOR %A IN (ADXLXAAN::C:\CONTTILL.*) DO ADX_UPGM:SETCIPL.286 UPGRADE %A
      FOR %A IN (ADXLXAAN::C:\CONTTILL.*) DO ADX_UPGM:NETIPL.286 Y %A 10
    
      IF EXIST C:\CHKSTAT.CT {
        Rem If this is a controller\till then reload it
        IF %TIPL%.==TL. {
          ECHO Backout - Till reload required reloading as this is a controller/till >>OUTLOG
          ADX_UPGM:SETCIPL.286 UPGRADE %THISNODE%
          ADXCS20L BACKGRND N 13
        }
        IF %TIPL%.==STC. {
          ECHO Backout - Till reload required reloading as this is a controller/till >>OUTLOG
          ADX_UPGM:SETCIPL.286 UPGRADE %THISNODE%
          ADXCS20L BACKGRND N 13
        }
      }
      :BNOCTIPL
      GOTO FIN
    }
  }
}
:
GoTo FAIL
:
:CRCFAIL
ECHO ******************************************************** >> CRCFAIL
ECHO ***  A TRANSMISSION ERROR HAS OCCURED ON A ZIP FILE  *** >> CRCFAIL
ECHO ******************************************************** >> CRCFAIL
GOTO FIN
:MISSING
ECHO SOME OF THE FILES ARE MISSING > %PNAME%TRN
ECHO SOME OF THE FILES ARE MISSING >> OUTLOG
GoTo FAIL
:LANERR
ECHO THERE IS A PROBLEM WITH THE LAN >> ERRLOG
ECHO THERE IS A PROBLEM WITH THE LAN >> OUTLOG
GoTo FAIL
:SIZERR
ECHO SOME OF THE FILES ARE THE INCORRECT SIZE > %PNAME%TRN
GoTo FAIL
:COPYERRB
ECHO AN ERROR HAS OCCURED COPYING THE FILES >> ERRLOG
ECHO AN ERROR HAS OCCURED COPYING THE FILES >> OUTLOG
GoTo BACKOUT
:DISTERRB
ECHO AN ERROR HAS OCCURED DISTRIBUTING THE FILES >> ERRLOG
ECHO AN ERROR HAS OCCURED DISTRIBUTING THE FILES >> OUTLOG
GoTo BACKOUT
:COPYERR
ECHO AN ERROR HAS OCCURED COPYING THE FILES >> ERRLOG
ECHO AN ERROR HAS OCCURED COPYING THE FILES >> OUTLOG
GoTo FAIL
:BACKERR
ECHO AN ERROR HAS OCCURED TAKING BACKUPS >> ERRLOG
ECHO AN ERROR HAS OCCURED TAKING BACKUPS >> OUTLOG
GoTo FAIL
:DISTERR
ECHO AN ERROR HAS OCCURED DISTRIBUTING THE FILES >> ERRLOG
ECHO AN ERROR HAS OCCURED DISTRIBUTING THE FILES >> OUTLOG
GoTo FAIL
:
:AFTER11
ECHO THE TIME IS AFTER %SLEPTIME% >> ERRLOG
ECHO THE TIME IS AFTER %SLEPTIME% >> OUTLOG
GoTo FAIL
:TIMESUP
rem -----------------------------------------------------------------------------------------------------------
ECHO THE TIME IS AFTER %ENDTIME% >> ERRLOG
ECHO THE TIME IS AFTER %ENDTIME% >> OUTLOG
GoTo FAIL
rem -----------------------------------------------------------------------------------------------------------
:NOUNZIP
ECHO DECOMPRESS FAILED, CHECK DISK SPACE >> ERRLOG
ECHO DECOMPRESS FAILED, CHECK DISK SPACE >> OUTLOG
GoTo FAIL
:FILEEMP
ECHO NO RECORDS HAVE BEEN WRITTEN TO THE PKGVER FILE >> OUTLOG
ECHO FILE EMPTY >> OUTLOG
GOTO FAIL
:MISMATCH
ECHO THE REQUIRED VERSION DOES NOT MATCH THE CURRENT PACKAGE VERSION >> OUTLOG
ECHO MISMATCH >> OUTLOG
GOTO FAIL
:STATERR
ECHO AN ERROR OCCURRED WHILE RUNNING CHKSTAT >> OUTLOG
ECHO AN ERROR OCCURRED WHILE RUNNING CHKSTAT >> ERRLOG
GOTO FAIL
:STATNODE
ECHO CHKSTAT REPORTS THAT ONE OR MORE CONTROLLERS ARE NOT ON THE NETWORK>> OUTLOG
ECHO CHKSTAT REPORTS THAT ONE OR MORE CONTROLLERS ARE NOT ON THE NETWORK>> ERRLOG
GOTO FAIL
:STATSPACE
ECHO LOW DRIVE SPACE REPORTED BY CHKSTAT >>OUTLOG
ECHO LOW DRIVE SPACE REPORTED BY CHKSTAT >>ERRLOG
GOTO FAIL
:NOPKGVER
ECHO THE PACKAGE VERSION IS MISSING >> OUTLOG
GOTO FAIL
:FAILURE
ECHO CRITICAL PROBLEM OCCURRED >> OUTLOG
ECHO FAILURE-CHECK LOGS >> OUTLOG
:PROB
ECHO *************************************** >> ERRLOG
ECHO *** THERE IS A DISK IN THE A: DRIVE *** >> ERRLOG
ECHO *************************************** >> ERRLOG
GoTo FAIL
:BFAIL
ECHO ************************************************* > %BKFAILLOG%
ECHO *** %PNAME% BACKOUT HAS ENCOUNTERED A PROBLEM *** >> %BKFAILLOG%
ECHO ************************************************* >> %BKFAILLOG%
GOTO FIN
:CASMU
ECHO CHKASM FAILED CHECK C:\CHKASM.ERR >> OUTLOG
ECHO CHKASM FAILED CHECK C:\CHKASM.ERR >> ERRLOG
GOTO FAIL
:CASMPKG
ECHO CHKASM - PACKAGE ID NOT PASSED >> OUTLOG
ECHO CHKASM - PACKAGE ID NOT PASSED >> ERRLOG
GOTO FAIL
:CASMPCF
ECHO CHKASM REPORTED MISSING PCF CHECK C:\CHKASM.ERR >> OUTLOG
ECHO CHKASM REPORTED MISSING PCF CHECK C:\CHKASM.ERR >> ERRLOG
GOTO FAIL
:CASMBBAD
ECHO CHKASM - A PCF IN A BACKUP DIRECTORY IS NOT CORRECT >> OUTLOG
ECHO CHKASM - A PCF IN A BACKUP DIRECTORY IS NOT CORRECT >> ERRLOG
GOTO FAIL
:ABORT
ECHO Package terminated due to presence of kill file >>OUTLOG
ECHO Package terminated due to presence of kill file >>ERRLOG
GOTO FAIL
:NOTMASTER
ECHO Package run has been started on a NON MASTER controller >> OUTLOG
ECHO Package run has been started on a NON MASTER controller >> ERRLOG
GOTO FAIL
:NODEERR
ECHO Package has been started on a controller that is not CE >> OUTLOG
ECHO Package started on %THISNODE% >> OUTLOG
ECHO Package has been started on a controller that is not CE >> ERRLOG
ECHO Package started on %THISNODE% >> ERRLOG
GOTO FAIL
:FAIL
ECHO ************************************* > FAILLOG
ECHO *** %PNAME% HAS ENCOUNTERED A PROBLEM *** >> FAILLOG
ECHO ************************************* >> FAILLOG
:FIN
IF %BACKRUN%==YES {
  ECHO %PNAME% BACKOUT FINISHED >> OUTLOG
}
ELSE {
  ECHO %PNAME%GO FINISHED >> OUTLOG
}
CUPGM:DT.286 >> OUTLOG
