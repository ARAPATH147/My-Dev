\***********************************************************************
\*
\* Program: XRESTORE          Jaya Kumar Inbaraj              04/03/2014
\*
\* FOD260 - Enhanced Backup and Recovery
\*
\*           %INCLUDE for External Functions in XRESTORE
\*
\*                    REFERENCE: XRESTORE.J86
\*
\*       MODULE EXTRACTED FROM ORIGINAL XRESTORE.BAS (RENAMED TO
\*       XREST000.BAS) AS BREACHED 64K LIMIT AND CRETAED AS XREST001.BAS
\*
\*======================================================================
\*                   V E R S I O N   C O N T R O L
\*======================================================================
\*
\*                            Dave Constable                  25/06/2014
\* FOD260 - Enhanced Backup and Recovery
\* Code extracted originally from single module (XRESTORE.BAS) and all
\* code change markers removed.
\* For maintenance and usage all included externals and includes are
\* also replicated here and included into both modules.
\*
\* Version B                Jaya Kumar Inbaraj                23/08/2014
\* FOD260 - Enhanced Backup and Recovery
\* Updated the Header block comments
\*
\* Version C                Jaya Kumar Inbaraj                04/09/2014
\* FOD260 - Enhanced Backup and Recovery
\* Updated the C file function names
\*
\***********************************************************************

\***********************************************************************
\*
\* Included code defining file related global variables
\*
\***********************************************************************

\***********************************************************************
\*
\* Included code defining function related external functions
\*
\***********************************************************************
    %INCLUDE PSBF02E.J86     ! Update Date
    %INCLUDE PSBF13E.J86     ! PSDATE function
    %INCLUDE PSBF20E.J86     ! Session number utility
    %INCLUDE PSBF24E.J86     ! Standard error detected
    %INCLUDE PSBF39E.J86     ! Display Manager

    %INCLUDE DMEXTR.J86      ! IBM DISPLAY MANAGER functions

\***********************************************************************
\*
\* Included code defining external Boots functions
\*
\***********************************************************************
    %INCLUDE ADXCOPY.J86     ! To copy files
    %INCLUDE ADXSERVE.J86    ! ADXSERVE function
    %INCLUDE BASROUT.J86     ! OSShell function
    %INCLUDE BTCSTR.J86      ! String functions
    %INCLUDE CMPDATE.J86     ! Compare date utility
    %INCLUDE ERRNH.J86       ! Converts ERRN to 8-byte ASCII string
    %INCLUDE SLPCFEXT.J86    ! Sleeper control

\***********************************************************************
\*
\* OPEN.SEQUENTIAL.FILE : External C file function helps in opening
\*                        a sequential file as BASIC does not support
\*                        this when running under Supplemental Mode.
\*
\***********************************************************************
FUNCTION FUNC.OPEN.SEQUENTIAL.FILE( FILE.NAME$ ) EXTERNAL               !CJK
    INTEGER*4 FUNC.OPEN.SEQUENTIAL.FILE                                 !CJK
    STRING FILE.NAME$
END FUNCTION

\***********************************************************************
\*
\* READ.SEQUENTIAL.FILE : External C file function helps in reading
\*                        a sequential file as BASIC does not support
\*                        this when running under Supplemental Mode.
\*
\***********************************************************************
FUNCTION FUNC.READ.SEQUENTIAL.FILE( FILE.HANDLE% ) EXTERNAL             !CJK
    STRING FUNC.READ.SEQUENTIAL.FILE                                    !CJK
    INTEGER*4 FILE.HANDLE%
END FUNCTION

\***********************************************************************
\*
\* WRITE.SEQUENTIAL.FILE : External C file function helps in writing
\*                         a sequential file as BASIC does not support
\*                         this when running under Supplemental Mode.
\*
\***********************************************************************
FUNCTION FUNC.WRITE.SEQUENTIAL.FILE(FILE.HANDLE%, FILE.RECORD$) EXTERNAL!CJK
    INTEGER*4 FUNC.WRITE.SEQUENTIAL.FILE                                !CJK
    INTEGER*4 FILE.HANDLE%
    STRING FILE.RECORD$
END FUNCTION

\***********************************************************************
\*
\* CLOSE.FILE : External C file function helps in closing a file as
\*              BASIC does not support this when running under
\*              Supplemental Mode.
\*
\***********************************************************************
FUNCTION FUNC.CLOSE.FILE ( FILE.HANDLE% ) EXTERNAL                      !CJK
    INTEGER*4 FILE.HANDLE%
END FUNCTION

