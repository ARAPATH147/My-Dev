   1: 0000: \******************************************************************************
   2: 0000: \******************************************************************************
   3: 0000: \***
   4: 0000: \***   $Workfile:   PSB9901.BAS  $
   5: 0000: \***
   6: 0000: \***   $Revision:   1.2  $
   7: 0000: \***
   8: 0000: \******************************************************************************
   9: 0000: \******************************************************************************
  10: 0000: \***
  11: 0000: \***   $Log:   V:/Archive/Basarch/psb9901.bav  $
  12: 0000: \***
  13: 0000: \***      Rev 1.2   22 Jul 2004 15:33:56   devjsps
  14: 0000: \***   Archived for MJB
  15: 0000: \***   Changes for Beauty Commission project
  16: 0000: \***   Operator Staff number and employee flag
  17: 0000: \***   must now be entered
  18: 0000: \***
  19: 0000: \***      Rev 1.1   06 Oct 1994 10:21:48   DEVRCPS
  20: 0000: \***   Initial PVCS revision. Corrected F3=ENTER error on leaving screens.
  21: 0000: \***
  22: 0000: \******************************************************************************
  23: 0000: \******************************************************************************
  24: 0000: 
  25: 0000: \******************************************************************************
  26: 0000: \******************************************************************************
  27: 0000: \***                                                                          *
  28: 0000: \***                                                                          *
  29: 0000: \***            PROGRAM         :       PSB99                                 *
  30: 0000: \***            AUTHOR          :       Mark Walker                           *
  31: 0000: \***            DATE WRITTEN    :       March 23rd 1994                       *
  32: 0000: \***                                                                          *
  33: 0000: \***            MODULE          :       PSB9901                               *
  34: 0000: \***                                                                          *
  35: 0000: \***                                                                          *
  36: 0000: \******************************************************************************
  37: 0000: \******************************************************************************
  38: 0000: 
  39: 0000: 
  40: 0000: \******************************************************************************
  41: 0000: \******************************************************************************
  42: 0000: \***                                                                          *
  43: 0000: \***    Module Overview                                                       *
  44: 0000: \***    ---------------                                                       *
  45: 0000: \***                                                                          *
  46: 0000: \***    This module handles the reporting of all operators. The report        *
  47: 0000: \***    can be sorted by operator ID, name or model.                          *
  48: 0000: \***                                                                          *
  49: 0000: \******************************************************************************
  50: 0000: \******************************************************************************
  51: 0000: 
  52: 0000: \******************************************************************************
  53: 0000: \******************************************************************************
  54: 0000: \***                                                                          *
  55: 0000: \***    VERSION D.                 Mark Walker               23rd March 1994  *
  56: 0000: \***    This module has been rewritten for the Controller Security package.   *
  57: 0000: \***                                                                          *
  58: 0000: \***    REVISION 1.1            ROBERT COWEY.                     26 SEP 1994.*
  59: 0000: \***    Removed version letters from included code (not commented).           *
  60: 0000: \***                                                                          *
  61: 0000: \***    Removed OPEN, WRITE, TCLOSE and CLOSE of printer, along with          *
  62: 0000: \***    associated checking of printer status.                                *
  63: 0000: \***                                                                          *
  64: 0000: \***    REVISION 1.2            MIKE BISHOP                       13 JUL 2004.*
  65: 0000: \***    Additional fields staff number and employee flag added.               *
  66: 0000: \***                                                                          *
  67: 0000: \***    REVISION 1.3.           Nalini Mathusoothanan             01 AUG 2011.*
  68: 0000: \***    Changes for Core 2 Release project.                                   *
  69: 0000: \***       - To enforce the Staff Number to be entered for all new users.     *
  70: 0000: \***       - Make the Staff Number field mandatory for Boots Employees only.  *
  71: 0000: \***       - Display error message when Staff Number has not been entered.    *
  72: 0000: \***    Change to use PRINT.REPORT function, which handles YLBP printers      *
  73: 0000: \***                                                                          *
  74: 0000: \***    REVISION 1.4.           Tittoo Thomas                     05 JUL 2012.*
  75: 0000: \***    Changes for SFA, modified Controller and Till report headers to       *
  76: 0000: \***    accomodate for more flags to be added. [SFA Defect 46]                *
  77: 0000: \***                                                                          *
  78: 0000: \***    REVISION A              David Griffiths                   15 Feb 2017 *
  79: 0000: \***    Change to call of print report to not send compresses as this causes  *
  80: 0000: \***    print out to stagger diagonally.                                      *
  81: 0000: \***                                                                          *
  82: 0000: \******************************************************************************
  83: 0000: \******************************************************************************
  84: 0000: 
  85: 0000:         %INCLUDE AFDEC.J86
  86: 0000: 
  87: 0000: \REM
  88: 0000: \*******************************************************************************
  89: 0000: \*******************************************************************************
  90: 0000: \***
  91: 0000: \***    %INCLUDE FOR GSA AUTHORISATION FILE VARIABLE DECLARATIONS
  92: 0000: \***
  93: 0000: \***        REFERENCE   :  AFDEC (J86)
  94: 0000: \***
  95: 0000: \***        FILE TYPE   :  Keyed
  96: 0000: \***
  97: 0000: \***    The GSA Authorisation File (EALAUTH.DAT) should not be confused with
  98: 0000: \***    the Operating System Authorisation File (ADXCSOUF.DAT).
  99: 0000: \***
 100: 0000: \***    VERSION A.              ROBERT COWEY.                       18 AUG 1992.
 101: 0000: \***    Original version created by merging AFFLDD and AFNUMD.
 102: 0000: \***
 103: 0000: \***    VERSION B.              Steve Windsor                          Nov 1992.
 104: 0000: \***    Addition of new fields for the CASTLE project.
 105: 0000: \***    Supervisor flag and operator model.
 106: 0000: \***
 107: 0000: \***    VERSION C.              ROBERT COWEY.                       03 MAR 1994.
 108: 0000: \***    Defined fields DATE.PSWD.CHANGE$, and MODEL.FLAGS.1% and ...2%.
 109: 0000: \***
 110: 0000: \***    VERSION D.             Mike Bishop                          30 JUN 2004
 111: 0000: \***    Defined field AF.STAFF.NUM$ AF.EMPLOYEE.FLAG$
 112: 0000: \***
 113: 0000: \***    VERSION E.             Alan Carr  (AJC)                      4 Oct 2004
 114: 0000: \***    Defined field AF.RECEIPT.NAME$
 115: 0000: \***
 116: 0000: \***    VERSION F.             Alan Carr  (AJC)                     31 Jan 2005
 117: 0000: \***    Defined field AF.GROUP.CODE$
 118: 0000: \***
 119: 0000: \***    REVISION 1.6.                ROBERT COWEY.                15 JUN 2009.
 120: 0000: \***    Changes for A9C POS improvements project.
 121: 0000: \***    Used up last available three bytes of EALAUTH user data by redefining 
 122: 0000: \***    remaining AF.USER$ variable as AF.BIRTH.DATE$.
 123: 0000: \***    See IBM manual "GSA Programming Guide" Appendix A-27 for file layout 
 124: 0000: \***    describing INDICAT flags (and position of original 20 bytes user data).
 125: 0000: \***
 126: 0000: \***    REVISION 1.7.                ROBERT COWEY.                22 JUN 2009.
 127: 0000: \***    Changes for A9C POS improvements project creating PSB99.286 Rv 1.8.
 128: 0000: \***    Defect 3247 - Redefined AF.BIRTH.DATE$ format as UPD-hex DDMCYY.
 129: 0000: \***    Description text change only - No code changes to this file.
 130: 0000: \***
 131: 0000: \*******************************************************************************
 132: 0000: \*******************************************************************************
 133: 0000: 
 134: 0000: 
 135: 0000:     STRING GLOBAL \
 136: 0000:         AF.BIRTH.DATE$,       \ ! 3 byte DDMCYY UPD/hex format         ! 1.7 RC
 137: 0000:                               \ ! M is month  A=Oct B=Nov C=Dec        ! 1.7 RC
 138: 0000:                               \ ! C is century  0=19xx 1=20xx          ! 1.7 RC
 139: 0000:         AF.DATE.PSWD.CHANGE$, \ ! 3 bytes UPD                          ! CRC
 140: 0000:         AF.FILE.NAME$, \
 141: 0000:         AF.FLAGS.01.12$, \      ! 15 bytes
 142: 0000:         AF.FLAGS.13.16$, \      ! 4 bytes
 143: 0000:         AF.OPERATOR.NAME$,\     ! 20 bytes
 144: 0000:         AF.OPERATOR.NO$, \      ! 4 byte UPD (key)
 145: 0000:         AF.OPTIONS.KEY$, \      ! 1 byte UPD
 146: 0000:         AF.PASSWORD$, \         ! 4 byte UPD
 147: 0000:         AF.RECEIPT.NAME$, \     ! 12 bytes                             ! AJC
 148: 0000:         AF.STAFF.NUM$, \         ! 4 byte UPD                          DMB
 149: 0000:         AF.EMPLOYEE.FLAG$, \     ! 1 byte UPD                          DMB
 150: 0000:         AF.GROUP.CODE$, \       ! 1  byte UPD                          AJC
 151: 0000: \       AF.USER$, \             ! 3  bytes                             ! 1.6 RC
 152: 0000:         AF.SUP.FLAG$, \         ! 1  byte                              BSJW
 153: 0000:         AF.OP.MODEL$            ! 3  bytes                             BSJW
 154: 0000: 
 155: 0000:     INTEGER*1 GLOBAL \
 156: 0000:         AF.INDICAT4%, \
 157: 0000:         AF.INDICAT5%, \
 158: 0000:         AF.INDICAT6%, \
 159: 0000:         AF.INDICAT7%, \
 160: 0000:         AF.INDICAT8%, \
 161: 0000:         AF.INDICAT9%, \
 162: 0000:         AF.INDICAT10%, \
 163: 0000:         AF.INDICAT11%, \
 164: 0000:         AF.INDICAT12%, \
 165: 0000:         AF.INDICAT13%, \
 166: 0000:         AF.INDICAT14%, \
 167: 0000:         AF.INDICAT15%, \
 168: 0000:         AF.INDICAT16%, \
 169: 0000:         AF.REPORT.NUM%
 170: 0000: 
 171: 0000:     INTEGER*2 GLOBAL \
 172: 0000:         AF.INDICAT1%, \
 173: 0000:         AF.INDICAT2%, \
 174: 0000:         AF.INDICAT3%, \
 175: 0000:         AF.MODEL.FLAGS.1%, \                                           ! CRC
 176: 0000:         AF.MODEL.FLAGS.2%, \                                           ! CRC
 177: 0000:         AF.RECL%, \
 178: 0000:         AF.SESS.NUM%
 179: 0000: 
 180: 0000:         %INCLUDE PRINTDEC.J86
 181: 0000: 
 182: 0000: REM \
 183: 0000: \*******************************************************************************
 184: 0000: \*******************************************************************************
 185: 0000: \***
 186: 0000: \***    %INCLUDE FOR PRINT FILE VARIABLE DECLARATIONS
 187: 0000: \***
 188: 0000: \***        REFERENCE   :   PRINTDE (J86)
 189: 0000: \***
 190: 0000: \***        FILE TYPE   :   Printer / Labeller
 191: 0000: \***
 192: 0000: \***    VERSION A.              ANDREW WEDGEWORTH                   09 JUL 1992.
 193: 0000: \***    Original version created by merging PRINTFLG and PRINTNUG.
 194: 0000: \***
 195: 0000: \***    VERSION B.              UNKNOWN.                            ?? ??? 1992.
 196: 0000: \***    Changes unknown.             
 197: 0000: \***
 198: 0000: \***    VERSION C.              ROBERT COWEY.                       18 NOV 1992.
 199: 0000: \***    No changes made to this file.
 200: 0000: \***
 201: 0000: \***    Version D               Andrew Wedgeworth                 24th May 1992
 202: 0000: \***    Variable added to contain condensed print record length.
 203: 0000: \***
 204: 0000: \*******************************************************************************
 205: 0000: \*******************************************************************************
 206: 0000: 
 207: 0000: 
 208: 0000:     STRING GLOBAL \
 209: 0000:         PRINT.LINE$, \
 210: 0000:         PRINT.FILE.NAME$, \
 211: 0000:         SELF.LAN.NAME$, \
 212: 0000:         SELF.NOLAN.NAME$
 213: 0000: 
 214: 0000:     INTEGER*2 GLOBAL \
 215: 0000:         PRINT.CONDENSED.RECL%, \                                       ! DAW  
 216: 0000:         PRINT.SESS.NUM%, \
 217: 0000:         PRINT.REPORT.NUM%, \
 218: 0000:         PRINT.REPORT.RECL%, \
 219: 0000:         PRINT.SELF.RECL%
 220: 0000: 
 221: 0000:         %INCLUDE PSBF03G.J86   ! Display Manager
 222: 0000: REM \
 223: 0000: \*******************************************************************************
 224: 0000: \***
 225: 0000: \***      INCLUDED CODE FOR DISPLAY MANAGER FUNCTIONS GLOBAL DECLARATIONS
 226: 0000: \***
 227: 0000: \***                    REFERENCE :  PSBF03G.J86
 228: 0000: \***              
 229: 0000: \***      Version A                                        21st March 1986
 230: 0000: \***
 231: 0000: \***      Version B          Andrew Wedgeworth              27th July 1992
 232: 0000: \***      Removal of F03.RETURN.CODE% which is no longer used.
 233: 0000: \***
 234: 0000: \*******************************************************************************
 235: 0000: 
 236: 0000:    ! 1 line deleted from here                                          ! BAW
 237: 0000:    INTEGER*2   GLOBAL   F03.RETURNED.INTEGER%    ! from IBM Display Manager
 238: 0000:    STRING      GLOBAL   F03.RETURNED.STRING$     ! from IBM Display Manager
 239: 0000: 
 240: 0000: 
 241: 0000: 
 242: 0000: 
 243: 0000: 
 244: 0000: 
 245: 0000:         %INCLUDE PSBUSEG.J86
 246: 0000: \/*********************************************************************/ PSBUSEG
 247: 0000: \/*                                                                   */ PSBUSEG
 248: 0000: \/* PSBUSEG.J86  -  Definitions for Chain/Use with PSB Screen Program */ PSBUSEG
 249: 0000: \/* ----------------------------------------------------------------- */ PSBUSEG
 250: 0000: \/*                                                                   */ PSBUSEG
 251: 0000: \/*********************************************************************/ PSBUSEG
 252: 0000:                                                                        ! PSBUSEG
 253: 0000:         STRING GLOBAL  PSBCHN.PRG,      \ Program to chain to          ! PSBUSEG
 254: 0000:                        PSBCHN.OP,       \ Operator Id                  ! PSBUSEG
 255: 0000:                        PSBCHN.APP,      \ Program chained from         ! PSBUSEG
 256: 0000:                        PSBCHN.MENCON,   \ Menu Control                 ! PSBUSEG
 257: 0000:                        PSBCHN.U1,       \ User parameter               ! PSBUSEG
 258: 0000:                        PSBCHN.U2,       \ User parameter               ! PSBUSEG
 259: 0000:                        PSBCHN.U3        ! User parameter               ! PSBUSEG
 260: 0000:                                                                        ! PSBUSEG
 261: 0000: 
 262: 0000:         STRING GLOBAL           BATCH.SCREEN.FLAG$,                    \
 263: 0000:                                 CHAIN.TO.PROG$,                        \
 264: 0000:                                 CURSOR.STATE$,                         \
 265: 0000:                                 INITIAL.DATA$,                         \
 266: 0000:                                 INVISIBLE$,                            \
 267: 0000:                                 SAVED.STRING$,                         \
 268: 0000:                                 LAST.MESSAGE$,                         \
 269: 0000:                                 MODULE.NUMBER$,                        \
 270: 0000:                                 OPERATOR.NUMBER$,                      \
 271: 0000:                                 SB.ACTION$,                            \
 272: 0000:                                 SB.FILE.NAME$,                         \
 273: 0000:                                 SB.STRING$,                            \
 274: 0000:                                 STRING.DATA$,                          \
 275: 0000:                                 VAR.STRING.1$,                         \
 276: 0000:                                 VAR.STRING.2$,                         \
 277: 0000:                                 VISIBLE$,                              \
 278: 0000:                                 DISPLAY.MESSAGE.TEXT$,                 \
 279: 0000:                                 CURSOR.ON$,                            \
 280: 0000:                                 CURSOR.OFF$,                           \
 281: 0000:                                 CHAR$,                                 \
 282: 0000:                                 FILE.OPERATION$,                       \
 283: 0000:                                 FILE.NO$,                              \
 284: 0000:                                 CURRENT.CODE$,                         \
 285: 0000:                                 WORKFILE.FILE.NAME$                    ! 1.3 NM
 286: 0000: 
 287: 0000:         INTEGER*1 GLOBAL        EVENT.NO%,                             \
 288: 0000:                                 TRUE,FALSE,                            \
 289: 0000:                                 EXIT.KEY.PRESSED(1)
 290: 0000: 
 291: 0000:         INTEGER*2 GLOBAL        CURRENT.REPORT.NUM%,                   \
 292: 0000:                                 SB.INTEGER%,                           \
 293: 0000:                                 SB.FILE.REP.NUM%,                      \
 294: 0000:                                 SB.FILE.SESS.NUM%,                     \
 295: 0000:                                 CURSOR.POSITION%,                      \
 296: 0000:                                 DISPLAY.MESSAGE.NUMBER%,               \
 297: 0000:                                 INTEGER.DATA%,                         \
 298: 0000:                                 RETURN.FIELD%,                         \
 299: 0000:                                 I%,                                    \
 300: 0000:                                 J%,                                    \
 301: 0000:                                 S%,                                    \
 302: 0000:                                 FUNCTION.KEY%,                         \
 303: 0000:                                 KEY.SELECTED%,                         \
 304: 0000:                                 MESSAGE.NO%,                           \
 305: 0000:                                 OLD.POSITION%,                         \
 306: 0000:                                 SAVED.POSITION%,                       \
 307: 0000:                                 HELP.KEY%,                             \
 308: 0000:                                 QUIT.KEY%,                             \
 309: 0000:                                 END.KEY%,                              \
 310: 0000:                                 HOME.KEY%,                             \
 311: 0000:                                 TAB.KEY%,                              \
 312: 0000:                                 BTAB.KEY%,                             \
 313: 0000:                                 ESC.KEY%,                              \
 314: 0000:                                 ENTER.KEY%,                            \
 315: 0000:                                 PGUP.KEY%,                             \
 316: 0000:                                 PGDN.KEY%,                             \
 317: 0000:                                 F7UP.KEY%,                             \
 318: 0000:                                 F8DN.KEY%,                             \
 319: 0000:                                 INVISIBLE.FIELD%,                      \
 320: 0000:                                 WORKFILE.REPORT.NUM%,                  \ 1.3 NM
 321: 0000:                                 WORKFILE.SESS.NUM%                     ! 1.3 NM
 322: 0000: 
 323: 0000:         STRING GLOBAL           AF.TABLE$(1),                          \
 324: 0000:                                 AF.FORMAT$,                            \
 325: 0000:                                 AF.BLOCK$,                             \
 326: 0000:                                 AF.RECORD$,                            \
 327: 0000:                                 SECTOR.STRING$,                        \
 328: 0000:                                 REPORT.OPTION$,                        \
 329: 0000:                                 SORT.OPTION$,                          \
 330: 0000:                                 TILL.MODEL.RECORD$(1),                 \
 331: 0000:                                 CTLR.MODEL.RECORD$(1),                 \
 332: 0000:                                 OPERATOR.ID$,                          \
 333: 0000:                                 OPERATOR.NAME$,                        \
 334: 0000:                                 STAFF.NO$,                             \
 335: 0000:                                 EMPLOYEE.FLG$,                         \
 336: 0000:                                 TILL.MODEL.STRING$,                    \
 337: 0000:                                 CTLR.MODEL.STRING$,                    \
 338: 0000:                                 DISPLAY.TITLE$,                        \
 339: 0000:                                 DISPLAY.PAGES$,                        \
 340: 0000: \                                DISPLAY.HEADINGS$,                    \ 1.4 TT
 341: 0000:                                 DISPLAY.HEADINGS1$,                    \ 1.4 TT
 342: 0000:                                 DISPLAY.HEADINGS2$,                    \ 1.4 TT
 343: 0000:                                 DISPLAY.HEADINGS3$,                    \ 1.4 TT
 344: 0000:                                 DISPLAY.UNDERLINE$,                    \
 345: 0000:                                 REPORT.DATE$,                          \
 346: 0000:                                 REPORT.TIME$,                          \
 347: 0000: \                                TILL.HEADINGS$,                       \ 1.4 TT
 348: 0000:                                 TILL.HEADINGS1$,                       \ 1.4 TT
 349: 0000:                                 TILL.HEADINGS2$,                       \ 1.4 TT
 350: 0000:                                 TILL.HEADINGS3$,                       \ 1.4 TT
 351: 0000: \                                CTLR.HEADINGS$,                       \ 1.4 TT
 352: 0000:                                 CTLR.HEADINGS1$,                       \ 1.4 TT
 353: 0000:                                 CTLR.HEADINGS2$,                       \ 1.4 TT
 354: 0000:                                 CTLR.HEADINGS3$,                       \ 1.4 TT
 355: 0000:                                 FORM.FEED$,                            \
 356: 0000:                                 LINE.FEED$,                            \
 357: 0000:                                 CARRIAGE.RETURN$,                      \
 358: 0000:                                 PAD.CHAR$
 359: 0000: 
 360: 0000:                                 !CONDENSE.ON$,                         \ 1.3 NM
 361: 0000:                                 !CONDENSE.OFF$,                        \ 1.3 NM
 362: 0000: 
 363: 0000:         INTEGER*1 GLOBAL        EMPTY.AF.RECORD.FOUND,                 \
 364: 0000:                                 END.OF.AF.FILE,                        \
 365: 0000:                                 END.OF.AF.BLOCK,                       \
 366: 0000:                                 VALID.REPORT.OPTION.FOUND,             \
 367: 0000:                                 VALID.SORT.OPTION.FOUND
 368: 0000: 
 369: 0000:         INTEGER*2 GLOBAL        AF.BLOCK.SIZE%,                        \
 370: 0000:                                 FULL.AF.BLOCKS%,                       \
 371: 0000:                                 MAX.TABLE.SIZE%,                       \
 372: 0000:                                 AF.PTR%,                               \
 373: 0000:                                 REMAINING.AF.BYTES%,                   \
 374: 0000:                                 AF.BLOCK.NUM%,                         \
 375: 0000:                                 AF.RECS.PER.SECTOR%,                   \
 376: 0000:                                 SECTOR.NUM%,                           \
 377: 0000:                                 RECORD.COUNT%,                         \
 378: 0000:                                 BASE%,                                 \
 379: 0000:                                 TILL.INDEX%,                           \
 380: 0000:                                 CTLR.INDEX%,                           \
 381: 0000:                                 S7.REPORT.OPTION%,                     \
 382: 0000:                                 S7.SORT.OPTION%,                       \
 383: 0000:                                 MAX.TILL.PTR%,                         \
 384: 0000:                                 MAX.CTLR.PTR%,                         \
 385: 0000:                                 NO.OF.PAGES%,                          \
 386: 0000:                                 LINES.PER.PAGE%,                       \
 387: 0000:                                 PAGE.NUMBER%,                          \
 388: 0000:                                 LINE.NUMBER%,                          \
 389: 0000:                                 FIRST.PTR%,                            \
 390: 0000:                                 LAST.PTR%
 391: 0000: 
 392: 0000:         INTEGER*4 GLOBAL        DATA.IN.AF%,                           \
 393: 0000:                                 TILL.MODEL.FLAGS%,                     \
 394: 0000:                                 CTLR.MODEL.FLAGS%,                     \
 395: 0000:                                 BIT.MASK%
 396: 0000: 
 397: 0000:         %INCLUDE AFEXT.J86
 398: 0000: 
 399: 0000: \REM
 400: 0000: \*******************************************************************************
 401: 0000: \*******************************************************************************
 402: 0000: \***
 403: 0000: \***    %INCLUDE FOR GSA AUTHORISATION FILE EXTERNAL FUNCTIONS
 404: 0000: \***
 405: 0000: \***        REFERENCE   :  AFEXT (J86)
 406: 0000: \***
 407: 0000: \***        FILE TYPE   :  Keyed
 408: 0000: \***
 409: 0000: \***    The GSA Authorisation File (EALAUTH.DAT) should not be confused with
 410: 0000: \***    the Operating System Authorisation File (ADXCSOUF.DAT).
 411: 0000: \***
 412: 0000: \***    VERSION A.              ROBERT COWEY.                       18 AUG 1992.
 413: 0000: \***    Original version created from AFEXTA.
 414: 0000: \***
 415: 0000: \***    VERSION B.              Steve Windsor                       29 Dec 1992.
 416: 0000: \***    Version incremented to keep in line with other included code           
 417: 0000: \***
 418: 0000: \***    VERSION C.              ROBERT COWEY.                       03 MAR 1994.
 419: 0000: \***    No changes to this file.
 420: 0000: \***
 421: 0000: \***    REVISION 1.6.                ROBERT COWEY.                15 JUN 2009.
 422: 0000: \***    Changes for A9C POS improvements project.
 423: 0000: \***    Used up last available three bytes of EALAUTH user data by redefining 
 424: 0000: \***    remaining AF.USER$ variable as AF.BIRTH.DATE$.
 425: 0000: \***    No changes to this file.
 426: 0000: \***
 427: 0000: \***    REVISION 1.7.                ROBERT COWEY.                22 JUN 2009.
 428: 0000: \***    Changes for A9C POS improvements project creating PSB99.286 Rv 1.8.
 429: 0000: \***    Defect 3247 - Redefined AF.BIRTH.DATE$ format within AFDEC.J86.
 430: 0000: \***    Description text change only - No code changes to this file.
 431: 0000: \***
 432: 0000: \*******************************************************************************
 433: 0000: \*******************************************************************************
 434: 0000: 
 435: 0000: 
 436: 0000: FUNCTION AF.SET EXTERNAL
 437: 0000:     INTEGER*2 AF.SET
 438: 0000: END FUNCTION
 439: 0000: 
 440: 0000: 
 441: 0000: FUNCTION READ.AF EXTERNAL
 442: 0000:     INTEGER*2 READ.AF
 443: 0000: END FUNCTION
 444: 0000: 
 445: 0000: 
 446: 0000: FUNCTION READ.AF.LOCKED EXTERNAL
 447: 0000:     INTEGER*2 READ.AF.LOCKED
 448: 0000: END FUNCTION
 449: 0000: 
 450: 0000:   
 451: 0000: FUNCTION READ.AF.ABREV EXTERNAL
 452: 0000:     INTEGER*2 READ.AF.ABREV
 453: 0000: END FUNCTION
 454: 0000: 
 455: 0000: 
 456: 0000: FUNCTION READ.AF.ABREV.LOCKED EXTERNAL
 457: 0000:     INTEGER*2 READ.AF.ABREV.LOCKED
 458: 0000: END FUNCTION
 459: 0000: 
 460: 0000:   
 461: 0000: FUNCTION WRITE.AF.UNLOCK EXTERNAL
 462: 0000:     INTEGER*2 WRITE.AF.UNLOCK
 463: 0000: END FUNCTION
 464: 0000: 
 465: 0000: 
 466: 0000: FUNCTION WRITE.AF.ABREV EXTERNAL
 467: 0000:     INTEGER*2 WRITE.AF.ABREV
 468: 0000: END FUNCTION
 469: 0000: 
 470: 0000: 
 471: 0000: FUNCTION WRITE.AF.ABREV.UNLOCK EXTERNAL
 472: 0000:     INTEGER*2 WRITE.AF.ABREV.UNLOCK
 473: 0000: END FUNCTION
 474: 0000: 
 475: 0000:         %INCLUDE PRINTEXT.J86
 476: 0000: 
 477: 0000: REM \
 478: 0000: \*******************************************************************************
 479: 0000: \*******************************************************************************
 480: 0000: \***
 481: 0000: \***    %INCLUDE FOR PRINT FILE EXTERNAL FUNCTIONS
 482: 0000: \***
 483: 0000: \***        REFERENCE   :   PRINTEX (J86)
 484: 0000: \***
 485: 0000: \***        FILE TYPE   :   Printer / Labeller
 486: 0000: \***
 487: 0000: \***    VERSION A.              ANDREW WEDGEWORTH                   09 JUL 1992.
 488: 0000: \***    Original version created from PRINTEXG.
 489: 0000: \***
 490: 0000: \***    VERSION B.              UNKNOWN.                            ?? ??? 1992.
 491: 0000: \***    Changes unknown.
 492: 0000: \***
 493: 0000: \***    VERSION C.              ROBERT COWEY.                       18 NOV 1992.
 494: 0000: \***    Defined function variables for use as return codes.
 495: 0000: \***
 496: 0000: \***    Version C               Andrew Wedgeworth                 24th May 1992
 497: 0000: \***    Condensed print function added.
 498: 0000: \***
 499: 0000: \***    Version D               Stuart WIlliam McConnachie       31st July 2000.
 500: 0000: \***    Added function for PCL printing to LaserJet.
 501: 0000: \***
 502: 0000: \***    Version E               Charles Skadorwa                   4th Apr 2008.
 503: 0000: \***    Added parameter to WRITE.CONDENSED.PRINT function to
 504: 0000: \***    enable Alliance Pharmacy Brother Laser printers to print
 505: 0000: \***    in condensed mode.
 506: 0000: \***
 507: 0000: \***    Version F           Charles Skadorwa                       2nd Mar 2016.
 508: 0000: \***    It was found that certain reports would not print when stores
 509: 0000: \***    were converted to LAN attached printing.
 510: 0000: \***
 511: 0000: \***    Added new function: WRITE.PRINT.PLUS.LF based on WRITE.PRINT.
 512: 0000: \***    This adds a Line-Feed characters to every print line.
 513: 0000: \***
 514: 0000: \*******************************************************************************
 515: 0000: \*******************************************************************************
 516: 0000: 
 517: 0000: 
 518: 0000:     FUNCTION PRINT.SET EXTERNAL
 519: 0000:         INTEGER*2 PRINT.SET
 520: 0000:     END FUNCTION
 521: 0000: 
 522: 0000: 
 523: 0000:     FUNCTION WRITE.PRINT EXTERNAL
 524: 0000:        INTEGER*2 WRITE.PRINT
 525: 0000:     END FUNCTION
 526: 0000: 
 527: 0000: 
 528: 0000:     FUNCTION WRITE.PRINT.PLUS.LF EXTERNAL                               !FCS
 529: 0000:        INTEGER*2 WRITE.PRINT.PLUS.LF                                    !FCS
 530: 0000:     END FUNCTION                                                        !FCS
 531: 0000: 
 532: 0000: 
 533: 0000:     FUNCTION WRITE.CONDENSED.PRINT (AP.STORE) EXTERNAL                 ! ECSk
 534: 0000:        INTEGER*2 WRITE.CONDENSED.PRINT
 535: 0000:     END FUNCTION
 536: 0000: 
 537: 0000: 
 538: 0000:     FUNCTION WRITE.PCL.PRINT EXTERNAL                                  ! DSWM
 539: 0000:        INTEGER*2 WRITE.PCL.PRINT                                       ! DSWM
 540: 0000:     END FUNCTION                                                       ! DSWM
 541: 0000: 
 542: 0000: 
 543: 0000:     FUNCTION WRITE.LABEL EXTERNAL
 544: 0000:         INTEGER*2 WRITE.LABEL
 545: 0000:     END FUNCTION
 546: 0000: 
 547: 0000: 
 548: 0000:         %INCLUDE PSBF01E.J86   ! Application Log
 549: 0000: REM \
 550: 0000: \*******************************************************************************
 551: 0000: \*******************************************************************************
 552: 0000: \***
 553: 0000: \***      %INCLUDE FOR EXTERNAL DEFINITION OF FUNCTION APPLICATION.LOG
 554: 0000: \***
 555: 0000: \***                      FUNCTION NUMBER   : PSBF01
 556: 0000: \***
 557: 0000: \***                    INCLUDE REFERENCE : PSBF01E.J86
 558: 0000: \*** 
 559: 0000: \***      Version B           Andrew Wedgeworth          1st July 1992
 560: 0000: \***      Three parameters which passed to the function have been removed.
 561: 0000: \***      APPLICATION.LOG has been added as a variable name (this holds the
 562: 0000: \***      return code).
 563: 0000: \***
 564: 0000: \*******************************************************************************
 565: 0000: 
 566: 0000: 
 567: 0000:    FUNCTION APPLICATION.LOG (MESSAGE.NO%,                                     \
 568: 0000:                              VAR.STRING.1$,                                   \
 569: 0000:                              VAR.STRING.2$,                                   \
 570: 0000:                              EVENT.NO%)  EXTERNAL
 571: 0000: 
 572: 0000:       INTEGER*1 EVENT.NO%
 573: 0000: 
 574: 0000:       INTEGER*2 APPLICATION.LOG,                                       \ GAW
 575: 0000:                 MESSAGE.NO%
 576: 0000: 
 577: 0000:       STRING VAR.STRING.1$,                                            \
 578: 0000:              VAR.STRING.2$
 579: 0000: 
 580: 0000:    END FUNCTION
 581: 0000: 
 582: 0000: \*******************************************************************************
 583: 0000:         %INCLUDE PSBF03E.J86   ! Display Manager
 584: 0000: REM \
 585: 0000: \*******************************************************************************
 586: 0000: \***
 587: 0000: \***    %INCLUDED CODE FOR EXTERNAL DEFINITIONS OF DISPLAY MANAGER FUNCTIONS
 588: 0000: \***     
 589: 0000: \***            REFERENCE       : PSBF03E.J86     
 590: 0000: \***     
 591: 0000: \***            DATE.WRITTEN    : 21/03/1986     
 592: 0000: \***     
 593: 0000: \***    Version B              Andrew Wedgeworth              21st July 1992
 594: 0000: \***    Remove redundant function parameters (BATCH.SCREEN.FLAG$, 
 595: 0000: \***    MODULE.NUMBER$ and OPERATOR.NUMBER$).  Function names defined as 
 596: 0000: \***    variables to hold return codes.
 597: 0000: \***
 598: 0000: \*******************************************************************************
 599: 0000: 
 600: 0000:    FUNCTION DM.INITDM (STRING.DATA$,                                   \
 601: 0000:                        INTEGER.DATA%)   EXTERNAL
 602: 0000: 
 603: 0000:       STRING      STRING.DATA$
 604: 0000: 
 605: 0000:       INTEGER*2   DM.INITDM,                                           \ BAW
 606: 0000:                   INTEGER.DATA%
 607: 0000:                          
 608: 0000:      
 609: 0000: 
 610: 0000:    END FUNCTION
 611: 0000: 
 612: 0000:    FUNCTION DM.CLRSCR (STRING.DATA$,                                   \
 613: 0000:                        INTEGER.DATA%)   EXTERNAL
 614: 0000: 
 615: 0000:       STRING      STRING.DATA$
 616: 0000: 
 617: 0000:       INTEGER*2   DM.CLRSCR,                                           \ BAW
 618: 0000:                   INTEGER.DATA%
 619: 0000: 
 620: 0000:    END FUNCTION
 621: 0000: 
 622: 0000:    FUNCTION DM.CLSDIS (STRING.DATA$,                                   \
 623: 0000:                        INTEGER.DATA%)   EXTERNAL
 624: 0000: 
 625: 0000:       STRING      STRING.DATA$
 626: 0000: 
 627: 0000:       INTEGER*2   DM.CLSDIS,                                           \ BAW
 628: 0000:                   INTEGER.DATA%
 629: 0000: 
 630: 0000:    END FUNCTION
 631: 0000: 
 632: 0000:    FUNCTION DM.OPNDIS (STRING.DATA$,                                   \
 633: 0000:                        INTEGER.DATA%)   EXTERNAL
 634: 0000: 
 635: 0000:       STRING      STRING.DATA$
 636: 0000: 
 637: 0000:       INTEGER*2   DM.OPNDIS,                                           \ BAW 
 638: 0000:                   INTEGER.DATA%
 639: 0000: 
 640: 0000:    END FUNCTION
 641: 0000: 
 642: 0000:    FUNCTION DM.DISPD  (STRING.DATA$,                                   \
 643: 0000:                        INTEGER.DATA%)   EXTERNAL
 644: 0000: 
 645: 0000:       STRING      STRING.DATA$
 646: 0000: 
 647: 0000:       INTEGER*2   DM.DISPD,                                            \ BAW
 648: 0000:                   INTEGER.DATA%
 649: 0000: 
 650: 0000:    END FUNCTION
 651: 0000: 
 652: 0000:    FUNCTION DM.RETDM  (STRING.DATA$,                                   \
 653: 0000:                        INTEGER.DATA%)   EXTERNAL
 654: 0000: 
 655: 0000:       STRING      STRING.DATA$
 656: 0000: 
 657: 0000:       INTEGER*2   DM.RETDM,                                            \ BAW 
 658: 0000:                   INTEGER.DATA%
 659: 0000: 
 660: 0000:    END FUNCTION
 661: 0000: 
 662: 0000:    FUNCTION DM.CURS   (STRING.DATA$,                                   \
 663: 0000:                        INTEGER.DATA%)   EXTERNAL
 664: 0000: 
 665: 0000:       STRING      STRING.DATA$
 666: 0000: 
 667: 0000:       INTEGER*2   DM.CURS,                                             \ BAW      
 668: 0000:                   INTEGER.DATA%
 669: 0000: 
 670: 0000:    END FUNCTION
 671: 0000: 
 672: 0000:    FUNCTION DM.RETF   (STRING.DATA$,                                   \
 673: 0000:                        INTEGER.DATA%)   EXTERNAL
 674: 0000: 
 675: 0000:       STRING      STRING.DATA$
 676: 0000: 
 677: 0000:       INTEGER*2   DM.RETF,                                             \ BAW
 678: 0000:                   INTEGER.DATA%
 679: 0000: 
 680: 0000:    END FUNCTION
 681: 0000: 
 682: 0000:    FUNCTION DM.SETF   (STRING.DATA$,                                   \
 683: 0000:                        INTEGER.DATA%)   EXTERNAL
 684: 0000: 
 685: 0000:       STRING      STRING.DATA$
 686: 0000: 
 687: 0000:       INTEGER*2   DM.SETF,                                             \ BAW
 688: 0000:                   INTEGER.DATA%
 689: 0000: 
 690: 0000:    END FUNCTION
 691: 0000: 
 692: 0000:    FUNCTION DM.POSF   (STRING.DATA$,                            \
 693: 0000:                        INTEGER.DATA%)   EXTERNAL
 694: 0000: 
 695: 0000:       STRING      STRING.DATA$
 696: 0000: 
 697: 0000:       INTEGER*2   DM.POSF,                                             \ BAW
 698: 0000:                   INTEGER.DATA%
 699: 0000: 
 700: 0000:    END FUNCTION
 701: 0000: 
 702: 0000:    FUNCTION DM.NEXTF  (STRING.DATA$,                                   \
 703: 0000:                        INTEGER.DATA%)   EXTERNAL
 704: 0000: 
 705: 0000:       STRING      STRING.DATA$
 706: 0000: 
 707: 0000:       INTEGER*2   DM.NEXTF,                                            \ BAW
 708: 0000:                   INTEGER.DATA%
 709: 0000: 
 710: 0000:    END FUNCTION
 711: 0000: 
 712: 0000:    FUNCTION DM.PUTF   (STRING.DATA$,                                   \
 713: 0000:                        INTEGER.DATA%)   EXTERNAL
 714: 0000: 
 715: 0000:       STRING      STRING.DATA$
 716: 0000: 
 717: 0000:       INTEGER*2   DM.PUTF,                                             \ BAW
 718: 0000:                   INTEGER.DATA%
 719: 0000: 
 720: 0000:    END FUNCTION
 721: 0000: 
 722: 0000:    FUNCTION DM.GETF   (STRING.DATA$,                                   \ BAW
 723: 0000:                        INTEGER.DATA%)   EXTERNAL
 724: 0000: 
 725: 0000:       STRING      STRING.DATA$
 726: 0000: 
 727: 0000:       INTEGER*2   DM.GETF,                                             \ BAW 
 728: 0000:                   INTEGER.DATA%
 729: 0000: 
 730: 0000:    END FUNCTION
 731: 0000: 
 732: 0000:    FUNCTION DM.UPDF   (STRING.DATA$,                                   \
 733: 0000:                        INTEGER.DATA%)   EXTERNAL
 734: 0000: 
 735: 0000:       STRING      STRING.DATA$
 736: 0000: 
 737: 0000:       INTEGER*2   DM.UPDF,                                             \ BAW
 738: 0000:                   INTEGER.DATA%
 739: 0000: 
 740: 0000:    END FUNCTION
 741: 0000: 
 742: 0000:    FUNCTION DM.RESF   (STRING.DATA$,                                   \
 743: 0000:                        INTEGER.DATA%)   EXTERNAL
 744: 0000: 
 745: 0000:       STRING      STRING.DATA$
 746: 0000: 
 747: 0000:       INTEGER*2   DM.RESF,                                             \ BAW
 748: 0000:                   INTEGER.DATA%
 749: 0000: 
 750: 0000:    END FUNCTION
 751: 0000: 
 752: 0000: \*******************************************************************************
 753: 0000:         %INCLUDE PSBF04E.J86   ! External Message
 754: 0000: REM \
 755: 0000: \*******************************************************************************
 756: 0000: \*******************************************************************************
 757: 0000: \***
 758: 0000: \***      %INCLUDE FOR EXTERNAL DEFINITION OF FUNCTION EXTERNAL.MESSAGE
 759: 0000: \***
 760: 0000: \***
 761: 0000: \***            FUNCTION NUMBER    : PSBF04
 762: 0000: \***
 763: 0000: \***            INCLUDE REFERENCE  : PSBF04E.J86
 764: 0000: \***
 765: 0000: \***            DATE WRITTEN       : 5th March 1986
 766: 0000: \***
 767: 0000: \***        Version B        Andrew Wedgeworth         15th July 1992
 768: 0000: \***        Redundant function parameters removed.  EXTERNAL.MESSAGE
 769: 0000: \***        is defined as a variable which holds the return code.  
 770: 0000: \***
 771: 0000: \*******************************************************************************
 772: 0000: \*******************************************************************************
 773: 0000: 
 774: 0000:    FUNCTION EXTERNAL.MESSAGE  (MESSAGE.NO%,                            \
 775: 0000:                                STRING.DATA$,                           \
 776: 0000:                                RETURN.FIELD%) EXTERNAL
 777: 0000:    ! 3 parameters deleted from here                                    ! BAW
 778: 0000: 
 779: 0000:       STRING     STRING.DATA$
 780: 0000: 
 781: 0000:       INTEGER*2  EXTERNAL.MESSAGE,                                     \ BAW
 782: 0000:                  MESSAGE.NO%,                                          \
 783: 0000:                  RETURN.FIELD%
 784: 0000: 
 785: 0000:    END FUNCTION
 786: 0000: 
 787: 0000: \*******************************************************************************
 788: 0000:         %INCLUDE PSBF12E.J86   ! Help
 789: 0000: REM \
 790: 0000: \*****************************************************************************
 791: 0000: \*****************************************************************************
 792: 0000: \***
 793: 0000: \***      %INCLUDE FOR EXTERNAL DEFINITION OF HELP FUNCTION
 794: 0000: \***
 795: 0000: \***            FUNCTION NUMBER      : PSBF12
 796: 0000: \***
 797: 0000: \***            REFERENCE            : PSBF12E.J86
 798: 0000: \***
 799: 0000: \***            DATE WRITTEN         : 17th March 1986
 800: 0000: \***
 801: 0000: \***      Version B           Andrew Wedgeworth           21st July 1992
 802: 0000: \***      Removal of redundant function parameters. HELP included as a 
 803: 0000: \***      variable to hold the return code.
 804: 0000: \***
 805: 0000: \*****************************************************************************
 806: 0000: \*****************************************************************************
 807: 0000: 
 808: 0000:    FUNCTION HELP (SCREEN.NO$) EXTERNAL
 809: 0000: 
 810: 0000:        STRING SCREEN.NO$
 811: 0000:        
 812: 0000:        INTEGER*2 HELP       
 813: 0000: 
 814: 0000:    END FUNCTION
 815: 0000: 
 816: 0000: \******************************************************************************
 817: 0000:         %INCLUDE PSBF24E.J86   ! Standard Error Detected
 818: 0000: REM \
 819: 0000: \*******************************************************************************
 820: 0000: \*******************************************************************************
 821: 0000: \***
 822: 0000: \***    %INCLUDE FOR EXTERNAL DEFINITION OF STANDARD.ERROR.DETECTED FUNCTION
 823: 0000: \***
 824: 0000: \***                      REFERENCE     : PSBF24E.J86
 825: 0000: \***
 826: 0000: \***    Version A                 Janet Smith                  13th May 1992
 827: 0000: \***
 828: 0000: \*******************************************************************************
 829: 0000: \*******************************************************************************
 830: 0000: 
 831: 0000:    FUNCTION STANDARD.ERROR.DETECTED(ERRN%,                 \
 832: 0000: 				    ERRFILE%,              \
 833: 0000: 				    ERRL%,                 \
 834: 0000: 				    ERR$)        EXTERNAL
 835: 0000: 				    
 836: 0000:           STRING    ERR$
 837: 0000: 
 838: 0000:           INTEGER*2 ERRFILE%,              \
 839: 0000: 	            ERRL%,                 \
 840: 0000: 		    STANDARD.ERROR.DETECTED
 841: 0000: 		    
 842: 0000:           INTEGER*4 ERRN%
 843: 0000: 	  		    
 844: 0000:    END FUNCTION
 845: 0000: 
 846: 0000: 
 847: 0000:         %INCLUDE PSBF08E.J86   ! Print Report Functions                ! 1.3 NM
 848: 0000: rem\
 849: 0000: \*******************************************************************************
 850: 0000: \*******************************************************************************
 851: 0000: \***
 852: 0000: \***         INCLUDE       : PRINT.REPORT external definition
 853: 0000: \***
 854: 0000: \***         REFERENCE     : PSBF08E.J86
 855: 0000: \***
 856: 0000: \***         Version A     Bruce Scriver     27th February 1986
 857: 0000: \*** 
 858: 0000: \***         Version B     Andrew Wedgeworth      7th July 1992
 859: 0000: \***         Remove redundant parameters, and add PRINT.REPORT as a variable
 860: 0000: \***         to hold the return code.
 861: 0000: \*** 
 862: 0000: \***         Version C     Andrew Wedgeworth      24th May 1993
 863: 0000: \***         Extra parameter added to enable the printing of a condensed
 864: 0000: \***         report.
 865: 0000: \***
 866: 0000: \*******************************************************************************
 867: 0000: \*******************************************************************************
 868: 0000: 
 869: 0000:    FUNCTION PRINT.REPORT (SESSION.NUMBER%,CONDENSED.PRINT.FLAG$)       \ CAW
 870: 0000:    EXTERNAL
 871: 0000: 
 872: 0000:    STRING    CONDENSED.PRINT.FLAG$                                     ! CAW
 873: 0000:  
 874: 0000:    INTEGER   PRINT.REPORT,                                             \ BAW
 875: 0000:              SESSION.NUMBER%
 876: 0000: 
 877: 0000:    END FUNCTION
 878: 0000: 
 879: 0000:         %INCLUDE DMEXTR.J86
 880: 0000: \/* TIME STAMP BLOCK **************************************************
 881: 0000: \** END OF TIME STAMP BLOCK ******************************************/
 882: 0000:  REM  INCLUDE FILE FOR  DISPLAY MANAGER EXTERNAL FUNCTIONS FOR CB80  June 7/82
 883: 0000:  REM  IR91470 01 10 91  LAB G53  marked for EFT
 884: 0000:         DEF CLRSCR EXTERNAL             REM Clear screen for Display Manager
 885: 0000:         INTEGER CLRSCR
 886: 0000:         FEND
 887: 0000:         DEF CLSDIS EXTERNAL
 888: 0000:         INTEGER CLSDIS
 889: 0000:         FEND                            REM Close Display Manager
 890: 0000:         DEF DISPD(I%) EXTERNAL          REM Display a display.
 891: 0000:         INTEGER DISPD
 892: 0000:         FEND
 893: 0000:         DEF CURS(X$) EXTERNAL           REM turn on/off cursor visibility.
 894: 0000:         STRING CURS
 895: 0000:         FEND
 896: 0000:         DEF ENDF EXTERNAL               REM ENDF method of return.
 897: 0000:         INTEGER ENDF
 898: 0000:         FEND
 899: 0000:         DEF GETF EXTERNAL               REM GETF get data from a field
 900: 0000:         STRING GETF
 901: 0000:         FEND
 902: 0000:         DEF INITDM(A$) EXTERNAL         REM INITIALIZE Display Manager
 903: 0000:         INTEGER INITDM
 904: 0000:         FEND
 905: 0000:         DEF NXTF(I%)  EXTERNAL          REM NXTF Go to Next Field
 906: 0000:         INTEGER NXTF
 907: 0000:         FEND
 908: 0000:         DEF POSF(I%) EXTERNAL           REM POSTION on Field
 909: 0000:         INTEGER POSF
 910: 0000:         FEND
 911: 0000: 
 912: 0000:         DEF OPNDIS(A$) EXTERNAL         REM OPEN DISPLAY FILE
 913: 0000:         INTEGER OPNDIS
 914: 0000:         FEND
 915: 0000:         DEF PUTF(A$)  EXTERNAL          REM PUT data to Field
 916: 0000:         INTEGER PUTF
 917: 0000:         FEND
 918: 0000:         DEF RESF(I%)  EXTERNAL          REM RESUME field
 919: 0000:         STRING RESF
 920: 0000:         FEND
 921: 0000: 
 922: 0000:         DEF RETDM  EXTERNAL             REM RETURN Display Mgr Characteristics
 923: 0000:         STRING RETDM
 924: 0000:         FEND
 925: 0000:         DEF SETF(A$) EXTERNAL           REM SET Field  video attributes
 926: 0000:         STRING SETF
 927: 0000:         FEND
 928: 0000:         DEF UPDF  EXTERNAL                      REM UPDATE Field data
 929: 0000:         STRING UPDF
 930: 0000:         FEND
 931: 0000: 
 932: 0000:         DEF RETF EXTERNAL
 933: 0000:         STRING RETF
 934: 0000:         FEND
 935: 0000:    REM  END OF INCLUDE FILE FOR DISPLAY MANAGER CALLS FOR CB80
 936: 0000: 
 937: 0000:         %INCLUDE CSORTDEF.J86   ! Assembler Sort
 938: 0000: FUNCTION CSORT(ARPTR%, ELEMENTS%) EXTERNAL
 939: 0000:     INTEGER*4 ARPTR%, ELEMENTS%, CSORT
 940: 0000: END FUNCTION
 941: 0000: 
 942: 0000: 
 943: 0000: \******************************************************************************
 944: 0000: \***                                                                          *
 945: 0000: \***    FUNCTION        :       DISPLAY.SCREEN                                *
 946: 0000: \***                                                                          *
 947: 0000: \******************************************************************************
 948: 0000: \***                                                                          *
 949: 0000: \***    Displays the required screen                                          *
 950: 0000: \***                                                                          *
 951: 0000: \******************************************************************************
 952: 0000: 
 953: 0000:         FUNCTION DISPLAY.SCREEN(SCREEN.NUMBER%) EXTERNAL
 954: 0000: 
 955: 0000:         INTEGER*2                               SCREEN.NUMBER%
 956: 0000: 
 957: 0000:         END FUNCTION
 958: 0000: 
 959: 0000: \******************************************************************************
 960: 0000: \***                                                                          *
 961: 0000: \***    FUNCTION        :       SCREEN.HELP                                   *
 962: 0000: \***                                                                          *
 963: 0000: \******************************************************************************
 964: 0000: \***                                                                          *
 965: 0000: \***    Displays the required HELP screen                                     *
 966: 0000: \***                                                                          *
 967: 0000: \******************************************************************************
 968: 0000: 
 969: 0000:         FUNCTION SCREEN.HELP(SCREEN.NUMBER%) EXTERNAL
 970: 0000: 
 971: 0000:         STRING                                  SCREEN.NUMBER$
 972: 0000: 
 973: 0000:         INTEGER*2                               SCREEN.NUMBER%
 974: 0000: 
 975: 0000:         END FUNCTION
 976: 0000: 
 977: 0000: \******************************************************************************
 978: 0000: \***                                                                          *
 979: 0000: \***    FUNCTION        :       VALID.REPORT.OPTION                           *
 980: 0000: \***                                                                          *
 981: 0000: \******************************************************************************
 982: 0000: \***                                                                          *
 983: 0000: \***    Checks that the report option is valid                                *
 984: 0000: \***                                                                          *
 985: 0000: \******************************************************************************
 986: 0000: 
 987: 0000:         FUNCTION VALID.REPORT.OPTION PUBLIC
 988: 0024: 
 989: 0024:         INTEGER*1                               VALID.REPORT.OPTION
 990: 0024: 
 991: 0024:         VALID.REPORT.OPTION = FALSE
 992: 0036: 
 993: 0036:         IF REPORT.OPTION$ >= "1" AND                                   \
 994: 0088:            REPORT.OPTION$ <= "3" THEN                                  \
 995: 0088:            VALID.REPORT.OPTION = TRUE
 996: 009a: 
 997: 009a:         END FUNCTION
 998: 00b1: 
 999: 00b1: \******************************************************************************
1000: 00b1: \***                                                                          *
1001: 00b1: \***    FUNCTION        :       VALID.SORT.OPTION                             *
1002: 00b1: \***                                                                          *
1003: 00b1: \******************************************************************************
1004: 00b1: \***                                                                          *
1005: 00b1: \***    Checks that the sort option is valid                                  *
1006: 00b1: \***                                                                          *
1007: 00b1: \******************************************************************************
1008: 00b1: 
1009: 00b1:         FUNCTION VALID.SORT.OPTION PUBLIC
1010: 00d5: 
1011: 00d5:         INTEGER*1                               VALID.SORT.OPTION
1012: 00d5: 
1013: 00d5:         VALID.SORT.OPTION = FALSE
1014: 00e7: 
1015: 00e7:         IF SORT.OPTION$ >= "1" AND                                     \
1016: 0139:            SORT.OPTION$ <= "2" THEN                                    \
1017: 0139:            VALID.SORT.OPTION = TRUE
1018: 014b: 
1019: 014b:         END FUNCTION
1020: 0162: 
1021: 0162: \******************************************************************************
1022: 0162: \******************************************************************************
1023: 0162: \***                                                                          *
1024: 0162: \***    S T A R T  O F  M A I N L I N E  C O D E                              *
1025: 0162: \***                                                                          *
1026: 0162: \******************************************************************************
1027: 0162: \******************************************************************************
1028: 0162: 
1029: 0162:         SUB PSB9901 PUBLIC
1030: 0186: 
1031: 0186:         ON ERROR GOTO ERROR.DETECTED
1032: 019b: 
1033: 019b:         CARRIAGE.RETURN$ = CHR$(13)
1034: 01b5:         LINE.FEED$       = CHR$(10)
1035: 01cf:         FORM.FEED$       = CHR$(12)
1036: 01e9:         !CONDENSE.ON$     = CHR$(15)                                  ! 1.3 NM
1037: 01e9:         !CONDENSE.OFF$    = CHR$(18)                                  ! 1.3 NM
1038: 01e9:         PAD.CHAR$        = CHR$(32)
1039: 0203: 
1040: 0203:         MAX.TABLE.SIZE%     = 1000                                      ! DMW
1041: 0214:         AF.RECS.PER.SECTOR% = 512 / AF.RECL%
1042: 0234:         AF.BLOCK.SIZE%      = 32256
1043: 0245:         AF.PTR%             = 0
1044: 0256: 
1045: 0256:         S% = 7
1046: 0267: 
1047: 0267:         CALL DISPLAY.SCREEN(7)
1048: 0286: 
1049: 0286:         SORT.OPTION$   = "1"
1050: 029d:         REPORT.OPTION$ = "1"
1051: 02b4: 
1052: 02b4:         GOSUB RESTORE.FIELDS.07
1053: 02c6: 
1054: 02c6:         EXIT.KEY.PRESSED(7) = FALSE
1055: 02ee: 
1056: 02ee:         WHILE NOT EXIT.KEY.PRESSED(7)
1057: 02f8:               GOSUB GET.SORT.OPTION.07
1058: 030a:         WEND
1059: 0328: 
1060: 0328:         EXIT SUB
1061: 0333: 
1062: 0333: \******************************************************************************
1063: 0333: \******************************************************************************
1064: 0333: \***                                                                          *
1065: 0333: \***    S T A R T  O F  S U B R O U T I N E S                                 *
1066: 0333: \***                                                                          *
1067: 0333: \******************************************************************************
1068: 0333: \******************************************************************************
1069: 0333: 
1070: 0333: \******************************************************************************
1071: 0333: \***                                                                          *
1072: 0333: \***    SUBROUTINE      :       GET.SORT.OPTION.07                            *
1073: 0333: \***                                                                          *
1074: 0333: \******************************************************************************
1075: 0333: \***                                                                          *
1076: 0333: \***    Input routine for the sort option from the report operators menu      *
1077: 0333: \***                                                                          *
1078: 0333: \******************************************************************************
1079: 0333: 
1080: 0333:         GET.SORT.OPTION.07:
1081: 0343: 
1082: 0343:         CURSOR.POSITION% = S7.SORT.OPTION%
1083: 0359:         GOSUB PUT.CURSOR.IN.FIELD
1084: 036b: 
1085: 036b:         EXIT.KEY.PRESSED(7)     = FALSE
1086: 0393:         VALID.SORT.OPTION.FOUND = FALSE
1087: 03a9: 
1088: 03a9:         GOSUB GET.INPUT
1089: 03bb: 
1090: 03bb:         WHILE NOT (EXIT.KEY.PRESSED(7) OR                              \
1091: 03c6:                   VALID.SORT.OPTION.FOUND)
1092: 03c6: 
1093: 03c6:               SORT.OPTION$ = F03.RETURNED.STRING$
1094: 03e4: 
1095: 03e4:               IF NOT (FUNCTION.KEY% = ENTER.KEY% OR                    \
1096: 0470:                  FUNCTION.KEY% = TAB.KEY% OR                           \
1097: 0470:                  FUNCTION.KEY% = END.KEY% OR                           \
1098: 0470:                  FUNCTION.KEY% = HELP.KEY% OR                          \
1099: 0470:                  FUNCTION.KEY% = QUIT.KEY% OR                          \
1100: 0470:                  FUNCTION.KEY% = ESC.KEY%) THEN                        \
1101: 0470:               BEGIN
1102: 0470:                  DISPLAY.MESSAGE.NUMBER% = 1
1103: 0481:                  GOSUB DISPLAY.MESSAGE
1104: 0493:                  GOSUB RESUME.INPUT
1105: 04a8:               ENDIF                                                    \
1106: 04a8:               ELSE                                                     \
1107: 04b0:               IF FUNCTION.KEY% = QUIT.KEY% THEN                        \
1108: 04c8:                  EXIT.KEY.PRESSED(7) = TRUE                            \
1109: 04f3:               ELSE                                                     \
1110: 04fb:               IF FUNCTION.KEY% = ESC.KEY% THEN                         \
1111: 0513:               BEGIN
1112: 0513:                  CHAIN.TO.PROG$ = "PSB50"
1113: 052a:                  PSBCHN.MENCON  = "000000"
1114: 0541:                  GOSUB CHAIN.TO.CALLER
1115: 0556:               ENDIF                                                    \
1116: 0556:               ELSE                                                     \
1117: 055e:               IF FUNCTION.KEY% = HELP.KEY% THEN                        \
1118: 0576:               BEGIN
1119: 0576:                  CALL SCREEN.HELP(7)
1120: 0595:                  GOSUB RESTORE.FIELDS.07
1121: 05a7: 
1122: 05a7:                  CURSOR.POSITION% = S7.SORT.OPTION%
1123: 05bd:                  GOSUB PUT.CURSOR.IN.FIELD
1124: 05cf: 
1125: 05cf:                  GOSUB GET.INPUT
1126: 05e4:               ENDIF                                                    \
1127: 05e4:               ELSE                                                     \
1128: 05ec:               BEGIN
1129: 05ec:                  IF VALID.SORT.OPTION THEN                             \
1130: 05fc:                     VALID.SORT.OPTION.FOUND = TRUE                     \
1131: 0614:                  ELSE                                                  \
1132: 061c:                  BEGIN
1133: 061c:                     ! B003 Invalid selection number
1134: 061c:                     DISPLAY.MESSAGE.NUMBER% = 3
1135: 062d:                     GOSUB DISPLAY.MESSAGE
1136: 063f:                     GOSUB RESUME.INPUT
1137: 0651:                  ENDIF
1138: 0659:               ENDIF
1139: 0661:         WEND
1140: 0688: 
1141: 0688:         IF VALID.SORT.OPTION.FOUND AND                                 \
1142: 06b3:            NOT EXIT.KEY.PRESSED(7) THEN                                \
1143: 06b3:         BEGIN
1144: 06b3:            GOSUB CLEAR.MESSAGE
1145: 06c5: 
1146: 06c5:            STRING.DATA$ = SORT.OPTION$
1147: 06e3:            GOSUB SET.FIELD
1148: 06f5: 
1149: 06f5:            IF FUNCTION.KEY% = TAB.KEY% OR                              \
1150: 0729:               FUNCTION.KEY% = END.KEY% THEN                            \
1151: 0729:            BEGIN
1152: 0729:               GOSUB GET.REPORT.OPTION.07
1153: 073d:            ENDIF                                                       \
1154: 073d:            ELSE                                                        \
1155: 0745:            IF FUNCTION.KEY% = ENTER.KEY% THEN                          \
1156: 075d:            BEGIN
1157: 075d:               GOSUB CHECK.FIELDS.07
1158: 076f:            ENDIF
1159: 0777: 
1160: 0777:         ENDIF
1161: 077f: 
1162: 077f:         RETURN
1163: 078f: 
1164: 078f: \******************************************************************************
1165: 078f: \***                                                                          *
1166: 078f: \***    SUBROUTINE      :       GET.REPORT.OPTION.07                          *
1167: 078f: \***                                                                          *
1168: 078f: \******************************************************************************
1169: 078f: \***                                                                          *
1170: 078f: \***    Input routine for the report option from the report operators menu    *
1171: 078f: \***                                                                          *
1172: 078f: \******************************************************************************
1173: 078f: 
1174: 078f:         GET.REPORT.OPTION.07:
1175: 079f: 
1176: 079f:         CURSOR.POSITION% = S7.REPORT.OPTION%
1177: 07b5:         GOSUB PUT.CURSOR.IN.FIELD
1178: 07c7: 
1179: 07c7:         EXIT.KEY.PRESSED(7)       = FALSE
1180: 07ef:         VALID.REPORT.OPTION.FOUND = FALSE
1181: 0805: 
1182: 0805:         GOSUB GET.INPUT
1183: 0817: 
1184: 0817:         WHILE NOT (EXIT.KEY.PRESSED(7) OR                              \
1185: 0822:                   VALID.REPORT.OPTION.FOUND)
1186: 0822: 
1187: 0822:               REPORT.OPTION$ = F03.RETURNED.STRING$
1188: 0840: 
1189: 0840:               IF NOT (FUNCTION.KEY% = ENTER.KEY% OR                    \
1190: 08cc:                  FUNCTION.KEY% = BTAB.KEY% OR                          \
1191: 08cc:                  FUNCTION.KEY% = HOME.KEY% OR                          \
1192: 08cc:                  FUNCTION.KEY% = HELP.KEY% OR                          \
1193: 08cc:                  FUNCTION.KEY% = QUIT.KEY% OR                          \
1194: 08cc:                  FUNCTION.KEY% = ESC.KEY%) THEN                        \
1195: 08cc:               BEGIN
1196: 08cc:                  DISPLAY.MESSAGE.NUMBER% = 1
1197: 08dd:                  GOSUB DISPLAY.MESSAGE
1198: 08ef:                  GOSUB RESUME.INPUT
1199: 0904:               ENDIF                                                    \
1200: 0904:               ELSE                                                     \
1201: 090c:               IF FUNCTION.KEY% = QUIT.KEY% THEN                        \
1202: 0924:                  EXIT.KEY.PRESSED(7) = TRUE                            \
1203: 094f:               ELSE                                                     \
1204: 0957:               IF FUNCTION.KEY% = ESC.KEY% THEN                         \
1205: 096f:               BEGIN
1206: 096f:                  CHAIN.TO.PROG$ = "PSB50"
1207: 0986:                  PSBCHN.MENCON  = "000000"
1208: 099d:                  GOSUB CHAIN.TO.CALLER
1209: 09b2:               ENDIF                                                    \
1210: 09b2:               ELSE                                                     \
1211: 09ba:               IF FUNCTION.KEY% = HELP.KEY% THEN                        \
1212: 09d2:               BEGIN
1213: 09d2:                  CALL SCREEN.HELP(7)
1214: 09f1:                  GOSUB RESTORE.FIELDS.07
1215: 0a03: 
1216: 0a03:                  CURSOR.POSITION% = S7.REPORT.OPTION%
1217: 0a19:                  GOSUB PUT.CURSOR.IN.FIELD
1218: 0a2b: 
1219: 0a2b:                  GOSUB GET.INPUT
1220: 0a40:               ENDIF                                                    \
1221: 0a40:               ELSE                                                     \
1222: 0a48:               BEGIN
1223: 0a48:                  IF VALID.REPORT.OPTION THEN                           \
1224: 0a58:                     VALID.REPORT.OPTION.FOUND = TRUE                   \
1225: 0a70:                  ELSE                                                  \
1226: 0a78:                  BEGIN
1227: 0a78:                     ! B003 Invalid selection number
1228: 0a78:                     DISPLAY.MESSAGE.NUMBER% = 3
1229: 0a89:                     GOSUB DISPLAY.MESSAGE
1230: 0a9b:                     GOSUB RESUME.INPUT
1231: 0aad:                  ENDIF
1232: 0ab5:               ENDIF
1233: 0abd:         WEND
1234: 0ae4: 
1235: 0ae4:         IF VALID.REPORT.OPTION.FOUND AND                               \
1236: 0b0f:            NOT EXIT.KEY.PRESSED(7) THEN                                \
1237: 0b0f:         BEGIN
1238: 0b0f:            GOSUB CLEAR.MESSAGE
1239: 0b21: 
1240: 0b21:            STRING.DATA$ = REPORT.OPTION$
1241: 0b3f:            GOSUB SET.FIELD
1242: 0b51: 
1243: 0b51:            IF FUNCTION.KEY% = BTAB.KEY% OR                             \
1244: 0b85:               FUNCTION.KEY% = HOME.KEY% THEN                           \
1245: 0b85:            BEGIN
1246: 0b85:               GOSUB GET.SORT.OPTION.07
1247: 0b99:            ENDIF                                                       \
1248: 0b99:            ELSE                                                        \
1249: 0ba1:            IF FUNCTION.KEY% = ENTER.KEY% THEN                          \
1250: 0bb9:            BEGIN
1251: 0bb9:               GOSUB CHECK.FIELDS.07
1252: 0bcb:            ENDIF
1253: 0bd3: 
1254: 0bd3:         ENDIF
1255: 0bdb: 
1256: 0bdb:         RETURN
1257: 0beb: 
1258: 0beb: \******************************************************************************
1259: 0beb: \***                                                                          *
1260: 0beb: \***    SUBROUTINE      :       RESTORE.FIELDS.07                             *
1261: 0beb: \***                                                                          *
1262: 0beb: \******************************************************************************
1263: 0beb: \***                                                                          *
1264: 0beb: \***    Redisplay all fields on the report operators screen                   *
1265: 0beb: \***                                                                          *
1266: 0beb: \******************************************************************************
1267: 0beb: 
1268: 0beb:         RESTORE.FIELDS.07:
1269: 0bfb: 
1270: 0bfb:         CURSOR.STATE$ = CURSOR.OFF$
1271: 0c19:         GOSUB SET.CURSOR.STATE
1272: 0c2b: 
1273: 0c2b:         CURSOR.POSITION% = S7.SORT.OPTION%
1274: 0c41:         GOSUB PUT.CURSOR.IN.FIELD
1275: 0c53: 
1276: 0c53:         STRING.DATA$ = SORT.OPTION$
1277: 0c71:         GOSUB SET.FIELD
1278: 0c83: 
1279: 0c83:         CURSOR.POSITION% = S7.REPORT.OPTION%
1280: 0c99:         GOSUB PUT.CURSOR.IN.FIELD
1281: 0cab: 
1282: 0cab:         STRING.DATA$ = REPORT.OPTION$
1283: 0cc9:         GOSUB SET.FIELD
1284: 0cdb: 
1285: 0cdb:         CURSOR.STATE$ = CURSOR.ON$
1286: 0cf9:         GOSUB SET.CURSOR.STATE
1287: 0d0b: 
1288: 0d0b:         RETURN
1289: 0d1b: 
1290: 0d1b: \******************************************************************************
1291: 0d1b: \***                                                                          *
1292: 0d1b: \***    SUBROUTINE      :       CHECK.FIELDS.07                               *
1293: 0d1b: \***                                                                          *
1294: 0d1b: \******************************************************************************
1295: 0d1b: \***                                                                          *
1296: 0d1b: \***    Validate all input fields for the report operators screen             *
1297: 0d1b: \***                                                                          *
1298: 0d1b: \******************************************************************************
1299: 0d1b: 
1300: 0d1b:         CHECK.FIELDS.07:
1301: 0d2b: 
1302: 0d2b:         IF NOT VALID.REPORT.OPTION THEN                                \
1303: 0d3b:         BEGIN
1304: 0d3b:            DISPLAY.MESSAGE.NUMBER% = 3
1305: 0d4c:            GOSUB DISPLAY.MESSAGE
1306: 0d5e: 
1307: 0d5e:            GOSUB GET.REPORT.OPTION.07
1308: 0d70: 
1309: 0d70:            GOTO CHECK.FIELDS.07.FAILED
1310: 0d7a:         ENDIF
1311: 0d82: 
1312: 0d82:         IF NOT VALID.SORT.OPTION THEN                                  \
1313: 0d92:         BEGIN
1314: 0d92:            DISPLAY.MESSAGE.NUMBER% = 3
1315: 0da3:            GOSUB DISPLAY.MESSAGE
1316: 0db5: 
1317: 0db5:            GOSUB GET.SORT.OPTION.07
1318: 0dc7: 
1319: 0dc7:            GOTO CHECK.FIELDS.07.FAILED
1320: 0dd1:         ENDIF
1321: 0dd9: 
1322: 0dd9:         GOSUB PRODUCE.OPERATORS.REPORT
1323: 0deb: 
1324: 0deb:         CHECK.FIELDS.07.FAILED:
1325: 0dfb: 
1326: 0dfb:         RETURN
1327: 0e0b: 
1328: 0e0b: \******************************************************************************
1329: 0e0b: \***                                                                          *
1330: 0e0b: \***    SUBROUTINE      :       PRODUCE.OPERATORS.REPORT                      *
1331: 0e0b: \***                                                                          *
1332: 0e0b: \******************************************************************************
1333: 0e0b: \***                                                                          *
1334: 0e0b: \***    Produce a report of all operators                                     *
1335: 0e0b: \***                                                                          *
1336: 0e0b: \******************************************************************************
1337: 0e0b: 
1338: 0e0b:         PRODUCE.OPERATORS.REPORT:
1339: 0e1b: 
1340: 0e1b:         DISPLAY.MESSAGE.NUMBER% = 409
1341: 0e2c:         GOSUB DISPLAY.MESSAGE
1342: 0e3e: 
1343: 0e3e:         AF.PTR% = 0
1344: 0e4f: 
1345: 0e4f:         GOSUB CREATE.AF.TABLE
1346: 0e61: 
1347: 0e61:         IF SORT.OPTION$ = "1" THEN                                     \
1348: 0e7f:         BEGIN
1349: 0e7f: !           DISPLAY.HEADINGS$  = "OP ID    NAME                 "      ! 1.4 TT
1350: 0e7f: 
1351: 0e7f:            DISPLAY.HEADINGS1$  = "OPERATOR                      "      ! 1.4 TT
1352: 0e96: 
1353: 0e96:            DISPLAY.HEADINGS2$  = "   ID            NAME         "      ! 1.4 TT
1354: 0ead: 
1355: 0ead:            DISPLAY.HEADINGS3$  = "                              "      ! 1.4 TT
1356: 0ec4: 
1357: 0ec4:            DISPLAY.UNDERLINE$  = "-------- -------------------- "
1358: 0ede:         ENDIF                                                          \
1359: 0ede:         ELSE                                                           \
1360: 0ee6:         IF SORT.OPTION$ = "2" THEN                                     \
1361: 0f04:         BEGIN
1362: 0f04: !           DISPLAY.HEADINGS$  = "NAME                 OP ID    "      ! 1.4 TT
1363: 0f04: 
1364: 0f04: !           DISPLAY.UNDERLINE$ = "-------------------- -------- "      ! 1.4 TT
1365: 0f04:            DISPLAY.HEADINGS1$  = "                     OPERATOR "      ! 1.4 TT
1366: 0f1b: 
1367: 0f1b:            DISPLAY.HEADINGS2$  = "        NAME            ID    "      ! 1.4 TT
1368: 0f32: 
1369: 0f32:            DISPLAY.HEADINGS3$  = "                              "      ! 1.4 TT
1370: 0f49: 
1371: 0f49:            DISPLAY.UNDERLINE$  = "-------------------- -------- "      ! 1.4 TT
1372: 0f60:         ENDIF
1373: 0f68: 
1374: 0f68: !       IF REPORT.OPTION$ = "1" OR REPORT.OPTION$ = "2" THEN BEGIN     ! 1.3 NM
1375: 0f68: !        DISPLAY.HEADINGS$  = DISPLAY.HEADINGS$ +  "STAFF NO "         ! 1.4 TT
1376: 0f68: !        DISPLAY.UNDERLINE$ = DISPLAY.UNDERLINE$ + "-------- "         ! 1.4 TT
1377: 0f68:         DISPLAY.HEADINGS1$  = DISPLAY.HEADINGS1$ +  " STAFF   "        ! 1.4 TT
1378: 0f8d:         DISPLAY.HEADINGS2$  = DISPLAY.HEADINGS2$ +  "   NO    "        ! 1.4 TT
1379: 0fb2:         DISPLAY.HEADINGS3$  = DISPLAY.HEADINGS3$ +  "         "        ! 1.4 TT
1380: 0fd7:         DISPLAY.UNDERLINE$  = DISPLAY.UNDERLINE$ +  "-------- "        ! 1.4 TT
1381: 0ffc: !       ENDIF                                                          ! 1.3 NM
1382: 0ffc: 
1383: 0ffc: !        DISPLAY.HEADINGS$  = DISPLAY.HEADINGS$ +  "BTC "              ! 1.4 TT
1384: 0ffc:         DISPLAY.HEADINGS1$  = DISPLAY.HEADINGS1$ +  " B  "             ! 1.4 TT
1385: 1021:         DISPLAY.HEADINGS2$  = DISPLAY.HEADINGS2$ +  " T  "             ! 1.4 TT
1386: 1046:         DISPLAY.HEADINGS3$  = DISPLAY.HEADINGS3$ +  " C  "             ! 1.4 TT
1387: 106b: 
1388: 106b: !        DISPLAY.UNDERLINE$  = DISPLAY.UNDERLINE$ +  "--- "            ! 1.4 TT
1389: 106b: 
1390: 106b:         DISPLAY.UNDERLINE$  = DISPLAY.UNDERLINE$ +  " -  "
1391: 1090: 
1392: 1090:         IF REPORT.OPTION$ = "1" THEN                                   \
1393: 10b1:         BEGIN
1394: 10b1:            DISPLAY.TITLE$     = "CONTROLLER OPERATORS REPORT"
1395: 10c8: 
1396: 10c8: !           DISPLAY.HEADINGS$  = DISPLAY.HEADINGS$ +                    \ 1.4 TT
1397: 10c8: !                                CTLR.HEADINGS$                           1.4 TT
1398: 10c8: 
1399: 10c8: !           DISPLAY.UNDERLINE$ = DISPLAY.UNDERLINE$ +                   \ 1.4 TT
1400: 10c8: !                                STRING$(MAX.CTLR.PTR%,"--- ")            1.4 TT
1401: 10c8: 
1402: 10c8:            DISPLAY.HEADINGS1$  = DISPLAY.HEADINGS1$ +                  \ 1.4 TT
1403: 10f4:                                  CTLR.HEADINGS1$                       ! 1.4 TT
1404: 10f4:            DISPLAY.HEADINGS2$  = DISPLAY.HEADINGS2$ +                  \ 1.4 TT
1405: 1120:                                  CTLR.HEADINGS2$
1406: 1120:            DISPLAY.HEADINGS3$  = DISPLAY.HEADINGS3$ +                  \ 1.4 TT
1407: 114c:                                  CTLR.HEADINGS3$                       ! 1.4 TT
1408: 114c: 
1409: 114c:            DISPLAY.UNDERLINE$ = DISPLAY.UNDERLINE$ +                   \ 1.4 TT
1410: 1180:                                 STRING$(MAX.CTLR.PTR%,"-  ")           ! 1.4 TT
1411: 1180:         ENDIF                                                          \
1412: 1180:         ELSE                                                           \
1413: 1188:         IF REPORT.OPTION$ = "2" THEN                                   \
1414: 11a9:         BEGIN
1415: 11a9:            DISPLAY.TITLE$     = "   TILL OPERATORS REPORT   "
1416: 11c0: 
1417: 11c0: !           DISPLAY.HEADINGS$  = DISPLAY.HEADINGS$ +                    \ 1.4 TT
1418: 11c0: !                                TILL.HEADINGS$                         ! 1.4 TT
1419: 11c0: 
1420: 11c0: !           DISPLAY.UNDERLINE$ = DISPLAY.UNDERLINE$ +                   \ 1.4 TT
1421: 11c0: !                                STRING$(MAX.TILL.PTR%,"--- ")          ! 1.4 TT
1422: 11c0: 
1423: 11c0:            DISPLAY.HEADINGS1$  = DISPLAY.HEADINGS1$ +                  \ 1.4 TT
1424: 11ec:                                  TILL.HEADINGS1$                       ! 1.4 TT
1425: 11ec: 
1426: 11ec:            DISPLAY.HEADINGS2$  = DISPLAY.HEADINGS2$ +                  \ 1.4 TT
1427: 1218:                                  TILL.HEADINGS2$                       ! 1.4 TT
1428: 1218: 
1429: 1218:            DISPLAY.HEADINGS3$  = DISPLAY.HEADINGS3$ +                  \ 1.4 TT
1430: 1244:                                  TILL.HEADINGS3$                       ! 1.4 TT
1431: 1244: 
1432: 1244:            DISPLAY.UNDERLINE$ = DISPLAY.UNDERLINE$ +                   \ 1.4 TT
1433: 1278:                                 STRING$(MAX.TILL.PTR%,"-  ")           ! 1.4 TT
1434: 1278:         ENDIF                                                          \
1435: 1278:         ELSE                                                           \
1436: 1280:         IF REPORT.OPTION$ = "3" THEN                                   \
1437: 12a1:         BEGIN
1438: 12a1:            REPORT.DATE$       = MID$(DATE$,5,2) + "/" +                \
1439: 1320:                                 MID$(DATE$,3,2) + "/" +                \
1440: 1320:                                 MID$(DATE$,1,2)
1441: 1320: 
1442: 1320:            REPORT.TIME$       = MID$(TIME$,1,2) + ":" +                \
1443: 1377:                                 MID$(TIME$,3,2)
1444: 1377: 
1445: 1377:            DISPLAY.TITLE$     = "R020" +                               \
1446: 13fb:                                 STRING$(30,PAD.CHAR$) +                \
1447: 13fb:                                 "OPERATORS REPORT" +                   \
1448: 13fb:                                 STRING$(20,PAD.CHAR$) +                \
1449: 13fb:                                 REPORT.DATE$ + "  " +                  \
1450: 13fb:                                 REPORT.TIME$ +                         \
1451: 13fb:                                 STRING$(10,PAD.CHAR$)
1452: 13fb: 
1453: 13fb: !           DISPLAY.HEADINGS$  = DISPLAY.HEADINGS$ +                    \ 1.4 TT
1454: 13fb: !                                TILL.HEADINGS$ +                       \ 1.4 TT
1455: 13fb: !                                CTLR.HEADINGS$                         ! 1.4 TT
1456: 13fb: 
1457: 13fb:            DISPLAY.HEADINGS1$  = DISPLAY.HEADINGS1$ +                  \  1.4 TT
1458: 1432:                                  TILL.HEADINGS1$ +                     \  1.4 TT
1459: 1432:                                  CTLR.HEADINGS1$                       !  1.4 TT
1460: 1432: 
1461: 1432:            DISPLAY.HEADINGS2$  = DISPLAY.HEADINGS2$ +                  \  1.4 TT
1462: 1469:                                  TILL.HEADINGS2$ +                     \  1.4 TT
1463: 1469:                                  CTLR.HEADINGS2$                       !  1.4 TT
1464: 1469: 
1465: 1469:            DISPLAY.HEADINGS3$  = DISPLAY.HEADINGS3$ +                  \  1.4 TT
1466: 14a0:                                  TILL.HEADINGS3$ +                     \  1.4 TT
1467: 14a0:                                  CTLR.HEADINGS3$                       !  1.4 TT
1468: 14a0: 
1469: 14a0: !           DISPLAY.UNDERLINE$ = DISPLAY.UNDERLINE$ +                   \ 1.4 TT
1470: 14a0: !                                STRING$(MAX.TILL.PTR%,"--- ") +        \ 1.4 TT
1471: 14a0: !                                STRING$(MAX.CTLR.PTR%,"--- ")          ! 1.4 TT
1472: 14a0: 
1473: 14a0:            DISPLAY.UNDERLINE$ = DISPLAY.UNDERLINE$ +                   \  1.4 TT
1474: 14ec:                                 STRING$(MAX.TILL.PTR%,"-  ") +        \   1.4 TT
1475: 14ec:                                 STRING$(MAX.CTLR.PTR%,"-  ")           !  1.4 TT
1476: 14ec:         ENDIF
1477: 14f4: 
1478: 14f4:         IF REPORT.OPTION$ = "1" OR                                     \
1479: 1546:            REPORT.OPTION$ = "2" THEN                                   \
1480: 1546:         BEGIN
1481: 1546:            GOSUB DISPLAY.REPORT
1482: 155a:         ENDIF                                                          \
1483: 155a:         ELSE                                                           \
1484: 1562:         IF REPORT.OPTION$ = "3" THEN                                   \
1485: 1580:         BEGIN
1486: 1580:            GOSUB PRINT.OP.REPORT                                       ! 1.3 NM
1487: 1592:         ENDIF
1488: 159a: 
1489: 159a:         RETURN
1490: 15aa: 
1491: 15aa: \******************************************************************************
1492: 15aa: \***                                                                          *
1493: 15aa: \***    SUBROUTINE      :       CREATE.AF.TABLE                               *
1494: 15aa: \***                                                                          *
1495: 15aa: \******************************************************************************
1496: 15aa: \***                                                                          *
1497: 15aa: \***    Produce a table containing all the records from the EALAUTH file      *
1498: 15aa: \***                                                                          *
1499: 15aa: \******************************************************************************
1500: 15aa: 
1501: 15aa:         CREATE.AF.TABLE:
1502: 15ba: 
1503: 15ba:         DIM AF.TABLE$(MAX.TABLE.SIZE%)
1504: 15ee: 
1505: 15ee:         CLOSE AF.SESS.NUM%
1506: 1602: 
1507: 1602:         CURRENT.REPORT.NUM% = AF.REPORT.NUM%
1508: 1619:         IF END # AF.SESS.NUM% THEN OPEN.ERROR
1509: 1635:         OPEN AF.FILE.NAME$ AS AF.SESS.NUM%                             \
1510: 1661:              BUFFSIZE AF.BLOCK.SIZE%
1511: 1661: 
1512: 1661:         AF.FORMAT$ = "C512"
1513: 1678: 
1514: 1678:         IF END # AF.SESS.NUM% THEN FILE.ERROR
1515: 1694:         READ FORM AF.FORMAT$; # AF.SESS.NUM%; AF.BLOCK$
1516: 16c5: 
1517: 16c5:         DATA.IN.AF%         = SIZE(AF.FILE.NAME$) - 512
1518: 16f0:         FULL.AF.BLOCKS%     = INT%(DATA.IN.AF% / AF.BLOCK.SIZE%)
1519: 1725:         REMAINING.AF.BYTES% = MOD(DATA.IN.AF%,AF.BLOCK.SIZE%)
1520: 1749: 
1521: 1749:         IF FULL.AF.BLOCKS% = 0 AND                                     \
1522: 1775:            REMAINING.AF.BYTES% > 0 THEN                                \
1523: 1775:            AF.BLOCK.SIZE% = REMAINING.AF.BYTES%
1524: 178b: 
1525: 178b:         AF.FORMAT$ = "C" + STR$(AF.BLOCK.SIZE%)
1526: 17b4: 
1527: 17b4:         IF END # AF.SESS.NUM% THEN FILE.ERROR
1528: 17d0:         READ FORM AF.FORMAT$; # AF.SESS.NUM%; AF.BLOCK$
1529: 1801: 
1530: 1801:         AF.BLOCK.NUM% = 1
1531: 1812: 
1532: 1812:         END.OF.AF.FILE = FALSE
1533: 1828: 
1534: 1828:         WHILE NOT END.OF.AF.FILE AND                                   \
1535: 1832:               AF.PTR% < MAX.TABLE.SIZE%
1536: 1832: 
1537: 1832:               GOSUB PROCESS.AF.BLOCK
1538: 1844:         WEND
1539: 186d: 
1540: 186d:         CLOSE AF.SESS.NUM%
1541: 1881: 
1542: 1881:         IF END # AF.SESS.NUM% THEN OPEN.ERROR
1543: 189d:         OPEN AF.FILE.NAME$ KEYED RECL AF.RECL% AS AF.SESS.NUM%
1544: 18c9: 
1545: 18c9:         IF AF.PTR% > 0 THEN                                            \
1546: 18db:         BEGIN
1547: 18db:            CALL CSORT(VARPTR(AF.TABLE$(0)),AF.PTR%)
1548: 190b:         ENDIF
1549: 1913: 
1550: 1913:         RETURN
1551: 1923: 
1552: 1923: \******************************************************************************
1553: 1923: \***                                                                          *
1554: 1923: \***    SUBROUTINE      :       PROCESS.AF.BLOCK                              *
1555: 1923: \***                                                                          *
1556: 1923: \******************************************************************************
1557: 1923: \***                                                                          *
1558: 1923: \***    Extract all the EALAUTH sectors from a block                          *
1559: 1923: \***                                                                          *
1560: 1923: \******************************************************************************
1561: 1923: 
1562: 1923:         PROCESS.AF.BLOCK:
1563: 1933: 
1564: 1933:         SECTOR.NUM% = 0
1565: 1944: 
1566: 1944:         END.OF.AF.BLOCK = FALSE
1567: 195a: 
1568: 195a:         WHILE NOT END.OF.AF.BLOCK
1569: 1964:               GOSUB PROCESS.AF.SECTOR
1570: 1976:         WEND
1571: 1988: 
1572: 1988:         IF AF.BLOCK.NUM% = FULL.AF.BLOCKS% AND                         \
1573: 19b8:            REMAINING.AF.BYTES% > 0 THEN                                \
1574: 19b8:         BEGIN
1575: 19b8:            AF.BLOCK.SIZE% = REMAINING.AF.BYTES%
1576: 19ce:            AF.FORMAT$     = "C" + STR$(AF.BLOCK.SIZE%)
1577: 19f7:         ENDIF
1578: 19ff: 
1579: 19ff:         IF END # AF.SESS.NUM% THEN END.OF.AF.FOUND
1580: 1a1b:         READ FORM AF.FORMAT$; # AF.SESS.NUM%; AF.BLOCK$
1581: 1a4c: 
1582: 1a4c:         AF.BLOCK.NUM% = AF.BLOCK.NUM% + 1
1583: 1a5b: 
1584: 1a5b:         GOTO END.PROCESS.AF.BLOCK
1585: 1a65: 
1586: 1a65:         END.OF.AF.FOUND:
1587: 1a75: 
1588: 1a75:         END.OF.AF.FILE = TRUE
1589: 1a8b: 
1590: 1a8b:         END.PROCESS.AF.BLOCK:
1591: 1a9b: 
1592: 1a9b:         RETURN
1593: 1aab: 
1594: 1aab: \******************************************************************************
1595: 1aab: \***                                                                          *
1596: 1aab: \***    SUBROUTINE      :       PROCESS.AF.SECTOR                             *
1597: 1aab: \***                                                                          *
1598: 1aab: \******************************************************************************
1599: 1aab: \***                                                                          *
1600: 1aab: \***    Extract all the EALAUTH records from a sector                         *
1601: 1aab: \***                                                                          *
1602: 1aab: \******************************************************************************
1603: 1aab: 
1604: 1aab:         PROCESS.AF.SECTOR:
1605: 1abb: 
1606: 1abb:         SECTOR.STRING$ = MID$(AF.BLOCK$,                               \
1607: 1aed:                          (SECTOR.NUM% * 512) + 1,512)
1608: 1aed: 
1609: 1aed:         RECORD.COUNT% = 0
1610: 1afe: 
1611: 1afe:         EMPTY.AF.RECORD.FOUND = FALSE
1612: 1b14: 
1613: 1b14:         WHILE RECORD.COUNT% < AF.RECS.PER.SECTOR% AND                  \
1614: 1b1f:               NOT EMPTY.AF.RECORD.FOUND AND                            \
1615: 1b1f:               AF.PTR% < MAX.TABLE.SIZE%
1616: 1b1f: 
1617: 1b1f:               BASE% = (RECORD.COUNT% * AF.RECL%) + 5
1618: 1b3f: 
1619: 1b3f:               AF.RECORD$ = MID$(SECTOR.STRING$,                        \
1620: 1b70:                            BASE%,AF.RECL%)
1621: 1b70: 
1622: 1b70:               AF.OPERATOR.NO$ = MID$(AF.RECORD$,1,4)
1623: 1b97: 
1624: 1b97:               IF AF.OPERATOR.NO$ = PACK$("00000000") THEN              \
1625: 1bbd:               BEGIN
1626: 1bbd:                  EMPTY.AF.RECORD.FOUND = TRUE
1627: 1bd3:                  GOTO NEXT.AF.SECTOR
1628: 1bdd:               ENDIF
1629: 1be5: 
1630: 1be5:               GOSUB FORMAT.AF.RECORD
1631: 1bf7: 
1632: 1bf7:               RECORD.COUNT% = RECORD.COUNT% + 1
1633: 1c06: 
1634: 1c06:         NEXT.AF.SECTOR:
1635: 1c16: 
1636: 1c16:         WEND
1637: 1c58: 
1638: 1c58:         SECTOR.NUM% = SECTOR.NUM% + 1
1639: 1c67: 
1640: 1c67:         IF SECTOR.NUM% = (AF.BLOCK.SIZE% / 512) THEN                   \
1641: 1c85:            END.OF.AF.BLOCK = TRUE
1642: 1c9b: 
1643: 1c9b:         RETURN
1644: 1cab: 
1645: 1cab: \******************************************************************************
1646: 1cab: \***                                                                          *
1647: 1cab: \***    SUBROUTINE      :       FORMAT.AF.RECORD                              *
1648: 1cab: \***                                                                          *
1649: 1cab: \******************************************************************************
1650: 1cab: \***                                                                          *
1651: 1cab: \***    Format the current EALAUTH record for displaying on a report          *
1652: 1cab: \***                                                                          *
1653: 1cab: \******************************************************************************
1654: 1cab: 
1655: 1cab:         FORMAT.AF.RECORD:
1656: 1cbb: 
1657: 1cbb:         OPERATOR.ID$   = LEFT$(STR$(VAL(UNPACK$(                       \
1658: 1d48:                          MID$(AF.RECORD$,1,4)))) +                     \
1659: 1d48:                          STRING$(8," "),8)
1660: 1d48: 
1661: 1d48:         OPERATOR.NAME$ = UCASE$(MID$(AF.RECORD$,25,20))
1662: 1d74: 
1663: 1d74:         IF VAL(OPERATOR.ID$) > 999 THEN BEGIN
1664: 1da9:            STAFF.NO$ = STRING$(8," ")
1665: 1dc7: 
1666: 1dc7:            EMPLOYEE.FLG$ = " "
1667: 1de1:         ENDIF ELSE BEGIN
1668: 1de9:            STAFF.NO$ = UNPACK$(MID$(AF.RECORD$,61,4))
1669: 1e15: 
1670: 1e15:            IF UNPACK$(MID$(AF.RECORD$,65,1)) = "00" THEN BEGIN
1671: 1e5a:               EMPLOYEE.FLG$ = "Y"
1672: 1e73:            ENDIF ELSE BEGIN
1673: 1e7b:               EMPLOYEE.FLG$ = "N"
1674: 1e92:            ENDIF
1675: 1e9a:         ENDIF
1676: 1ea2: 
1677: 1ea2:         TILL.MODEL.STRING$ = ""
1678: 1eb9: !        TILL.HEADINGS$     = ""                                       ! 1.4 TT
1679: 1eb9:         TILL.HEADINGS1$     = ""                                       ! 1.4 TT
1680: 1ed0:         TILL.HEADINGS2$     = ""                                       ! 1.4 TT
1681: 1ee7:         TILL.HEADINGS3$     = ""                                       ! 1.4 TT
1682: 1efe: 
1683: 1efe:         FOR I% = 1 TO MAX.TILL.PTR%
1684: 1f12: 
1685: 1f12:             TILL.INDEX% = VAL(UNPACK$(MID$(                            \
1686: 1f55:                           TILL.MODEL.RECORD$(I%),2,1)))
1687: 1f55: 
1688: 1f55: !            TILL.HEADINGS$ = TILL.HEADINGS$ +                          \ 1.4 TT
1689: 1f55: !                             MID$(TILL.MODEL.RECORD$(I%),23,3) + " "   ! 1.4 TT
1690: 1f55: 
1691: 1f55:             TILL.HEADINGS1$ = TILL.HEADINGS1$ +                          \ 1.4 TT
1692: 1faa:                              MID$(TILL.MODEL.RECORD$(I%),23,1) + "  "    ! 1.4 TT
1693: 1faa:             TILL.HEADINGS2$ = TILL.HEADINGS2$ +                          \ 1.4 TT
1694: 1fff:                              MID$(TILL.MODEL.RECORD$(I%),24,1) + "  "    ! 1.4 TT
1695: 1fff:             TILL.HEADINGS3$ = TILL.HEADINGS3$ +                          \ 1.4 TT
1696: 2054:                              MID$(TILL.MODEL.RECORD$(I%),25,1) + "  "    ! 1.4 TT
1697: 2054: 
1698: 2054:             BIT.MASK% = 2 ^ (TILL.INDEX% - 1)
1699: 207f: 
1700: 207f:             TILL.MODEL.FLAGS% = (ASC(MID$(AF.RECORD$,74,1)) * 256) +   \
1701: 20d9:                                 (ASC(MID$(AF.RECORD$,73,1)))
1702: 20d9: 
1703: 20d9:             IF (TILL.MODEL.FLAGS% AND BIT.MASK%) > 0 THEN              \
1704: 2106:             BEGIN
1705: 2106: !               TILL.MODEL.STRING$ = TILL.MODEL.STRING$ + "Y   "       ! 1.4 TT
1706: 2106:                TILL.MODEL.STRING$ = TILL.MODEL.STRING$ + "Y  "         ! 1.4 TT
1707: 212d:             ENDIF                                                      \
1708: 212d:             ELSE                                                       \
1709: 2135:             BEGIN
1710: 2135: !               TILL.MODEL.STRING$ = TILL.MODEL.STRING$ + "-   "       ! 1.4 TT
1711: 2135:                TILL.MODEL.STRING$ = TILL.MODEL.STRING$ + "-  "         ! 1.4 TT
1712: 215a:             ENDIF
1713: 2162: 
1714: 2162:         NEXT I%
1715: 218c: 
1716: 218c:         CTLR.MODEL.STRING$ = ""
1717: 21a3: !        CTLR.HEADINGS$     = ""                                       ! 1.4 TT
1718: 21a3:         CTLR.HEADINGS1$     = ""                                       ! 1.4 TT
1719: 21ba:         CTLR.HEADINGS2$     = ""                                       ! 1.4 TT
1720: 21d1:         CTLR.HEADINGS3$     = ""                                       ! 1.4 TT
1721: 21e8: 
1722: 21e8:         FOR I% = 1 TO MAX.CTLR.PTR%
1723: 21fc: 
1724: 21fc:             CTLR.INDEX% = VAL(UNPACK$(MID$(                            \
1725: 223f:                           CTLR.MODEL.RECORD$(I%),2,1)))
1726: 223f: 
1727: 223f: !            CTLR.HEADINGS$ = CTLR.HEADINGS$ +                          \ 1.4 TT
1728: 223f: !                             MID$(CTLR.MODEL.RECORD$(I%),23,3) + " "   ! 1.4 TT
1729: 223f: 
1730: 223f:             CTLR.HEADINGS1$ = CTLR.HEADINGS1$ +                          \ 1.4 TT
1731: 2294:                              MID$(CTLR.MODEL.RECORD$(I%),23,1) + "  "    ! 1.4 TT
1732: 2294:             CTLR.HEADINGS2$ = CTLR.HEADINGS2$ +                          \ 1.4 TT
1733: 22e9:                              MID$(CTLR.MODEL.RECORD$(I%),24,1) + "  "    ! 1.4 TT
1734: 22e9:             CTLR.HEADINGS3$ = CTLR.HEADINGS3$ +                          \ 1.4 TT
1735: 233e:                              MID$(CTLR.MODEL.RECORD$(I%),25,1) + "  "    ! 1.4 TT
1736: 233e: 
1737: 233e:             BIT.MASK% = 2 ^ (CTLR.INDEX% - 1)
1738: 2369: 
1739: 2369:             CTLR.MODEL.FLAGS% = (ASC(MID$(AF.RECORD$,76,1)) * 256) +   \
1740: 23c3:                                 (ASC(MID$(AF.RECORD$,75,1)))
1741: 23c3: 
1742: 23c3:             IF (CTLR.MODEL.FLAGS% AND BIT.MASK%) > 0 THEN              \
1743: 23f0:             BEGIN
1744: 23f0: !               CTLR.MODEL.STRING$ = CTLR.MODEL.STRING$ + "Y   "       ! 1.4 TT
1745: 23f0:                CTLR.MODEL.STRING$ = CTLR.MODEL.STRING$ + "Y  "         ! 1.4 TT
1746: 2417:             ENDIF                                                      \
1747: 2417:             ELSE                                                       \
1748: 241f:             BEGIN
1749: 241f: !               CTLR.MODEL.STRING$ = CTLR.MODEL.STRING$ + "-   "       ! 1.4 TT
1750: 241f:                CTLR.MODEL.STRING$ = CTLR.MODEL.STRING$ + "-  "         ! 1.4 TT
1751: 2444:             ENDIF
1752: 244c: 
1753: 244c:         NEXT I%
1754: 2476: 
1755: 2476:         AF.PTR% = AF.PTR% + 1
1756: 2485: 
1757: 2485:         IF SORT.OPTION$ = "1" THEN                                     \
1758: 24a3:         BEGIN
1759: 24a3:            AF.TABLE$(AF.PTR%) = OPERATOR.ID$ + " " +                   \
1760: 24ea:                                 OPERATOR.NAME$ + " "
1761: 24ea:         ENDIF                                                          \
1762: 24ea:         ELSE                                                           \
1763: 24f2:         IF SORT.OPTION$ = "2" THEN                                     \
1764: 2510:         BEGIN
1765: 2510:            AF.TABLE$(AF.PTR%) = OPERATOR.NAME$ + " " +                 \
1766: 2555:                                 OPERATOR.ID$ + " "
1767: 2555:         ENDIF
1768: 255d: 
1769: 255d: !        IF REPORT.OPTION$ = "1" OR REPORT.OPTION$ = "2" THEN BEGIN    \ 1.3 NM
1770: 255d: 
1771: 255d:         IF STAFF.NO$ = STRING$(8,"0") THEN BEGIN
1772: 2585:            STAFF.NO$ = STRING$(8," ")
1773: 25a3:         ENDIF
1774: 25ab:         AF.TABLE$(AF.PTR%) = AF.TABLE$(AF.PTR%) +                      \
1775: 25fd:                                 STAFF.NO$ + "  "
1776: 25fd: 
1777: 25fd: !        ENDIF                                                         ! 1.3 NM
1778: 25fd: 
1779: 25fd: !        AF.TABLE$(AF.PTR%) = AF.TABLE$(AF.PTR%) +                      \ 1.4 TT
1780: 25fd: !                             EMPLOYEE.FLG$ + "   "                     ! 1.4 TT
1781: 25fd: 
1782: 25fd:         AF.TABLE$(AF.PTR%) = AF.TABLE$(AF.PTR%) +                      \ 1.4 TT
1783: 264f:                              EMPLOYEE.FLG$ + "  "                      ! 1.4 TT
1784: 264f: 
1785: 264f:         IF REPORT.OPTION$ = "1" THEN                                   \
1786: 266d:         BEGIN
1787: 266d:            AF.TABLE$(AF.PTR%) = AF.TABLE$(AF.PTR%) +                   \
1788: 26be:                                 CTLR.MODEL.STRING$
1789: 26be:         ENDIF                                                          \
1790: 26be:         ELSE                                                           \
1791: 26c6:         IF REPORT.OPTION$ = "2" THEN                                   \
1792: 26e4:         BEGIN
1793: 26e4:            AF.TABLE$(AF.PTR%) = AF.TABLE$(AF.PTR%) +                   \
1794: 2735:                                 TILL.MODEL.STRING$
1795: 2735:         ENDIF                                                          \
1796: 2735:         ELSE                                                           \
1797: 273d:         IF REPORT.OPTION$ = "3" THEN                                   \
1798: 275b:         BEGIN
1799: 275b:            AF.TABLE$(AF.PTR%) = AF.TABLE$(AF.PTR%) +                   \
1800: 27b4:                                 TILL.MODEL.STRING$ +                   \
1801: 27b4:                                 CTLR.MODEL.STRING$
1802: 27b4:         ENDIF
1803: 27bc: 
1804: 27bc:         RETURN
1805: 27cc: 
1806: 27cc: \******************************************************************************
1807: 27cc: \***                                                                          *
1808: 27cc: \***    SUBROUTINE      :       DISPLAY.REPORT                                *
1809: 27cc: \***                                                                          *
1810: 27cc: \******************************************************************************
1811: 27cc: \***                                                                          *
1812: 27cc: \***    Display the operators report on the screen                            *
1813: 27cc: \***                                                                          *
1814: 27cc: \******************************************************************************
1815: 27cc: 
1816: 27cc:         DISPLAY.REPORT:
1817: 27dc: 
1818: 27dc:         S% = 8
1819: 27ed: 
1820: 27ed:         CALL DISPLAY.SCREEN(8)
1821: 280c: 
1822: 280c:         LINES.PER.PAGE% = 16
1823: 281d: 
1824: 281d:         NO.OF.PAGES% = AF.PTR% / LINES.PER.PAGE%
1825: 283b: 
1826: 283b:         IF MOD(AF.PTR%,LINES.PER.PAGE%) > 0 THEN                       \
1827: 2871:         BEGIN
1828: 2871:            NO.OF.PAGES% = NO.OF.PAGES% + 1
1829: 2880:         ENDIF
1830: 2888: 
1831: 2888:         PAGE.NUMBER% = 1
1832: 2899:         GOSUB SET.PAGE.POINTERS
1833: 28ab: 
1834: 28ab:         GOSUB RESTORE.FIELDS.08
1835: 28bd: 
1836: 28bd:         EXIT.KEY.PRESSED(8) = FALSE
1837: 28e5: 
1838: 28e5:         WHILE NOT EXIT.KEY.PRESSED(8)
1839: 28ef:               GOSUB GET.PAGE.KEY.08
1840: 2901:         WEND
1841: 291f: 
1842: 291f:         RETURN
1843: 292f: 
1844: 292f: \******************************************************************************
1845: 292f: \***                                                                          *
1846: 292f: \***    SUBROUTINE      :       GET.PAGE.KEY.08                               *
1847: 292f: \***                                                                          *
1848: 292f: \******************************************************************************
1849: 292f: \***                                                                          *
1850: 292f: \***    Input routine for the paging keys on the report operators screen      *
1851: 292f: \***                                                                          *
1852: 292f: \******************************************************************************
1853: 292f: 
1854: 292f:         GET.PAGE.KEY.08:
1855: 293f: 
1856: 293f:         EXIT.KEY.PRESSED(8)  = FALSE
1857: 2967: 
1858: 2967:         WHILE NOT EXIT.KEY.PRESSED(8)
1859: 2972: 
1860: 2972:               CURSOR.POSITION% = INVISIBLE.FIELD%
1861: 2988:               GOSUB PUT.CURSOR.IN.FIELD
1862: 299a: 
1863: 299a:               GOSUB GET.INPUT
1864: 29ac: 
1865: 29ac:               IF FUNCTION.KEY% = QUIT.KEY% THEN                        \
1866: 29c4:               BEGIN
1867: 29c4:                  EXIT.KEY.PRESSED(8) = TRUE
1868: 29ec: 
1869: 29ec:                  CALL DISPLAY.SCREEN(7)
1870: 2a0b:                  GOSUB RESTORE.FIELDS.07
1871: 2a20:               ENDIF                                                    \
1872: 2a20:               ELSE                                                     \
1873: 2a28:               IF FUNCTION.KEY% = ESC.KEY% THEN                         \
1874: 2a40:               BEGIN
1875: 2a40:                  CHAIN.TO.PROG$ = "PSB50"
1876: 2a57:                  PSBCHN.MENCON  = "000000"
1877: 2a6e:                  GOSUB CHAIN.TO.CALLER
1878: 2a83:               ENDIF                                                    \
1879: 2a83:               ELSE                                                     \
1880: 2a8b:               IF FUNCTION.KEY% = HELP.KEY% THEN                        \
1881: 2aa3:               BEGIN
1882: 2aa3:                  CALL SCREEN.HELP(8)
1883: 2ac2:                  GOSUB RESTORE.FIELDS.08
1884: 2ad7:               ENDIF                                                    \
1885: 2ad7:               ELSE                                                     \
1886: 2adf:               IF FUNCTION.KEY% = PGDN.KEY% OR                          \
1887: 2b16:                  FUNCTION.KEY% = F8DN.KEY% THEN                        \
1888: 2b16:               BEGIN
1889: 2b16:                  IF PAGE.NUMBER% = NO.OF.PAGES% THEN                   \
1890: 2b2e:                  BEGIN
1891: 2b2e:                     ! B075 There are no more pages to display
1892: 2b2e:                     DISPLAY.MESSAGE.NUMBER% = 75
1893: 2b3f:                     GOSUB DISPLAY.MESSAGE
1894: 2b53:                  ENDIF                                                 \
1895: 2b53:                  ELSE                                                  \
1896: 2b5b:                  BEGIN
1897: 2b5b:                     PAGE.NUMBER% = PAGE.NUMBER% + 1
1898: 2b6a:                     GOSUB SET.PAGE.POINTERS
1899: 2b7c: 
1900: 2b7c:                     GOSUB DISPLAY.REPORT.LINES
1901: 2b8e:                  ENDIF
1902: 2b99:               ENDIF                                                    \
1903: 2b99:               ELSE                                                     \
1904: 2ba1:               IF FUNCTION.KEY% = PGUP.KEY% OR                          \
1905: 2bd8:                  FUNCTION.KEY% = F7UP.KEY% THEN                        \
1906: 2bd8:               BEGIN
1907: 2bd8:                  IF PAGE.NUMBER% = 1 THEN                              \
1908: 2bea:                  BEGIN
1909: 2bea:                     ! B074 There is no previous page to display
1910: 2bea:                     DISPLAY.MESSAGE.NUMBER% = 74
1911: 2bfb:                     GOSUB DISPLAY.MESSAGE
1912: 2c0f:                  ENDIF                                                 \
1913: 2c0f:                  ELSE                                                  \
1914: 2c17:                  BEGIN
1915: 2c17:                     PAGE.NUMBER% = PAGE.NUMBER% - 1
1916: 2c26:                     GOSUB SET.PAGE.POINTERS
1917: 2c38: 
1918: 2c38:                     GOSUB DISPLAY.REPORT.LINES
1919: 2c4a:                  ENDIF
1920: 2c54:               ENDIF                                                    \
1921: 2c54:               ELSE                                                     \
1922: 2c5c:               BEGIN
1923: 2c5c:                  ! B001 Invalid key pressed
1924: 2c5c:                  DISPLAY.MESSAGE.NUMBER% = 1
1925: 2c6d:                  GOSUB DISPLAY.MESSAGE
1926: 2c7f:               ENDIF
1927: 2c87:         WEND
1928: 2ca8: 
1929: 2ca8:         RETURN
1930: 2cb8: 
1931: 2cb8: \******************************************************************************
1932: 2cb8: \***                                                                          *
1933: 2cb8: \***    SUBROUTINE      :       RESTORE.FIELDS.08                             *
1934: 2cb8: \***                                                                          *
1935: 2cb8: \******************************************************************************
1936: 2cb8: \***                                                                          *
1937: 2cb8: \***    Redisplay all fields on the screen report of all operators            *
1938: 2cb8: \***                                                                          *
1939: 2cb8: \******************************************************************************
1940: 2cb8: 
1941: 2cb8:         RESTORE.FIELDS.08:
1942: 2cc8: 
1943: 2cc8:         CURSOR.STATE$ = CURSOR.OFF$
1944: 2ce6:         GOSUB SET.CURSOR.STATE
1945: 2cf8: 
1946: 2cf8:         LOCATE 1,25
1947: 2d0d:         PRINT DISPLAY.TITLE$
1948: 2d25: 
1949: 2d25: !        LOCATE 4,2                                                    ! 1.4 TT
1950: 2d25: !        PRINT DISPLAY.HEADINGS$                                       ! 1.4 TT
1951: 2d25: 
1952: 2d25:         LOCATE 3,2                                                     ! 1.4 TT
1953: 2d3a:         PRINT DISPLAY.HEADINGS1$                                       ! 1.4 TT
1954: 2d52:         LOCATE 4,2                                                     ! 1.4 TT
1955: 2d67:         PRINT DISPLAY.HEADINGS2$                                       ! 1.4 TT
1956: 2d7f:         LOCATE 5,2                                                     ! 1.4 TT
1957: 2d94:         PRINT DISPLAY.HEADINGS3$                                       ! 1.4 TT
1958: 2dac: 
1959: 2dac: !        LOCATE 5,2                                                    ! 1.4 TT
1960: 2dac:         LOCATE 6,2                                                     ! 1.4 TT
1961: 2dc1:         PRINT DISPLAY.UNDERLINE$
1962: 2dd9: 
1963: 2dd9:         GOSUB DISPLAY.REPORT.LINES
1964: 2deb: 
1965: 2deb:         CURSOR.STATE$ = CURSOR.ON$
1966: 2e09:         GOSUB SET.CURSOR.STATE
1967: 2e1b: 
1968: 2e1b:         RETURN
1969: 2e2b: 
1970: 2e2b: \******************************************************************************
1971: 2e2b: \***                                                                          *
1972: 2e2b: \***    SUBROUTINE      :       DISPLAY.REPORT.LINES                          *
1973: 2e2b: \***                                                                          *
1974: 2e2b: \******************************************************************************
1975: 2e2b: \***                                                                          *
1976: 2e2b: \***    Display the report lines for the screen report of all operators       *
1977: 2e2b: \***                                                                          *
1978: 2e2b: \******************************************************************************
1979: 2e2b: 
1980: 2e2b:         DISPLAY.REPORT.LINES:
1981: 2e3b: 
1982: 2e3b:         IF NO.OF.PAGES% <> 1 THEN                                      \
1983: 2e50:         BEGIN
1984: 2e50:            IF PAGE.NUMBER% = 1 THEN                                    \
1985: 2e65:            BEGIN
1986: 2e65:               CURSOR.POSITION% = 4
1987: 2e76:               GOSUB PUT.CURSOR.IN.FIELD
1988: 2e88: 
1989: 2e88:               STRING.DATA$ = INVISIBLE$
1990: 2ea6:               GOSUB SET.FIELD.ATTRIBUTES
1991: 2eb8: 
1992: 2eb8:               CURSOR.POSITION% = 6
1993: 2ec9:               GOSUB PUT.CURSOR.IN.FIELD
1994: 2edb: 
1995: 2edb:               STRING.DATA$ = VISIBLE$
1996: 2ef9:               GOSUB SET.FIELD.ATTRIBUTES
1997: 2f0e:            ENDIF                                                       \
1998: 2f0e:            ELSE                                                        \
1999: 2f16:            IF PAGE.NUMBER% = NO.OF.PAGES% THEN                         \
2000: 2f31:            BEGIN
2001: 2f31:               CURSOR.POSITION% = 4
2002: 2f42:               GOSUB PUT.CURSOR.IN.FIELD
2003: 2f54: 
2004: 2f54:               STRING.DATA$ = VISIBLE$
2005: 2f72:               GOSUB SET.FIELD.ATTRIBUTES
2006: 2f84: 
2007: 2f84:               CURSOR.POSITION% = 6
2008: 2f95:               GOSUB PUT.CURSOR.IN.FIELD
2009: 2fa7: 
2010: 2fa7:               STRING.DATA$ = INVISIBLE$
2011: 2fc5:               GOSUB SET.FIELD.ATTRIBUTES
2012: 2fda:            ENDIF                                                       \
2013: 2fda:            ELSE                                                        \
2014: 2fe2:            BEGIN
2015: 2fe2:               CURSOR.POSITION% = 4
2016: 2ff3:               GOSUB PUT.CURSOR.IN.FIELD
2017: 3005: 
2018: 3005:               STRING.DATA$ = VISIBLE$
2019: 3023:               GOSUB SET.FIELD.ATTRIBUTES
2020: 3035: 
2021: 3035:               CURSOR.POSITION% = 6
2022: 3046:               GOSUB PUT.CURSOR.IN.FIELD
2023: 3058: 
2024: 3058:               STRING.DATA$ = VISIBLE$
2025: 3076:               GOSUB SET.FIELD.ATTRIBUTES
2026: 3088:            ENDIF
2027: 3090:         ENDIF
2028: 3098: 
2029: 3098:         LOCATE 1,67
2030: 30ad:         PRINT DISPLAY.PAGES$
2031: 30c5: 
2032: 30c5:         LINE.NUMBER% = 1
2033: 30d6: 
2034: 30d6:         FOR I% = FIRST.PTR% TO LAST.PTR%
2035: 30ee: 
2036: 30ee: !            LOCATE LINE.NUMBER% + 5,2                                 ! 1.4 TT
2037: 30ee:             LOCATE LINE.NUMBER% + 6,2                                  ! 1.4 TT
2038: 310c:             PRINT AF.TABLE$(I%)
2039: 3135: 
2040: 3135:             LINE.NUMBER% = LINE.NUMBER% + 1
2041: 3144: 
2042: 3144:         NEXT I%
2043: 316b: 
2044: 316b:         IF PAGE.NUMBER% = NO.OF.PAGES% AND                             \
2045: 31a2:            LINE.NUMBER% <= LINES.PER.PAGE% THEN                        \
2046: 31a2:         BEGIN
2047: 31a2:            FOR I% = LINE.NUMBER% TO LINES.PER.PAGE%
2048: 31ba: 
2049: 31ba: !               LOCATE LINE.NUMBER% + 5,2
2050: 31ba:                LOCATE LINE.NUMBER% + 6,2
2051: 31d8:                PRINT STRING$(78," ")
2052: 31f3: 
2053: 31f3:                LINE.NUMBER% = LINE.NUMBER% + 1
2054: 3202: 
2055: 3202:            NEXT I%
2056: 3229:         ENDIF
2057: 3231: 
2058: 3231:         RETURN
2059: 3241: 
2060: 3241: \******************************************************************************
2061: 3241: \***                                                                          *
2062: 3241: \***    SUBROUTINE      :       SET.PAGE.POINTERS                             *
2063: 3241: \***                                                                          *
2064: 3241: \******************************************************************************
2065: 3241: \***                                                                          *
2066: 3241: \***    Calculate the first and last records to be displayed on a page        *
2067: 3241: \***                                                                          *
2068: 3241: \******************************************************************************
2069: 3241: 
2070: 3241:         SET.PAGE.POINTERS:
2071: 3251: 
2072: 3251:         FIRST.PTR% = 1 + (LINES.PER.PAGE% * (PAGE.NUMBER% - 1))
2073: 3274: 
2074: 3274:         LAST.PTR% = LINES.PER.PAGE% +                                  \
2075: 329b:                     (LINES.PER.PAGE% * (PAGE.NUMBER% - 1))
2076: 329b: 
2077: 329b:         IF LAST.PTR% > AF.PTR% THEN                                    \
2078: 32b3:         BEGIN
2079: 32b3:            LAST.PTR% = AF.PTR%
2080: 32c9:         ENDIF
2081: 32d1: 
2082: 32d1:         DISPLAY.PAGES$ = LEFT$("Page " +                               \
2083: 3351:                          STR$(PAGE.NUMBER%) +                          \
2084: 3351:                          " of " +                                      \
2085: 3351:                          STR$(NO.OF.PAGES%) +                          \
2086: 3351:                          STRING$(13," "),13)
2087: 3351: 
2088: 3351:         RETURN
2089: 3361: 
2090: 3361: \******************************************************************************
2091: 3361: \***                                                                          *
2092: 3361: \***    SUBROUTINE      :       PRINT.REPORT                                  *
2093: 3361: \***                                                                          *
2094: 3361: \******************************************************************************
2095: 3361: \***                                                                          *
2096: 3361: \***    Produce a printed copy of the operators report                        *
2097: 3361: \***                                                                          *
2098: 3361: \******************************************************************************
2099: 3361: 
2100: 3361:         PRINT.OP.REPORT:                                               ! 1.3 NM
2101: 3371: 
2102: 3371:         !Commented as part of Core 2 Release                           ! 1.3 NM
2103: 3371:         !CURRENT.REPORT.NUM% = PRINT.REPORT.NUM%                       ! 1.3 NM
2104: 3371:         !IF END # PRINT.SESS.NUM% THEN FILE.ERROR                      ! 1.3 NM
2105: 3371:         !OPEN PRINT.FILE.NAME$ AS PRINT.SESS.NUM%                      ! 1.3 NM
2106: 3371: 
2107: 3371:         CREATE POSFILE WORKFILE.FILE.NAME$ AS WORKFILE.SESS.NUM%       \ 1.3 NM
2108: 3397:          LOCKED MIRRORED ATCLOSE                                       ! 1.3 NM
2109: 3397: 
2110: 3397:         LINES.PER.PAGE% = 50
2111: 33a8: 
2112: 33a8:         NO.OF.PAGES% = AF.PTR% / LINES.PER.PAGE%
2113: 33c6: 
2114: 33c6:         IF MOD(AF.PTR%,LINES.PER.PAGE%) > 0 THEN                       \
2115: 33fc:         BEGIN
2116: 33fc:            NO.OF.PAGES% = NO.OF.PAGES% + 1
2117: 340b:         ENDIF
2118: 3413: 
2119: 3413:         FOR PAGE.NUMBER% = 1 TO NO.OF.PAGES%
2120: 3427: 
2121: 3427:             GOSUB SET.PAGE.POINTERS
2122: 3439:             GOSUB PRINT.HEADING
2123: 344b:             GOSUB PRINT.REPORT.LINES
2124: 345d: 
2125: 345d:             IF PAGE.NUMBER% <> NO.OF.PAGES% THEN                       \
2126: 3475:             BEGIN
2127: 3475: 
2128: 3475:                !Commented as part of Core 2 Release                    ! 1.3 NM
2129: 3475:                !PRINT.LINE$ = STRING$(134,PAD.CHAR$) +                 \ 1.3 NM
2130: 3475:                !              FORM.FEED$ +                             \ 1.3 NM
2131: 3475:                !              CARRIAGE.RETURN$ +                       \ 1.3 NM
2132: 3475:                !              LINE.FEED$                               ! 1.3 NM
2133: 3475:                !CALL WRITE.CONDENSED.PRINT                             ! 1.3 NM
2134: 3475: 
2135: 3475:                PRINT #WORKFILE.SESS.NUM%; FORM.FEED$                   ! 1.3 NM
2136: 349e:             ENDIF                                                      \
2137: 349e:             ELSE                                                       \
2138: 34a6:             BEGIN
2139: 34a6:                FOR J% = 1 TO 2
2140: 34b9: 
2141: 34b9:                    !Commented as part of Core 2 Release                ! 1.3 NM
2142: 34b9:                    !PRINT.LINE$ = STRING$(135,PAD.CHAR$) +             \ 1.3 NM
2143: 34b9:                    !              CARRIAGE.RETURN$ +                   \ 1.3 NM
2144: 34b9:                    !              LINE.FEED$                           ! 1.3 NM
2145: 34b9:                    !CALL WRITE.CONDENSED.PRINT                         ! 1.3 NM
2146: 34b9: 
2147: 34b9:                    PRINT #WORKFILE.SESS.NUM%; ""                       ! 1.3 NM
2148: 34d8: 
2149: 34d8:                NEXT J%
2150: 34f9: 
2151: 34f9:                !Commented as part of Core 2 Release                    ! 1.3 NM
2152: 34f9:                !PRINT.LINE$ = LEFT$(STRING$(34,PAD.CHAR$) +            \ 1.3 NM
2153: 34f9:                !              "*** " +                                 \ 1.3 NM
2154: 34f9:                !              "END OF REPORT " +                       \ 1.3 NM
2155: 34f9:                !              "***" +                                  \ 1.3 NM
2156: 34f9:                !              STRING$(135,PAD.CHAR$),135) +            \ 1.3 NM
2157: 34f9:                !              CARRIAGE.RETURN$ +                       \ 1.3 NM
2158: 34f9:                !              LINE.FEED$                               ! 1.3 NM
2159: 34f9:                !CALL WRITE.CONDENSED.PRINT                             ! 1.3 NM
2160: 34f9: 
2161: 34f9:                PRINT #WORKFILE.SESS.NUM%; "*** END OF REPORT ***"      ! 1.3 NM
2162: 3518:             ENDIF
2163: 3520: 
2164: 3520:         NEXT PAGE.NUMBER%
2165: 354a: 
2166: 354a:         !Commented as part of Core 2 Release                           ! 1.3 NM
2167: 354a:         !PRINT.LINE$ = STRING$(135,PAD.CHAR$) +                        \ 1.3 NM
2168: 354a:         !              CONDENSE.OFF$ +                                 \ 1.3 NM
2169: 354a:         !              FORM.FEED$                                      ! 1.3 NM
2170: 354a:         !CALL WRITE.CONDENSED.PRINT                                    ! 1.3 NM
2171: 354a: 
2172: 354a:         PRINT #WORKFILE.SESS.NUM%; FORM.FEED$                          ! 1.3 NM
2173: 3570: 
2174: 3570:         !CLOSE PRINT.SESS.NUM%                                         ! 1.3 NM
2175: 3570:         CLOSE WORKFILE.SESS.NUM%                                       ! 1.3 NM
2176: 3584: 
2177: 3584:         OPEN PRINT.FILE.NAME$ AS PRINT.SESS.NUM% NOREAD NODEL          ! 1.3 NM
2178: 35ac:         OPEN WORKFILE.FILE.NAME$ AS WORKFILE.SESS.NUM% LOCKED          ! 1.3 NM
2179: 35d3:         CALL PRINT.REPORT(WORKFILE.SESS.NUM%,"N")                      ! ADG
2180: 35ee: 
2181: 35ee:         ! CALL PRINT.REPORT(WORKFILE.SESS.NUM%, "Y")                     ! 1.3 NM
2182: 35ee: 
2183: 35ee:         CLOSE WORKFILE.SESS.NUM%                                       ! 1.3 NM
2184: 3602:         CLOSE PRINT.SESS.NUM%
2185: 3616:         DISPLAY.MESSAGE.NUMBER% = 444
2186: 3627:         GOSUB DISPLAY.MESSAGE
2187: 3639: 
2188: 3639:         RETURN
2189: 3649: 
2190: 3649: \******************************************************************************
2191: 3649: \***                                                                          *
2192: 3649: \***    SUBROUTINE      :       PRINT.HEADING                                 *
2193: 3649: \***                                                                          *
2194: 3649: \******************************************************************************
2195: 3649: \***                                                                          *
2196: 3649: \***    Display the page heading on the printed report                        *
2197: 3649: \***                                                                          *
2198: 3649: \******************************************************************************
2199: 3649: 
2200: 3649:         PRINT.HEADING:
2201: 3659: 
2202: 3659:         !Commented as part of Core 2 Release                           ! 1.3 NM
2203: 3659:         !PRINT.LINE$ = LEFT$(CONDENSE.ON$ + DISPLAY.TITLE$ +           \ 1.3 NM
2204: 3659:         !              DISPLAY.PAGES$ +                                \ 1.3 NM
2205: 3659:         !              STRING$(135,PAD.CHAR$),135) +                   \ 1.3 NM
2206: 3659:         !              CARRIAGE.RETURN$ +                              \ 1.3 NM
2207: 3659:         !              LINE.FEED$                                      ! 1.3 NM
2208: 3659:         !CALL WRITE.CONDENSED.PRINT                                    ! 1.3 NM
2209: 3659: 
2210: 3659:         PRINT #WORKFILE.SESS.NUM%; (DISPLAY.TITLE$ + DISPLAY.PAGES$)   \ 1.3 NM
2211: 3695: 
2212: 3695:         FOR J% = 1 TO 2
2213: 36a8: 
2214: 36a8:             !Commented as part of Core 2 Release                       ! 1.3 NM
2215: 36a8:             !PRINT.LINE$ = STRING$(135,PAD.CHAR$) +                    \ 1.3 NM
2216: 36a8:             !              CARRIAGE.RETURN$ +                          \ 1.3 NM
2217: 36a8:             !              LINE.FEED$                                  ! 1.3 NM
2218: 36a8:             !CALL WRITE.CONDENSED.PRINT                                ! 1.3 NM
2219: 36a8: 
2220: 36a8:             PRINT #WORKFILE.SESS.NUM%; ""                              ! 1.3 NM
2221: 36c7:         NEXT J%
2222: 36e8: 
2223: 36e8:         !Commented as part of Core 2 Release                           ! 1.3 NM
2224: 36e8:         !PRINT.LINE$ = LEFT$(PAD.CHAR$ + DISPLAY.HEADINGS$ +           \ 1.3 NM
2225: 36e8:         !              STRING$(135,PAD.CHAR$),135) +                   \ 1.3 NM
2226: 36e8:         !              CARRIAGE.RETURN$ +                              \ 1.3 NM
2227: 36e8:         !              LINE.FEED$                                      ! 1.3 NM
2228: 36e8:         !CALL WRITE.CONDENSED.PRINT                                    ! 1.3 NM
2229: 36e8: 
2230: 36e8: !        PRINT #WORKFILE.SESS.NUM%; DISPLAY.HEADINGS$                   ! 1.3 NM
2231: 36e8:         PRINT #WORKFILE.SESS.NUM%; DISPLAY.HEADINGS1$                   ! 1.3 NM
2232: 370e:         PRINT #WORKFILE.SESS.NUM%; DISPLAY.HEADINGS2$                   ! 1.3 NM
2233: 3734:         PRINT #WORKFILE.SESS.NUM%; DISPLAY.HEADINGS3$                   ! 1.3 NM
2234: 375a: 
2235: 375a:         !Commented as part of Core 2 Release                           ! 1.3 NM
2236: 375a:         !PRINT.LINE$ = LEFT$(PAD.CHAR$ + DISPLAY.UNDERLINE$ +          \ 1.3 NM
2237: 375a:         !              STRING$(135,PAD.CHAR$),135) +                   \ 1.3 NM
2238: 375a:         !              CARRIAGE.RETURN$ +                              \ 1.3 NM
2239: 375a:         !              LINE.FEED$                                      ! 1.3 NM
2240: 375a:         !CALL WRITE.CONDENSED.PRINT                                    ! 1.3 NM
2241: 375a: 
2242: 375a:         PRINT #WORKFILE.SESS.NUM%; DISPLAY.UNDERLINE$                  ! 1.3 NM
2243: 3780: 
2244: 3780:         RETURN
2245: 3790: 
2246: 3790: \******************************************************************************
2247: 3790: \***                                                                          *
2248: 3790: \***    SUBROUTINE      :       PRINT.REPORT.LINES                            *
2249: 3790: \***                                                                          *
2250: 3790: \******************************************************************************
2251: 3790: \***                                                                          *
2252: 3790: \***    Print the report lines for the printed report of all operators        *
2253: 3790: \***                                                                          *
2254: 3790: \******************************************************************************
2255: 3790: 
2256: 3790:         PRINT.REPORT.LINES:
2257: 37a0: 
2258: 37a0:         FOR J% = FIRST.PTR% TO LAST.PTR%
2259: 37b8: 
2260: 37b8:             !Commented as part of Core 2 Release                       ! 1.3 NM
2261: 37b8:             !PRINT.LINE$ = LEFT$(PAD.CHAR$ + AF.TABLE$(J%) +           \ 1.3 NM
2262: 37b8:             !              STRING$(135,PAD.CHAR$),135) +               \ 1.3 NM
2263: 37b8:             !              CARRIAGE.RETURN$ +                          \ 1.3 NM
2264: 37b8:             !              LINE.FEED$                                  ! 1.3 NM
2265: 37b8:             !CALL WRITE.CONDENSED.PRINT                                ! 1.3 NM
2266: 37b8: 
2267: 37b8:             PRINT #WORKFILE.SESS.NUM%; AF.TABLE$(J%)                   ! 1.3 NM
2268: 37ef: 
2269: 37ef:         NEXT J%
2270: 3816: 
2271: 3816:         RETURN
2272: 3826: 
2273: 3826: \******************************************************************************
2274: 3826: \***                                                                          *
2275: 3826: \***    SUBROUTINE      :       WAIT.MESSAGE                                  *
2276: 3826: \***                                                                          *
2277: 3826: \******************************************************************************
2278: 3826: \***                                                                          *
2279: 3826: \***    Display a wait message to the screen                                  *
2280: 3826: \***                                                                          *
2281: 3826: \******************************************************************************
2282: 3826: 
2283: 3826:         WAIT.MESSAGE:
2284: 3836: 
2285: 3836:         ! B251 Processing - Please Wait .....
2286: 3836:         DISPLAY.MESSAGE.NUMBER% = 251
2287: 3847:         GOSUB DISPLAY.MESSAGE
2288: 3859: 
2289: 3859:         CURSOR.POSITION% = INVISIBLE.FIELD%
2290: 386f:         GOSUB PUT.CURSOR.IN.FIELD
2291: 3881: 
2292: 3881:         RETURN
2293: 3891: 
2294: 3891: \******************************************************************************
2295: 3891: \***                                                                          *
2296: 3891: \***    SUBROUTINE      :       GET.INPUT                                     *
2297: 3891: \***                                                                          *
2298: 3891: \******************************************************************************
2299: 3891: \***                                                                          *
2300: 3891: \***    Get input from the keyboard                                           *
2301: 3891: \***                                                                          *
2302: 3891: \******************************************************************************
2303: 3891: 
2304: 3891:         GET.INPUT:
2305: 38a1: 
2306: 38a1:         STRING.DATA$ = "3113333333311333"
2307: 38b8:         CALL SETF(STRING.DATA$)
2308: 38d3: 
2309: 38d3:         STRING.DATA$ = ""
2310: 38ea:         INTEGER.DATA% = 0
2311: 38fb: 
2312: 38fb:         CALL DM.UPDF(STRING.DATA$,                                     \
2313: 391d:                      INTEGER.DATA%)
2314: 391d: 
2315: 391d:         STRING.DATA$ = "3303333333303333"
2316: 3934:         CALL SETF(STRING.DATA$)
2317: 394f: 
2318: 394f:         FUNCTION.KEY% = F03.RETURNED.INTEGER%
2319: 3965: 
2320: 3965:         RETURN
2321: 3975: 
2322: 3975: \******************************************************************************
2323: 3975: \***                                                                          *
2324: 3975: \***    SUBROUTINE      :       RESUME.INPUT                                  *
2325: 3975: \***                                                                          *
2326: 3975: \******************************************************************************
2327: 3975: \***                                                                          *
2328: 3975: \***    Get input from the keyboard after an interrupt                        *
2329: 3975: \***                                                                          *
2330: 3975: \******************************************************************************
2331: 3975: 
2332: 3975:         RESUME.INPUT:
2333: 3985: 
2334: 3985:         STRING.DATA$ = "3113333333311333"
2335: 399c:         CALL SETF(STRING.DATA$)
2336: 39b7: 
2337: 39b7:         STRING.DATA$ = ""
2338: 39ce:         INTEGER.DATA% = 0
2339: 39df: 
2340: 39df:         CALL DM.RESF(STRING.DATA$,                                     \
2341: 3a01:                      INTEGER.DATA%)
2342: 3a01: 
2343: 3a01:         STRING.DATA$ = "3303333333303333"
2344: 3a18:         CALL SETF(STRING.DATA$)
2345: 3a33: 
2346: 3a33:         FUNCTION.KEY% = F03.RETURNED.INTEGER%
2347: 3a49: 
2348: 3a49:         RETURN
2349: 3a59: 
2350: 3a59: \******************************************************************************
2351: 3a59: \***                                                                          *
2352: 3a59: \***    SUBROUTINE      :       SET.CURSOR.STATE                              *
2353: 3a59: \***                                                                          *
2354: 3a59: \******************************************************************************
2355: 3a59: \***                                                                          *
2356: 3a59: \***    Shows or hides the cursor                                             *
2357: 3a59: \***                                                                          *
2358: 3a59: \******************************************************************************
2359: 3a59: 
2360: 3a59:         SET.CURSOR.STATE:
2361: 3a69: 
2362: 3a69:         STRING.DATA$  = CURSOR.STATE$
2363: 3a87:         INTEGER.DATA% = 0
2364: 3a98: 
2365: 3a98:         CALL DM.CURS(STRING.DATA$,                                     \
2366: 3aba:                      INTEGER.DATA%)
2367: 3aba: 
2368: 3aba:         RETURN
2369: 3aca: 
2370: 3aca: \******************************************************************************
2371: 3aca: \***                                                                          *
2372: 3aca: \***    SUBROUTINE      :       CLEAR.MESSAGE                                 *
2373: 3aca: \***                                                                          *
2374: 3aca: \******************************************************************************
2375: 3aca: \***                                                                          *
2376: 3aca: \***    Clear the current BEMF error message                                  *
2377: 3aca: \***                                                                          *
2378: 3aca: \******************************************************************************
2379: 3aca: 
2380: 3aca:         CLEAR.MESSAGE:
2381: 3ada: 
2382: 3ada:         OLD.POSITION% = CURSOR.POSITION%
2383: 3af0: 
2384: 3af0:         CURSOR.POSITION% = 1
2385: 3b01:         GOSUB PUT.CURSOR.IN.FIELD
2386: 3b13: 
2387: 3b13:         STRING.DATA$ = ""
2388: 3b2a:         GOSUB SET.FIELD
2389: 3b3c: 
2390: 3b3c:         CURSOR.POSITION% = OLD.POSITION%
2391: 3b52: 
2392: 3b52:         GOSUB PUT.CURSOR.IN.FIELD
2393: 3b64: 
2394: 3b64:         RETURN
2395: 3b74: 
2396: 3b74: \******************************************************************************
2397: 3b74: \***                                                                          *
2398: 3b74: \***    SUBROUTINE      :       DISPLAY.MESSAGE                               *
2399: 3b74: \***                                                                          *
2400: 3b74: \******************************************************************************
2401: 3b74: \***                                                                          *
2402: 3b74: \***    Display a new BEMF error message                                      *
2403: 3b74: \***                                                                          *
2404: 3b74: \******************************************************************************
2405: 3b74: 
2406: 3b74:         DISPLAY.MESSAGE:
2407: 3b84: 
2408: 3b84:         CURSOR.STATE$ = INVISIBLE$
2409: 3ba2:         GOSUB SET.CURSOR.STATE
2410: 3bb4: 
2411: 3bb4:         STRING.DATA$ = ""
2412: 3bcb:         OLD.POSITION% = CURSOR.POSITION%
2413: 3be1:         CURSOR.POSITION% = 1
2414: 3bf2: 
2415: 3bf2:         GOSUB PUT.CURSOR.IN.FIELD
2416: 3c04: 
2417: 3c04:         STRING.DATA$ = "31"
2418: 3c1b:         GOSUB SET.FIELD.ATTRIBUTES
2419: 3c2d: 
2420: 3c2d:         MESSAGE.NO% = DISPLAY.MESSAGE.NUMBER%
2421: 3c43:         STRING.DATA$ = DISPLAY.MESSAGE.TEXT$
2422: 3c61:         RETURN.FIELD% = 1
2423: 3c72: 
2424: 3c72:         CALL EXTERNAL.MESSAGE(MESSAGE.NO%,                             \
2425: 3c9b:                               STRING.DATA$,                            \
2426: 3c9b:                               RETURN.FIELD%)
2427: 3c9b: 
2428: 3c9b:         CURSOR.POSITION% = OLD.POSITION%
2429: 3cb1: 
2430: 3cb1:         GOSUB PUT.CURSOR.IN.FIELD
2431: 3cc3: 
2432: 3cc3:         CURSOR.STATE$ = VISIBLE$
2433: 3ce1:         GOSUB SET.CURSOR.STATE
2434: 3cf3: 
2435: 3cf3:         RETURN
2436: 3d03: 
2437: 3d03: \******************************************************************************
2438: 3d03: \***                                                                          *
2439: 3d03: \***    SUBROUTINE      :       SET.FIELD.ATTRIBUTES                          *
2440: 3d03: \***                                                                          *
2441: 3d03: \******************************************************************************
2442: 3d03: \***                                                                          *
2443: 3d03: \***    Redefine the specified field attributes                               *
2444: 3d03: \***                                                                          *
2445: 3d03: \******************************************************************************
2446: 3d03: 
2447: 3d03:         SET.FIELD.ATTRIBUTES:
2448: 3d13: 
2449: 3d13:         INTEGER.DATA% = 0
2450: 3d24: 
2451: 3d24:         CALL DM.SETF(STRING.DATA$,                                     \
2452: 3d46:                      INTEGER.DATA%)
2453: 3d46: 
2454: 3d46:         RETURN
2455: 3d56: 
2456: 3d56: \******************************************************************************
2457: 3d56: \***                                                                          *
2458: 3d56: \***    SUBROUTINE      :       SET.FIELD                                     *
2459: 3d56: \***                                                                          *
2460: 3d56: \******************************************************************************
2461: 3d56: \***                                                                          *
2462: 3d56: \***    Set the selected field with the data provided                         *
2463: 3d56: \***                                                                          *
2464: 3d56: \******************************************************************************
2465: 3d56: 
2466: 3d56:         SET.FIELD:
2467: 3d66: 
2468: 3d66:         INTEGER.DATA% = 0
2469: 3d77: 
2470: 3d77:         CALL DM.PUTF(STRING.DATA$,                                     \
2471: 3d99:                      INTEGER.DATA%)
2472: 3d99: 
2473: 3d99:         RETURN
2474: 3da9: 
2475: 3da9: \******************************************************************************
2476: 3da9: \***                                                                          *
2477: 3da9: \***    SUBROUTINE      :       PUT.CURSOR.IN.FIELD                           *
2478: 3da9: \***                                                                          *
2479: 3da9: \******************************************************************************
2480: 3da9: \***                                                                          *
2481: 3da9: \***    Position cursor in selected input field                               *
2482: 3da9: \***                                                                          *
2483: 3da9: \******************************************************************************
2484: 3da9: 
2485: 3da9:         PUT.CURSOR.IN.FIELD:
2486: 3db9: 
2487: 3db9:         STRING.DATA$ = ""
2488: 3dd0: 
2489: 3dd0:         INTEGER.DATA% = CURSOR.POSITION%
2490: 3de6: 
2491: 3de6:         CALL DM.POSF(STRING.DATA$,                                      \
2492: 3e08:                      INTEGER.DATA%)
2493: 3e08: 
2494: 3e08:         RETURN
2495: 3e18: 
2496: 3e18: \******************************************************************************
2497: 3e18: \***                                                                          *
2498: 3e18: \***    SUBROUTINE      :       CHAIN.TO.CALLER                               *
2499: 3e18: \***                                                                          *
2500: 3e18: \******************************************************************************
2501: 3e18: \***                                                                          *
2502: 3e18: \***    CHAIN back to the required screen program                             *
2503: 3e18: \***                                                                          *
2504: 3e18: \******************************************************************************
2505: 3e18: 
2506: 3e18:         CHAIN.TO.CALLER:
2507: 3e28: 
2508: 3e28:         GOSUB WAIT.MESSAGE
2509: 3e3a: 
2510: 3e3a:         PSBCHN.PRG = "C:\ADX_UPGM\" + CHAIN.TO.PROG$ + ".286"
2511: 3e63:         PSBCHN.APP = "C:\ADX_UPGM\PSB99.286"
2512: 3e7a: 
2513: 3e7a:         %INCLUDE PSBCHNE.J86
2514: 3e7a: \/*********************************************************************/ PSBCHNE
2515: 3e7a: \/*                                                                   */ PSBCHNE
2516: 3e7a: \/*      PSBCHNE.J86  -  Chain to PSB Application Program             */ PSBCHNE
2517: 3e7a: \/*      ------------------------------------------------             */ PSBCHNE
2518: 3e7a: \/*                                                                   */ PSBCHNE
2519: 3e7a: \/*********************************************************************/ PSBCHNE
2520: 3e7a:                                                                        ! PSBCHNE
2521: 3e7a:         CHAIN  PSBCHN.PRG , PSBCHN.OP , PSBCHN.APP , PSBCHN.MENCON ,   \ PSBCHNE
2522: 3efa:                             PSBCHN.U1 , PSBCHN.U2  , PSBCHN.U3         ! PSBCHNE
2523: 3efa:                                                                        ! PSBCHNE
2524: 3efa: 
2525: 3efa:         RETURN
2526: 3f0a: 
2527: 3f0a: \******************************************************************************
2528: 3f0a: \******************************************************************************
2529: 3f0a: \***                                                                          *
2530: 3f0a: \***    E N D  O F  S U B R O U T I N E S                                     *
2531: 3f0a: \***                                                                          *
2532: 3f0a: \******************************************************************************
2533: 3f0a: \******************************************************************************
2534: 3f0a: 
2535: 3f0a: 
2536: 3f0a: \******************************************************************************
2537: 3f0a: \******************************************************************************
2538: 3f0a: \***                                                                          *
2539: 3f0a: \***    S T A R T  O F  E R R O R  R O U T I N E S                            *
2540: 3f0a: \***                                                                          *
2541: 3f0a: \******************************************************************************
2542: 3f0a: \******************************************************************************
2543: 3f0a: 
2544: 3f0a: \******************************************************************************
2545: 3f0a: \***                                                                          *
2546: 3f0a: \***    ERROR ROUTINE   :       FILE.ERROR                                    *
2547: 3f0a: \***                                                                          *
2548: 3f0a: \******************************************************************************
2549: 3f0a: 
2550: 3f0a:         FILE.ERROR:
2551: 3f1a: 
2552: 3f1a:         EVENT.NO% = 106
2553: 3f2a: 
2554: 3f2a:         FILE.NO$ = CHR$(SHIFT(CURRENT.REPORT.NUM%,8)) +                \
2555: 3f7d:                    CHR$(SHIFT(CURRENT.REPORT.NUM%,0))
2556: 3f7d: 
2557: 3f7d:         IF FILE.OPERATION$ = "O" THEN                                  \
2558: 3f9b:         BEGIN
2559: 3f9b:            MESSAGE.NO%   = 501
2560: 3fac:            VAR.STRING.2$ = RIGHT$("000" +                              \
2561: 3ff9:                            STR$(CURRENT.REPORT.NUM%),3)
2562: 3ff9:         ENDIF                                                          \
2563: 3ff9:         ELSE                                                           \
2564: 4001:         IF FILE.OPERATION$ = "R" THEN                                  \
2565: 4022:         BEGIN
2566: 4022:            MESSAGE.NO% = 508
2567: 4033:            VAR.STRING.2$ = RIGHT$("000" +                              \
2568: 409e:                            STR$(CURRENT.REPORT.NUM%),3) +              \
2569: 409e:                            UNPACK$(CURRENT.CODE$)
2570: 409e:         ENDIF                                                          \
2571: 409e:         ELSE                                                           \
2572: 40a6:         IF FILE.OPERATION$ = "W" THEN                                  \
2573: 40c4:         BEGIN
2574: 40c4:            MESSAGE.NO% = 509
2575: 40d5:            VAR.STRING.2$ = RIGHT$("000" +                              \
2576: 411f:                            STR$(CURRENT.REPORT.NUM%),3)
2577: 411f:         ENDIF
2578: 4127: 
2579: 4127:         VAR.STRING.1$ = FILE.OPERATION$ +                              \
2580: 4163:                         FILE.NO$ +                                     \
2581: 4163:                         PACK$(STRING$(12,"0"))
2582: 4163: 
2583: 4163:         CALL APPLICATION.LOG(MESSAGE.NO%,                              \
2584: 4199:                              VAR.STRING.1$,                            \
2585: 4199:                              VAR.STRING.2$,                            \
2586: 4199:                              EVENT.NO%)
2587: 4199: 
2588: 4199:         RETURN
2589: 41a9: 
2590: 41a9: \******************************************************************************
2591: 41a9: \***                                                                          *
2592: 41a9: \***    ERROR ROUTINE   :       OPEN.ERROR                                    *
2593: 41a9: \***                                                                          *
2594: 41a9: \******************************************************************************
2595: 41a9: 
2596: 41a9:         OPEN.ERROR:
2597: 41b9: 
2598: 41b9:         FILE.OPERATION$ = "O"
2599: 41d0:         GOSUB FILE.ERROR
2600: 41e2: 
2601: 41e2:         CHAIN.TO.PROG$ = "PSB50"
2602: 41f9:         PSBCHN.MENCON  = "000000"
2603: 4210:         GOTO CHAIN.TO.CALLER
2604: 421b: 
2605: 421b: \******************************************************************************
2606: 421b: \***                                                                          *
2607: 421b: \***    ERROR ROUTINE   :       ERROR.DETECTED                                *
2608: 421b: \***                                                                          *
2609: 421b: \******************************************************************************
2610: 421b: 
2611: 421b:         ERROR.DETECTED:
2612: 422b: 
2613: 422b:         CALL STANDARD.ERROR.DETECTED(ERRN,                             \
2614: 4258:                                      ERRF%,                            \
2615: 4258:                                      ERRL,                             \
2616: 4258:                                      ERR)
2617: 4258: 
2618: 4258:         CHAIN.TO.PROG$ = "PSB50"
2619: 426f:         RESUME CHAIN.TO.CALLER
2620: 4286: 
2621: 4286:         END SUB
2622: 429a: 
2623: 429a: End of Compilation
