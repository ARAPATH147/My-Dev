   1: 0000: \***********************************************************************
   2: 0000: \* 
   3: 0000: \* BGCHECK.286               David Artiss                    14/04/2009
   4: 0000: \*
   5: 0000: \* Designed to be run via NFM, this will check sales and stock support,
   6: 0000: \* LINK1 and NFMC and output whether they are working or not.
   7: 0000: \*
   8: 0000: \* NFM will receive 1 of 4 possible responses...
   9: 0000: \* WRONG - This is not being run on the file server
  10: 0000: \* GOOD - All tasks are working
  11: 0000: \* BAD - One of the tasks is not active
  12: 0000: \* ABEND - The program has abended
  13: 0000: \*
  14: 0000: \* Version B                 David Artiss                    21/07/2010
  15: 0000: \* Improved to check for LINK1 and NFMC.
  16: 0000: \* 
  17: 0000: \* Version C                 Ranjith Gopalankutty            26/01/2017
  18: 0000: \* Program was reporting only  sales suport, stock support and NFMC.
  19: 0000: \* upgraded the program so that it reports all current applications
  20: 0000: \* also removed checking of program LINK1. As it doesn't hold true for
  21: 0000: \* all stores
  22: 0000: \* 
  23: 0000: \***********************************************************************
  24: 0000: 
  25: 0000:    STRING GLOBAL    ADX.PARM$, \
  26: 0000:                     FAIL$
  27: 0000: 
  28: 0000:    INTEGER*2 GLOBAL RC%
  29: 0000: 
  30: 0000:    %INCLUDE ADXSERVE.J86
  31: 0000: \******************************************************************************
  32: 0000: \******************************************************************************
  33: 0000: \***                                                                        ***
  34: 0000: \***    %INCLUDE FOR FUNCTION ADXSERVE (an I.B.M. system function)          ***
  35: 0000: \***                                                                        ***
  36: 0000: \***         AUTHOR        :  Bruce Scriver                                 ***
  37: 0000: \***                                                                        ***
  38: 0000: \***         DATE WRITTEN  :  14th March 1986                               ***
  39: 0000: \***                                                                        ***
  40: 0000: \***         DATE OF LAST REVISION  - 14th March 1986                       ***
  41: 0000: \***                                                                        ***
  42: 0000: \***                                                                        ***
  43: 0000: \******************************************************************************
  44: 0000: \******************************************************************************
  45: 0000: 
  46: 0000:    SUB ADXSERVE (RETURN.CODE%,                                                \
  47: 0000:                  ADX.FUNCTION%,                                               \
  48: 0000:                  ADX.PARM.1%,                                                 \
  49: 0000:                  ADX.PARM.2$)                                                 \
  50: 0000:    EXTERNAL
  51: 0000:   
  52: 0000:       STRING     ADX.PARM.2$
  53: 0000: 
  54: 0000:       INTEGER*2  ADX.FUNCTION%,                                               \
  55: 0000:                  ADX.PARM.1%
  56: 0000: 
  57: 0000:       INTEGER*4  RETURN.CODE%                                                 \
  58: 0000: 
  59: 0000:    END SUB     
  60: 0000: 
  61: 0000:    %INCLUDE BASROUT.J86
  62: 0000: \*LIB   BVEJ BASROUT  J86      03/11/97 08:16:26 PIDBLD3  *    FIX
  63: 0000: \*PROM  BVEJ BASROUT  J86      03/10/97 17:18:40 PIDBLD3  MVEJ IR34352
  64: 0000: \*RTIME BVEJ BASROUT  J86      03/10/97 17:18:41 PIDBLD3  MVEJ IR34352
  65: 0000: \*LIB   MVEJ BASROUT  J86      03/05/97 10:48:46 EDJRAL   *    IR34352
  66: 0000: \*LIB   MVEJ BASROUT  J86      02/17/97 11:19:56 EDJRAL   *    REASONAR
  67: 0000: \*LIB   MVEJ BASROUT  J86      02/14/97 15:59:11 EDJRAL   *    REASONAR
  68: 0000: ! BASROUT.J86 - this file is to be included in any BASIC code which utilizes
  69: 0000: !   the BASROUT.OBJ routines.  These routines were written
  70: 0000: !  using Metaware C and are intended to provide functions which
  71: 0000: !         are either not available in 4680 CBASIC or which can be more
  72: 0000: !               efficiently handled by the C language.  Their usage is
  73: 0000: !  offered on an "AT YOUR OWN RISK" basis.
  74: 0000: !
  75: 0000: !               The insert/extract routines usefulness may not be immediately
  76: 0000: !               apparent.  Their intention is that they be used in conjunction
  77: 0000: !               with a read/write form command.  They can more efficiently
  78: 0000: !               parse a string into many different variables than can the
  79: 0000: !               read form statement.  So instead of a long list of data var's
  80: 0000: !               it may be more efficient to just read/write one long string
  81: 0000: !               and then use the insert/extract routines to parse out the
  82: 0000: !   data.
  83: 0000: 
  84: 0000: ! ******************* SUB PROCESS FUNCTIONS *********************************
  85: 0000: 
  86: 0000: function osshell(cmd.line$) external   ! routine to start
  87: 0000:        ! another program.
  88: 0000:            integer*4    osshell    ! Upon completion of
  89: 0000:            string       cmd.line$   ! program, control is
  90: 0000:        ! returned to calling
  91: 0000: end function      ! program.
  92: 0000: !
  93: 0000: ! NOTES:  Program must be a 286 type file.  This does not exclude
  94: 0000: !         the capability to execute a batch file however.  Simply pass the
  95: 0000: !         following:
  96: 0000: !              c:\adx_spgm\command.286 batfile
  97: 0000: !         where batfile is the name of the batch file to be executed.
  98: 0000: !
  99: 0000: ! IMPORTANT: When using osshell to execute a batch file as described above,
 100: 0000: !            the final command in the batch file must be "exit".  If not,
 101: 0000: !       control is never given back to the calling program.
 102: 0000: 
 103: 0000: ! ************************ MEMORY RELATED FUNCTIONS ************************
 104: 0000: 
 105: 0000: function memfree(choice) external   ! routine to que the
 106: 0000:        ! status of the
 107: 0000:  integer*4 memfree    ! machine's memory:
 108: 0000:  integer*2 choice    ! Options:
 109: 0000:        !    1 - free
 110: 0000: end function      !    2 - total
 111: 0000:        !    3 - system
 112: 0000: 
 113: 0000: ! ********************** TIMEDATE RELATED FUNCTIONS ************************
 114: 0000: 
 115: 0000: function timedate(choice) external   ! routine to que the
 116: 0000:        ! OS's timedate table
 117: 0000:  integer*4 timedate   ! Choices:
 118: 0000:  integer*2 choice    !    1 - millisec's
 119: 0000:        !        since midnight
 120: 0000: end function      !    2 - minutes from
 121: 0000:        !  UCT (timezone)
 122: 0000:        !    3 - day of week
 123: 0000:        !   0-Sunday
 124: 0000:        !  6-Saturday
 125: 0000: 
 126: 0000: function settime(msecs) external   ! routine to set the
 127: 0000:        ! time on the controller
 128: 0000:  integer*4  settime    ! msecs is the desired
 129: 0000:  integer*4 msecs    ! number of milliseconds
 130: 0000:        ! since midnight
 131: 0000: end function      ! Returns negative on
 132: 0000:        ! error
 133: 0000: ! NOTE:  This routine sets the time only on the controller.  The terminals'
 134: 0000: ! time will not be updated until 1 AM or unless a terminal is STC'd.
 135: 0000: ! At 1 AM the controller broadcasts the new time to all terminals.
 136: 0000: ! Insure this is taken into consideration when using this routine.
 137: 0000: 
 138: 0000: !******************** DISK FILE RELATED FUNCTIONS *************************
 139: 0000: 
 140: 0000: function truncate(name,length) external   ! routine to truncate
 141: 0000:        ! the specified file
 142: 0000:  integer*4 truncate   ! to a given length.
 143: 0000:  string  name
 144: 0000:  integer*4 length
 145: 0000: 
 146: 0000: end function
 147: 0000: 
 148: 0000: !******************** STRING VALUE RELATED FUNCTIONS **********************
 149: 0000: 
 150: 0000: function isalpha(bstrn) external   ! routine to identify
 151: 0000:        ! if the specified
 152: 0000:  integer*1 isalpha    ! string contains all
 153: 0000:  string  bstrn    ! alphabetic char's
 154: 0000:        ! Returns:
 155: 0000: end function      !     0 - all alpha
 156: 0000:        !     X - byte of 1st
 157: 0000:        !         non-alpha
 158: 0000:        !   char
 159: 0000: 
 160: 0000: function isdigit(bstrn) external   ! routine to identify
 161: 0000:        ! if the specified
 162: 0000:  integer*1 isdigit    ! string contains all
 163: 0000:  string  bstrn    ! numeric char's
 164: 0000:        ! Returns:
 165: 0000: end function      !     0 - all numeric
 166: 0000:        !     X - byte of 1st
 167: 0000:        !         non-numeric
 168: 0000:        !   char
 169: 0000: 
 170: 0000: function islower(bstrn) external   ! routine to identify
 171: 0000:        ! if the specified
 172: 0000:  integer*1 islower    ! string contains all
 173: 0000:  string  bstrn    ! lower case char's
 174: 0000:        ! Returns:
 175: 0000: end function      !     0 - all lowercase
 176: 0000:        !     X - byte of 1st
 177: 0000:        !         non-lowercase
 178: 0000:        !   char
 179: 0000: 
 180: 0000: function isupper(bstrn) external   ! routine to identify
 181: 0000:        ! if the specified
 182: 0000:  integer*1 isupper    ! string contains all
 183: 0000:  string  bstrn    ! upper case char's
 184: 0000:        ! Returns:
 185: 0000: end function      !     0 - all uppercase
 186: 0000:        !     X - byte of 1st
 187: 0000:        !         non-uppercase
 188: 0000:        !   char
 189: 0000: 
 190: 0000: function toalpha(bstrn) external   ! routine to convert
 191: 0000:        ! non-alpha or non-num
 192: 0000:    integer*2 toalpha    ! char's to spaces
 193: 0000:  string  bstrn    ! Returns:
 194: 0000: end function      !   x - no. of char's
 195: 0000:        !       changed
 196: 0000: 
 197: 0000: ! ********************* USER/GROUP ZERO LEVEL FUNCTIONS *********************
 198: 0000: 
 199: 0000: function idlecount(choice) external   ! routine to either
 200: 0000:        ! set to zero or queue
 201: 0000:  integer*4 idlecount   ! the value of the
 202: 0000:  integer*1 choice    ! processor's idlecount
 203: 0000:        ! Choice:
 204: 0000: end function      !     0 - set to zero
 205: 0000: !       !     1 - get value
 206: 0000: ! NEEDS USER/GROUP 0 LEVEL OF AUTHORIZATION  ! Returns:
 207: 0000: ! TO WORK - This level is not available unless  !     X - idlecount
 208: 0000: ! the file ADXCSOUF.DAT file is "patched".  This !    -X - error code
 209: 0000: ! is highly unrecommended.
 210: 0000: 
 211: 0000: function logical(actname,logname,choice) external ! routine to set a
 212: 0000:        ! a logical name.
 213: 0000:  integer*4 logical    ! parms are self
 214: 0000:         string  logname    ! explanatory except
 215: 0000:  string  actname    ! for choice:
 216: 0000:  integer*1 choice    !   0 - set process
 217: 0000:        !   1 - set system
 218: 0000: end function      !   2 - get process
 219: 0000:        !   3 - get system
 220: 0000: 
 221: 0000: ! NOTE:  Only the setting of a system level of logical name requires
 222: 0000: ! user/group zero level of authorization.  Any application may query any
 223: 0000: ! logical name.  Setting of a system logical name is only applicable until
 224: 0000: ! the system is IPL'd.  A process logical name is only active when that
 225: 0000: ! process is active.
 226: 0000: 
 227: 0000: !******************** STRING PARSING FUNCTIONS *****************************
 228: 0000: 
 229: 0000: function inserts(whole,part,offset) external  ! routine to insert a
 230: 0000:        ! string (part) into
 231: 0000:  integer*2 INSERTS    ! another string (whole)
 232: 0000:  string  whole    ! starting at specified
 233: 0000:  string  part    ! character (offset)
 234: 0000:  integer*2 offset
 235: 0000: 
 236: 0000: end function
 237: 0000: 
 238: 0000: function cinsert4(integer4,bstring,offset) external   ! routine to insert
 239: 0000:        ! a 4-byte integer into
 240: 0000:  integer*1 cinsert4   ! a string starting at
 241: 0000:  integer*4 integer4   ! byte specified by
 242: 0000:  string  bstring    ! offset (1-based)
 243: 0000:  integer*2 offset    ! Returns:
 244: 0000:        !     0 - Success
 245: 0000: end function      !    -1 - String overrun
 246: 0000: 
 247: 0000: function cinsert2(integer2,bstring,offset) external  ! routine to insert
 248: 0000:        ! a 2-byte integer into
 249: 0000:  integer*1 cinsert2   ! a string starting at
 250: 0000:  integer*2 integer2   ! byte specified by
 251: 0000:  string  bstring    ! offset (1-based)
 252: 0000:  integer*2 offset    ! Returns:
 253: 0000:        !     0 - Success
 254: 0000: end function      !    -1 - String overrun
 255: 0000: 
 256: 0000: function cinsert1(bstring,integer1,offset) external  ! routine to insert
 257: 0000:        ! a 1-byte integer into
 258: 0000:  integer*1 cinsert1   ! a string starting at
 259: 0000:  integer*1 integer1   ! byte specified by
 260: 0000:  string  bstring    ! offset (1-based)
 261: 0000:  integer*2 offset    ! Returns:
 262: 0000:        !     0 - Success
 263: 0000: end function      !    -1 - String overrun
 264: 0000: 
 265: 0000: function extracts(whole,part,offset) external  ! routine to extract a
 266: 0000:        ! string (part) from
 267: 0000:  integer*2 EXTRACTS   ! another string (whole)
 268: 0000:  string  whole    ! starting at specified
 269: 0000:  string  part    ! character (offset)
 270: 0000:  integer*2 offset
 271: 0000: 
 272: 0000: end function
 273: 0000: 
 274: 0000: function cextract4(bstring,offset) external  ! routine to extract
 275: 0000:        ! a 4-byte integer from
 276: 0000:  integer*4 cextract4   ! a string starting at
 277: 0000:                        ! byte specified by
 278: 0000:  string  bstring    ! offset (1-based)
 279: 0000:  integer*2 offset    ! Returns:
 280: 0000:        !     X - 4 byte integer
 281: 0000: end function      !    -1 - String overrun
 282: 0000: 
 283: 0000: function cextract2(bstring,offset) external  ! routine to extract
 284: 0000:        ! a 2-byte integer from
 285: 0000:  integer*2 cextract2   ! a string starting at
 286: 0000:                        ! byte specified by
 287: 0000:  string  bstring    ! offset (1-based)
 288: 0000:  integer*2 offset    ! Returns:
 289: 0000:        !     X - 2 byte integer
 290: 0000: end function      !    -1 - String overrun
 291: 0000: 
 292: 0000: function cextract1(bstring,offset) external  ! routine to extract
 293: 0000:        ! a 1-byte integer from
 294: 0000:  integer*1 cextract1   ! a string starting at
 295: 0000:                        ! byte specified by
 296: 0000:  string  bstring    ! offset (1-based)
 297: 0000:  integer*2 offset    ! Returns:
 298: 0000:        !     X - 1 byte integer
 299: 0000: end function      !    -1 - String overrun
 300: 0000: 
 301: 0000: 
 302: 0000: function srchdir (file.name$,dtbl.buffer$) external ! routine to return
 303: 0000:        ! file names and sizes
 304: 0000:        ! Return values:
 305: 0000:        !    -1  no matches
 306: 0000:        !        found on first
 307: 0000:        !        call
 308: 0000:        !    0   no matches
 309: 0000:        !        found on sub-
 310: 0000:        !        sequent calls
 311: 0000:        !    Pos Success
 312: 0000:        !    Neg OS Rtn Code
 313: 0000: ! Usage Note:  If searching for all occurences of a particular file name,
 314: 0000: ! first initialize dtbl.buffer$ to 48 Nulls (pack$("00")) and issue a call
 315: 0000: ! to srchdir.  If any matches are found, a positive value will be returned.
 316: 0000: ! To see if any more matches exist, just issue another call to srchdir without
 317: 0000: ! resetting the values of dtbl.buffer$.  If any are found, a positive value
 318: 0000: ! will be returned.  This can be repeated until a Zero is returned.  All data
 319: 0000: ! describing file will be returned in the dtbl.buffer$ after each call.  Format
 320: 0000: ! of this data is defined below.
 321: 0000: 
 322: 0000:  integer*4 srchdir
 323: 0000: 
 324: 0000:  string  file.name$   ! file name to start
 325: 0000:        ! search (18 bytes max)
 326: 0000:        ! Wild cards and logical
 327: 0000:        ! names supported.
 328: 0000: 
 329: 0000:  string  dtbl.buffer$   ! must be initialized
 330: 0000:        ! to 48 bytes.  Contains
 331: 0000:        ! all of directory info
 332: 0000:        ! Initialize to nulls
 333: 0000:        ! each time a new file
 334: 0000:        ! name is used.
 335: 0000: 
 336: 0000: ! NOTE:  Format of dtbl.buffer$ string is as follows:
 337: 0000: !
 338: 0000: ! Offs  Type                    Description Notes
 339: 0000: !  0 integer*4  key  use extract4 to access
 340: 0000: !  4  string (18 bytes) file name
 341: 0000: ! 22 integer*2  attributes use extract2 to access
 342: 0000: !      0x01 - Read Only
 343: 0000: !      0x02 - Hidden
 344: 0000: !      0x04 - System
 345: 0000: !      0x08 - Volume Label
 346: 0000: !      0x10 - Subdirectory
 347: 0000: !      0x20 - Archive (Files)
 348: 0000: !      0x40 - Security enabled
 349: 0000: !      0x80 - Reserved
 350: 0000: !      0x0000 - Local
 351: 0000: !      0x4000 - Mirrored/Update
 352: 0000: !      0xC000 - Mirrored/Close
 353: 0000: !
 354: 0000: !      0x6000 - Compound/Update
 355: 0000: !      0xE000 - Compound/Close
 356: 0000: ! 24 integer*2  record size use extract2 to access
 357: 0000: ! 26 integer*1  User ID of Owner
 358: 0000: ! 27 integer*1  Group ID of Owner
 359: 0000: ! 28 integer*2  File Security
 360: 0000: ! 30 string (6 bytes) Reserved
 361: 0000: ! 36 integer*4  File Size use extract4 to access
 362: 0000: ! 40 integer*2  Year  use extract2 to access
 363: 0000: ! 42 integer*1  Month
 364: 0000: ! 43 integer*1  Day
 365: 0000: ! 44 integer*1  Hour
 366: 0000: ! 45 integer*1  Minute
 367: 0000: ! 46 integer*1  Second
 368: 0000: ! 47 integer*1  Reserved
 369: 0000: 
 370: 0000: end function
 371: 0000: 
 372: 0000: function srchproc (proc.name$,ptbl.buffer$) external ! routine to return
 373: 0000:        ! process names and
 374: 0000:        ! status.  Handy to
 375: 0000:        ! determine if a
 376: 0000:        ! program is currently
 377: 0000:        ! running.
 378: 0000:        ! Return values:
 379: 0000:        !    -1  no matches
 380: 0000:        !        found on first
 381: 0000:        !        call
 382: 0000:        !    0   no matches
 383: 0000:        !        found on sub-
 384: 0000:        !        sequent calls
 385: 0000:        !    Pos Success
 386: 0000:        !    Neg Failure
 387: 0000:        !        OS Rtn Code
 388: 0000:        ! 80000001h - Insuff
 389: 0000:         !        ptbl buffer
 390: 0000:        !        Length
 391: 0000: ! Usage Note:  If searching for all occurences of a particular process name,
 392: 0000: ! first initialize ptbl.buffer$ to 60 Nulls (pack$("00")) and issue a call
 393: 0000: ! to srchproc.  If any matches are found, a positive value will be returned.
 394: 0000: ! To see if any more matches exist, just issue another call to srchproc without
 395: 0000: ! resetting the values of ptbl.buffer$.  If any are found, a positive value
 396: 0000: ! will be returned.  This can be repeated until a Zero is returned.  All data
 397: 0000: ! describing file will be returned in the ptbl.buffer$ after each call.  Format
 398: 0000: ! of this data is defined as follows:
 399: 0000: !
 400: 0000: !       --------------------------------------------------------
 401: 0000: !   0   |                         PID                          |
 402: 0000: !       --------------------------------------------------------
 403: 0000: !   4   |           FID             |   CID        |   VCID    |
 404: 0000: !       --------------------------------------------------------
 405: 0000: !   8   |                         NAME                         |
 406: 0000: !       --------------------------------------------------------
 407: 0000: !  12   |                         NAME cont'd                  |
 408: 0000: !       --------------------------------------------------------
 409: 0000: !  16   |       NAME cont'd         |   STATE      |  PRIOR    |
 410: 0000: !       --------------------------------------------------------
 411: 0000: !  20   |                         MAXMEM                       |
 412: 0000: !       --------------------------------------------------------
 413: 0000: !  24   |       FLAGS               |   USER        |  GROUP   |
 414: 0000: !       --------------------------------------------------------
 415: 0000: !  28   |                         PARENT                       |
 416: 0000: !       --------------------------------------------------------
 417: 0000: !  32   |                         EVENTS                       |
 418: 0000: !       --------------------------------------------------------
 419: 0000: !  36   |                         CODE                         |
 420: 0000: !       --------------------------------------------------------
 421: 0000: !  40   |                         CSIZE                        |
 422: 0000: !       --------------------------------------------------------
 423: 0000: !  44   |                         DATA                         |
 424: 0000: !       --------------------------------------------------------
 425: 0000: !  48   |                         DSIZE                        |
 426: 0000: !       --------------------------------------------------------
 427: 0000: !  52   |                         HEAP                         |
 428: 0000: !       --------------------------------------------------------
 429: 0000: !  56   |                         HSIZE                        |
 430: 0000: !       --------------------------------------------------------
 431: 0000: !
 432: 0000: !       PID   Process ID
 433: 0000: !       FID  Process's Family ID
 434: 0000: !       CID   Physical Console Device Number
 435: 0000: !       VCID  Process's Virtual Console Number
 436: 0000: !       NAME  Process Name (Application Running)
 437: 0000: ! STATE    Process State (0-Run, 1-Waiting, 2-Terminating)
 438: 0000: ! PRIOR    Priority
 439: 0000: !       MAXMEM  Maximum Memory Allowed
 440: 0000: !       FLAGS  Bit 0 (1-System Process, 0-User Process)
 441: 0000: !   Bit 1 (1-Locked in Memory, 0-Swappable)
 442: 0000: !   Bit 2 (1-Running in SWI context, 0-Running in main context)
 443: 0000: !   Bit 3 (1-Superuser Process,0-Not a Superuser Process)
 444: 0000: ! USER  User Number
 445: 0000: ! GROUP  Group Number
 446: 0000: !       PARENT   Parent Process ID
 447: 0000: !       EVENTS   Bit Map of events that have completed but not retrieved
 448: 0000: !       CODE  Start of code area in user space
 449: 0000: ! CSIZE  Size in bytes of code area
 450: 0000: !       DATA  Start of data area in user space
 451: 0000: ! DSIZE  Size in bytes of data area
 452: 0000: !       HEAP  Start of heap area in user space
 453: 0000: ! HSIZE  Size in bytes of heap area
 454: 0000: !
 455: 0000:  integer*4 srchproc
 456: 0000: 
 457: 0000:  string  proc.name$   ! process name to start
 458: 0000:        ! search (10 bytes max)
 459: 0000:        ! Wild cards and logical
 460: 0000:        ! names supported.
 461: 0000: 
 462: 0000:  string  ptbl.buffer$   ! must be initialized
 463: 0000:        ! to 60 bytes.  Contains
 464: 0000:        ! all of process info
 465: 0000:        ! Initialize to nulls
 466: 0000:        ! each time a new
 467: 0000:        ! process name is used.
 468: 0000: 
 469: 0000: end function
 470: 0000: 
 471: 0000: function cconstat(timeout) external       ! function similar
 472: 0000:                                               ! to BASIC constat%
 473: 0000:  integer*2 cconstat   ! waits for either a
 474: 0000:  integer*4 timeout    ! key being hit or
 475: 0000:        ! the timer expiring
 476: 0000:        ! before returning
 477: 0000:        ! returns:
 478: 0000:        !   -1 error
 479: 0000:        !    0 timer expired
 480: 0000:        !    x scan code of
 481: 0000:        !      key hit
 482: 0000: end function
 483: 0000: 
 484: 0000: function disksize(disk.name$) external   ! function to find
 485: 0000:        ! the total size of
 486: 0000:  integer*4 disksize   ! the specified disk
 487: 0000:  string  disk.name$   ! name (e.g. "h0:")
 488: 0000:        ! if return value is
 489: 0000:        ! negative, error
 490: 0000: end function      ! was received
 491: 0000: 
 492: 0000: 
 493: 0000: 
 494: 0000:     ON ERROR GOTO ERROR.DETECTED
 495: 002f: 
 496: 002f:     ! Call ADXSERVE and read record 4
 497: 002f: 
 498: 002f:     CALL  ADXSERVE(RC%,4,0,ADX.PARM$)
 499: 007e:     IF RC% <> 0 THEN GOTO ERROR.DETECTED
 500: 0093: 
 501: 0093:     ! Work out whether on file server or not
 502: 0093: 
 503: 0093:     RC% = VAL(MID$(ADX.PARM$,25,2))
 504: 00c0:     IF (RC% AND 04H) <> 04H AND RC% <> 0 THEN BEGIN
 505: 00ef:         PRINT "WRONG"
 506: 0100:         STOP
 507: 010d:     ENDIF
 508: 0115: 
 509: 0115: 
 510: 0115:     ! Check Sales Support
 511: 0115: 
 512: 0115:     RC% = SRCHPROC("EALCS00L*",STRING$(60,PACK$("00")))
 513: 0145:     IF RC% <= 0 THEN FAIL$ = "Yes"
 514: 0166: 
 515: 0166:     ! Check Stock Support
 516: 0166: 
 517: 0166:     RC% = SRCHPROC("PSS35*",STRING$(60,PACK$("00")))
 518: 0196:     IF RC% <= 0 THEN FAIL$ = "Yes"
 519: 01b7: 
 520: 01b7:     ! Check LINK1                                                       !BDA
 521: 01b7: 
 522: 01b7:     ! RC% = SRCHPROC("ADXHSNLL*",STRING$(60,PACK$("00")))               !CRG
 523: 01b7:     ! IF RC% <= 0 THEN FAIL$ = "Yes"                                    !CRG
 524: 01b7: 
 525: 01b7:     ! Check NFMC                                                        !BDA
 526: 01b7: 
 527: 01b7:     RC% = SRCHPROC("NFMC*",STRING$(60,PACK$("00")))                     !BDA
 528: 01e7:     IF RC% <= 0 THEN FAIL$ = "Yes"                                      !BDA
 529: 0208: 
 530: 0208:     ! Check TRANSACT                                                    !CRG
 531: 0208: 
 532: 0208:     RC% = SRCHPROC("TRANSACT*",STRING$(60,PACK$("00")))                 !CRG
 533: 0238:     IF RC% <= 0 THEN FAIL$ = "Yes"                                      !CRG
 534: 0259: 
 535: 0259:     ! Check BGMON                                                       !CRG
 536: 0259: 
 537: 0259:     RC% = SRCHPROC("BGMON*",STRING$(60,PACK$("00")))                    !CRG
 538: 0289:     IF RC% <= 0 THEN FAIL$ = "Yes"                                      !CRG
 539: 02aa: 
 540: 02aa:     ! Check QHANDLER                                                    !CRG
 541: 02aa: 
 542: 02aa:     RC% = SRCHPROC("QHANDLER*",STRING$(60,PACK$("00")))                 !CRG
 543: 02da:     IF RC% <= 0 THEN FAIL$ = "Yes"                                      !CRG
 544: 02fb: 
 545: 02fb:     ! Check QSERVER                                                     !CRG
 546: 02fb: 
 547: 02fb:     RC% = SRCHPROC("QSERVER*",STRING$(60,PACK$("00")))                  !CRG
 548: 032b:     IF RC% <= 0 THEN FAIL$ = "Yes"                                      !CRG
 549: 034c: 
 550: 034c:     ! Check QPROCESS                                                    !CRG
 551: 034c: 
 552: 034c:     RC% = SRCHPROC("QPROCESS*",STRING$(60,PACK$("00")))                 !CRG
 553: 037c:     IF RC% <= 0 THEN FAIL$ = "Yes"                                      !CRG
 554: 039d: 
 555: 039d:     ! Check QMON                                                        !CRG
 556: 039d: 
 557: 039d:     RC% = SRCHPROC("QMON*",STRING$(60,PACK$("00")))                     !CRG
 558: 03cd:     IF RC% <= 0 THEN FAIL$ = "Yes"                                      !CRG
 559: 03ee: 
 560: 03ee:     ! Check PSB90                                                       !CRG
 561: 03ee: 
 562: 03ee:     RC% = SRCHPROC("PSB90*",STRING$(60,PACK$("00")))                    !CRG
 563: 041e:     IF RC% <= 0 THEN FAIL$ = "Yes"                                      !CRG
 564: 043f: 
 565: 043f: 
 566: 043f:     ! Output appropriate message
 567: 043f: 
 568: 043f:     IF FAIL$ = "Yes" THEN BEGIN
 569: 045d:         PRINT "BAD"
 570: 0470:     ENDIF ELSE BEGIN
 571: 0478:         PRINT "GOOD"
 572: 0489:     ENDIF
 573: 0491: 
 574: 0491: PROGRAM.EXIT:
 575: 0499: 
 576: 0499:     STOP
 577: 04a6: 
 578: 04a6: ERROR.DETECTED:
 579: 04b6: 
 580: 04b6:    PRINT "ABEND"
 581: 04cc: 
 582: 04cc: END
 583: 04cc: End of Compilation
