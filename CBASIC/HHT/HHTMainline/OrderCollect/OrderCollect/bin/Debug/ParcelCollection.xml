<?xml version="1.0"?>
<doc>
<assembly>
<name>
ParcelCollection
</name>
</assembly>
<members>
<member name="M:ParcelCollection.ParcelSession.GetInstance">
	<summary>
 The shared function GetInstance will implement a check for the instantiation
 of class ParcelSession to make sure that the class has only one instance
 </summary>
	<returns>moBookIn</returns>
	<remarks></remarks>
</member><member name="M:ParcelCollection.ParcelSession.QueryController(System.String,ParcelCollection.ParcelSession.QUERY)">
	<summary>
 Function to send an OCQ query message to TRANSACT and process the response  
 </summary>
	<param name="cQueryString">Query Data</param>
	<param name="enQueryType">Query Type</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:ParcelCollection.ParcelSession.CheckParcelStatus">
	<summary>
 Function to check Parcel Status and display the corresponding pop-up message  
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:ParcelCollection.ParcelSession.ValidateBarcode(System.String)">
	<summary>
 Function to validate the barcode and extract the component fields  
 </summary>
	<param name="cBarcode">Barcode scanned or key-entered</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="T:ParcelCollection.ParcelSession">
****************************************************************************
 <FileName> ParcelSession.vb </FileName>
	<summary> Session manager for Bookin Only, Bookin and Put Away and Put Away/Move</summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.UserSession.GetInstance">
	<summary>
 The shared function GetInstance will implement a check for the instantiation
 of class UserSession to make sure that the class has only one instance
 </summary>
</member><member name="M:ParcelCollection.UserSession.#ctor">
	<summary>
 To intialise the local variables
 </summary>
</member><member name="M:ParcelCollection.UserSession.LaunchUser">
	<summary>
 Launches the User Logon form to the user
 </summary>
</member><member name="M:ParcelCollection.UserSession.EndSession">
	<summary>
 To end the session and release all the objects held by the UserSessionManager
 </summary>
</member><member name="M:ParcelCollection.UserSession.ValidateUser(System.String)">
	<summary>
 To validate the user credentials login to the device
 </summary>
	<param name="cUserEnteredText">3-digit User ID and 3 digit Password</param>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.UserSession.UpdateUserDetails">
	<summary>
 To update user details in the config file
 </summary>
</member><member name="T:ParcelCollection.UserSession">
****************************************************************************
 <FileName> UserSession.vb </FileName>
	<summary> Session manager for handling user signon</summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.InstanceChecker.fIsInstanceRunning">
	<summary>
 Function to check if an instance of the application is already running 
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:ParcelCollection.InstanceChecker.fClearMutex">
	<summary>
 Release the mutext at application exit.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ParcelCollection.InstanceChecker">
****************************************************************************
 <FileName> InstanceChecker.vb </FileName>
	<summary> Prevents multiple instances of the application running</summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.Initialise.Main">
	<summary>
 The Applicaiton startup sub routine.
 Initilises the application container and passes the control to the App Container.
 </summary>
	<remarks></remarks>
</member><member name="T:ParcelCollection.Initialise">
****************************************************************************
 <FileName> Initialise.vb </FileName>
	<summary> Main Initialisation Module - Program Entry Point/Startup object</summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="P:ParcelCollection.frmConnection.TimeoutCancel">
	<summary>
 Property to hold timeout cancel click select
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ParcelCollection.frmConnection.TimeoutRetry">
	<summary>
 Property to hold timeout retry click select
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ParcelCollection.frmConnection.ConnectToAlternate">
	<summary>
 Property to hold alternate controller connect
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ParcelCollection.frmConnection.#ctor">
	<summary>
 new - initializes the data pool object
 </summary>
	<remarks>Initialises the data pool</remarks>
</member><member name="M:ParcelCollection.frmConnection.btnCancelAlternate_Click(System.Object,System.EventArgs)">
	<summary>
 Function is invoked when user select OK on connect to Alternate message box.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:ParcelCollection.frmConnection.btnConnectAlternate_Click(System.Object,System.EventArgs)">
	<summary>
 Function is invoked when user select Alternate on connect to Alternate message box.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:ParcelCollection.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:ParcelCollection.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:ParcelCollection.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:ParcelCollection.BCReader.GetInstance">
	<summary>
 The shared function GetInstance will implement a check for the instantiation
 of class BCReader to make sure that the class has only one instance
 </summary>
	<returns>oBCReader</returns>
	<remarks></remarks>
</member><member name="M:ParcelCollection.BCReader.InitBCReader">
	<summary>
 Function to initialise Barcode Reader 
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="T:ParcelCollection.BCReader">
****************************************************************************
 <FileName> BCReader.vb </FileName>
	<summary> Barcode Reader Class - handles scanned barcodes </summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.RFDataManager.GetInstance">
	<summary>
 The shared function GetInstance will implement a check for the instantiation
 of class RFDataManager to make sure that the class has only one instance
 </summary>
</member><member name="M:ParcelCollection.RFDataManager.WaitForResponse(System.String@)">
	<summary>
 wait for a response from the Server
 </summary>
	<param name="strReceivedData">Message received from Server</param>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.RFDataManager.GetUserDetails(System.String)">
	<summary>
 Handles SOR Signon Request  and 
         SNR Signon Response from the Server
 </summary>
	<param name="cUserId">3-digit User Id plus 3-digit password</param>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.RFDataManager.LogOff">
	<summary>
 Handles OFF Signoff Request
 </summary>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.RFDataManager.CheckReconnect(System.Boolean)">
	<summary>
 Function to check the connection to the Controller/server and reconnect if needed 
 </summary>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.RFDataManager.ProcessSNR(System.String,ParcelCollection.AppMain.SNRMessage@)">
	<summary>
 (SNR) Process response for sign on request.
       Extract fields from message 
 </summary>
	<param name="objSNRMessage">Signon Response Message string</param>
	<param name="strSNRResponse">Signon Response Structure</param>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.RFDataManager.SendSOR(System.String,System.String)">
	<summary>
 (SOR) Send sign on request to the controller.
 </summary>
	<param name="UserName">User Name</param>
	<param name="Password">Password</param>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.RFDataManager.SendOFF(System.String)">
	<summary>
 (OFF) Send sign off request to the controller.
 </summary>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.RFDataManager.SendOCQ(System.String,System.Int32)">
	<summary>
 (OCQ) Order and Collect Query. 
 </summary>
	<param name="cParcelNumber">Parcel Number</param>
	<param name="iFlag">Type of query</param>
	<returns>Boolean: True if Query was sent and received or else False </returns>
</member><member name="M:ParcelCollection.RFDataManager.SendUpdate(System.String,System.Int32)">
	<summary>
 (OCU) Order and Collect Update. 
 </summary>
	<param name="cUpdate">Update string</param>
	<param name="iFlag">Type of update</param>
	<returns>Boolean: True if update sent or else False </returns>
</member><member name="T:ParcelCollection.RFDataManager">
****************************************************************************
 <FileName> RFDataManager.vb </FileName>
	<summary>
 Class to handle the Requests and Responses from the Server
 </summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.AppMain.AppInitialise">
	<summary>
 Application initialisation.
 Most of this will be performed when the Splash screen is displayed at application startup.
 </summary>
</member><member name="M:ParcelCollection.AppMain.AppTerminate">
	<summary>
 Sub Routine to perform all operations while the application is terminated.
 AppTerminate will release all objects created by the Container, dispose 
 all forms and gracefully kill the application.
 </summary>
	<remarks></remarks>
</member><member name="M:ParcelCollection.AppMain.displayCalcPadScreen(ParcelCollection.AppMain.CALCPADUSE)">
	<summary>
 Display the CalcPadScreen
 </summary>
</member><member name="M:ParcelCollection.AppMain.displaySplash">
	<summary>
 Display the splash screen while the application loads
 </summary>
</member><member name="T:ParcelCollection.AppMain">
****************************************************************************
 <FileName> AppMain.vb </FileName>
	<summary> Main Application Class Module </summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.ConnectionManager.GetInstance">
	<summary>
 The shared function GetInstance will implement a check for the instantiation
 of class ConnectionManager to make sure that the class has only one instance
 </summary>
</member><member name="M:ParcelCollection.ConnectionManager.Connect(System.String,System.Int32)">
	<summary>
 Function to try and establish a connection with the Controller/server
 </summary>
	<param name="address">String containing IP address xxx.xxx.xxx.27</param>
	<param name="port">String containing Port No. eg. 800</param>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.ConnectionManager.Disconnect">
	<summary>
 Function to disconnect connection with the Controller/server
 </summary>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.ConnectionManager.Connected">
	<summary>
 Returns true if the socket is connected to the server. The property
 "Socket.Connected" does not always indicate if the socket is currently
 connected, this polls the socket to determine the latest connection state.
 </summary>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.ConnectionManager.Send(System.String)">
	<summary>
 Function to send message to the Controller/server over the socket.
 It prefixes the message with control character FFh followed by a
 4-digit total message length (includes FFh + 4-digits in total).
 </summary>
	<param name="sSend">String containing message to send to server</param>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.ConnectionManager.Receive(System.String@)">
	<summary>
 Function to receive message from the Controller/server over the socket.
 </summary>
	<param name="receivedString">String containing response from server</param>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.ConnectionManager.CheckTimeout">
	<summary>
 Function to determine whether spinning hour-glass should be displayed or not
 </summary>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.ConnectionManager.fConnectAlternateInRF">
	<summary>
 Function to handle connection to alternate .28 server.
 Nb. this will only be successful in situations where the Primary
     .27 server is down and the .28 Secondary/Alternate file server 
     has been manually configured as Acting Master.
 </summary>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.ConnectionManager.ModuleReconnect">
	<summary>
 Function to handle atempts to reconnect to the controller.
 </summary>
	<remarks></remarks>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.ConnectionManager.HandleTimeOut">
	<summary>
 Function to handle timeout when there is no response received from Transact 
 for a predefined amount of time.
 </summary>
	<remarks></remarks>
	<returns>Boolean</returns>
</member><member name="M:ParcelCollection.ConnectionManager.EstablishConnection">
	<summary>
 tries to establish connection with controller 
 </summary>
	<remarks></remarks>
	<returns>booleon</returns>
</member><member name="M:ParcelCollection.ConnectionManager.ReconnectionHandler(System.String,System.DateTime)">
	<summary>
 handles the retry attempts to reconnect with the controller. 
 </summary>
	<param name="ReconnectMessage">message to be displayed</param>
	<param name="CurrentTryStamp">Current date</param>
	<remarks></remarks>
	<returns>Reconnection status</returns>
</member><member name="M:ParcelCollection.ConnectionManager.GetRetryMessage">
	<summary>
 Function to return the retry message when trying to reconnect to the controller
 when called from another thread.
 </summary>
	<remarks></remarks>
	<returns>Retry message - Retry {0} of 3 to reconnect.</returns>
</member><member name="M:ParcelCollection.ConnectionManager.RetryFailMessage">
	<summary>
 Function to return the failure message when unable to reconnect to the controller
 when called from another thread.
 </summary>
	<remarks></remarks>
	<returns>Reconnect message</returns>
</member><member name="T:ParcelCollection.ConnectionManager">
****************************************************************************
 <FileName> ConnectionManager.vb </FileName>
	<summary> Class to handle socket connections to TRANSACT on Controller.
           Also handles connection to Alternate .28 controller.
 </summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.MessageManager.#ctor">
	<summary>
 Read and load message config file when class is initialised
 </summary>
</member><member name="M:ParcelCollection.MessageManager.GetInstance">
	<summary>
 The shared function GetInstance will implement a check for the instantiation
 of class MessageManager to make sure that the class has only one instance
 </summary>
	<returns>m_Instance</returns>
</member><member name="M:ParcelCollection.MessageManager.GetMessage(System.String)">
	<summary>
 Reads message list and returns it to the calling function
 </summary>
	<param name="messageId">Message ID eg. M1</param>
	<returns>String</returns>
</member><member name="T:ParcelCollection.MessageManager">
****************************************************************************
 <FileName> MessageManager.vb </FileName>
	<summary>
 Class to handle the reading of the Order and Collect CSV Messages file.
 </summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.RecordFunc.processParcelRecord(System.String,ParcelCollection.ParcelSession.ParcelRecord)">
	<summary>
 Extracts parcel record into its component fields
 </summary>
	<param name="cRecord">String containing complete Parcel record</param>
	<param name="parcel">Parcel record structure</param>
	<returns>Structure Parcel Record</returns>
</member><member name="M:ParcelCollection.RecordFunc.processOrderRecord(System.String,ParcelCollection.ParcelSession.OrderRecord)">
	<summary>
 Extracts Order record into its component fields
 </summary>
	<param name="cRecord">String containing complete Order record</param>
	<param name="order">Order record structure</param>
	<returns>Structure Order Record</returns>
</member><member name="M:ParcelCollection.RecordFunc.processLocationRecord(System.String,ParcelCollection.ParcelSession.LocationRecord)">
	<summary>
 Extracts Location record into its component fields
 </summary>
	<param name="cRecord">String containing complete Location record</param>
	<param name="Location">Location record structure</param>
	<returns>Structure Location Record</returns>
</member><member name="M:ParcelCollection.RecordFunc.saveToCurrentParcel(ParcelCollection.ParcelSession.ParcelRecord)">
	<summary>
 Assigns latest Parcel structure to Current Parcel structure
 </summary>
	<param name="parcel">String containing current parcel record</param>
	<returns>Structure Current Parcel Record</returns>
</member><member name="M:ParcelCollection.RecordFunc.buildParcelRecord(ParcelCollection.ParcelSession.CurrentParcel)">
	<summary>
 Builds Parcel record that will be used to update server via OCU message
 </summary>
	<param name="oParcel">String containing current parcel record</param>
	<returns>String</returns>
</member><member name="T:ParcelCollection.RecordFunc">
****************************************************************************
 <FileName> RecordFunc.vb </FileName>
	<summary>
 Functions for processing records from Transact
 </summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.ConfigFileManager.#ctor">
	<summary>
 Read configfile to configlist when class is initialised
 </summary>
</member><member name="M:ParcelCollection.ConfigFileManager.GetInstance">
	<summary>
 The shared function GetInstance will implement a check for the instantiation
 of class ConfigFileManager to make sure that the class has only one instance
 </summary>
</member><member name="M:ParcelCollection.ConfigFileManager.GetParam(System.String)">
	<summary>
 Get the value for the passed parameter from the configlist
 </summary>
	<param name="cParam">String containing Message Id,Message 
                      read from file eg. M1,Error</param>
	<returns>String</returns>
</member><member name="M:ParcelCollection.ConfigFileManager.SetParam(System.String,System.String)">
	<summary>
 Set the value for the passed parameter from the configuration list
 </summary>
</member><member name="M:ParcelCollection.ConfigFileManager.Update">
	<summary>
 Update the configuration gfile with all records in the configuration list
 </summary>
</member><member name="M:ParcelCollection.ConfigFileManager.GetReleaseVersion">
	<summary>
 Function to get the release version from the configuration list 
 </summary>
	<returns>String</returns>
</member><member name="T:ParcelCollection.ConfigFileManager">
****************************************************************************
 <FileName> ConfigFileManager.vb </FileName>
	<summary>
 Class to handle the reading of the Order and Collect CSV configuration file
 </summary>
	<Version>1.0</Version>
	<Author>Andrew Paton</Author>
	<DateModified>11-05-2016</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC55RF</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK </CopyRight>
****************************************************************************
* Modification Log 
**************************************************************************** 
  1.0    Andrew Paton                             11/05/2016        
         Inital Version.
 
**************************************************************************** 

</member><member name="M:ParcelCollection.frmCalcPad.frmCalcPad_Load">
	<summary>
 To set the timer at load event close calcpad before autologoff.
 </summary>
	<remarks></remarks>
</member><member name="M:ParcelCollection.frmCalcPad.tmrChecker_Tick(System.Object,System.EventArgs)">
	<summary>
 Handle the tick event to close calcpad form.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:ParcelCollection.DeviceFunc.GetInstance">
	<summary>
 The shared function GetInstance will implement a check for the instantiation
 of class DeviceFunc to make sure that the class has only one instance
 </summary>
</member><member name="M:ParcelCollection.DeviceFunc.GetMacAddress">
	<summary>
 Gets the MAC address of the device to be sent in SOR
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ParcelCollection.DeviceFunc.GetIPAddress">
	<summary>
 To check for the dynamic IP generated when the device is docked
 </summary>
	<remarks></remarks>
</member><member name="M:ParcelCollection.DeviceFunc.CheckForFreeMemory(System.String,System.Int64@)">
	<summary>
 To check for free memory in the device
 </summary>
	<param name="folder"></param>
	<param name="iFreemem"></param>
	<remarks>The folder of which the free memory needs to be calculated</remarks>
</member>
</members>
</doc>