<?xml version="1.0"?>
<doc>
<assembly>
<name>
MCDownloader
</name>
</assembly>
<members>
<member name="F:MCDownloader.Restart.m_Restart">
	<summary>
 Pricete variables.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.Restart.GetInstance">
	<summary>
 To Get unique instance of the class object.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.Restart.ResetPocketPC">
	<summary>
 Function to reset pocket PC.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.#ctor">
	<summary>
 Construction 
 Does the xml creation if the xml is not created
 Reads data from xml for general operations
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.GetInstance">
	<summary>
 GetInstance method of singleton  class
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.WriteXml">
	<summary>
 Method to write the object parameters to an XML file
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.ReadXml">
	<summary>
 Method to read the xml into and object
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.IsFileAlreadyDownloaded(System.String)">
	<summary>
 Check if the file active as per synctrlf file is already
 downloaded during a previous session
 </summary>
	<param name="strFileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.UpdateDBpopulationStatus(System.String,System.String,System.String)">
	<summary>
 UpdateDBpopulationStatus method to update file status
 when the file is succesfull populated to DB
 </summary>
	<param name="strFileName"></param>
	<param name="strStatus"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.UpdateDBPopulationIndex(System.String,System.Int32,System.String)">
	<summary>
 UpdateDBPopulationIndex, method to keep the pointer on file
 upto which the DB has been populated( Used to restart a session
 when DB population fails due to exception
 </summary>
	<param name="strFileName"></param>
	<param name="iIndex"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.AddToXml(System.String)">
	<summary>
 AddToXML, method to add downloaded file details to XML
 </summary>
	<param name="strName"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.GetPartiallyProcessedFiles">
	<summary>
 Method to get the list of partially populated files
 Files may be partially populated to db due to error scenarios
 The recovery is done using the last index populated
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.GetUnProcessedFiles">
	<summary>
 Function to get the list of file not processed.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.UpdateParams">
	<summary>
 Method to update the xml when a number of parameters are modified
 Something like a bulk commit
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchConfigParser.PurgeFile">
	<summary>
 Purge the data avaialable in the Batch Config xml file.
 </summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.BatchConfigParser">
****************************************************************************
 <FileName>AppContainer.vb</FileName>
	<summary>
 Class BatchConfigParser - A singleton class to perform the 
 data handling operations of the details of reference files 
 downloaded. The SyncLock is used to restric access to block of code
 </summary>
	<Version>1.0</Version>
	<Author>Infosys Technologies Ltd.</Author>
	<DateModified>21-Nov-2008</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC70</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK 2008</CopyRight> 
****************************************************************************

</member><member name="T:MCDownloader.Utility.IP_ADDR_STRING">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.Utility.IP_ADAPTER_INFO">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.Utility.GetMacAddress">
	<summary>
 Gets the MAC address of the device to be sent in SOR
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.Utility.GetIPAddress">
	<summary>
 To check for the dynamic IP generated when the device is docked
 </summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.Macros">
 * Modification Log
 
****************************************************************************
* 1.1    Archana Chandramathi    Jan 2013    
 <Summary>
 MCF changes - Loads controller IP address from IPCONFG.XML file
 </Summary>
****************************************************************************

</member><member name="M:MCDownloader.CustomStatusBar.SetMessage(MCDownloader.CustomStatusBar.MSGTYPE)">
	<summary>
 Allows the user to set the message on the label
 </summary>
	<param name="messageStatus"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.CustomStatusBar.SetStoreId">
	<summary>
 Allows user to set the store id
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.CustomStatusBar.SetMessage(System.String)">
	<summary>
 Method to set the custom message to status bar
 </summary>
	<param name="strMessage"></param>
	<remarks></remarks>
</member><member name="T:MCDownloader.CustomStatusBar.MSGTYPE">
	<summary>
 Enum to handle message type
 </summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.CustomStatusBar">
***************************************************************
 <FileName>CustomStatusBar.vb</FileName>
	<summary>
 This class defines the custom status bar to display information to the user
 </summary>
	<Version>1.0</Version>
	<Author>Infosys Technologies Ltd.</Author>
	<DateModified>30 Oct 2008</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC70</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK 2008</CopyRight>
***************************************************************

</member><member name="M:MCDownloader.TFTPClient.TFTPSession.Put(System.String,System.String,System.String,MCDownloader.TFTPClient.TFTPSession.Modes,System.Int32,System.Int32,System.Int32)">
	<summary>
 Function to put file from client to the server.
 </summary>
	<param name="LocalFile"></param>
	<param name="RemoteFile"></param>
	<param name="Host"></param>
	<param name="Mode"></param>
	<param name="BlockSize"></param>
	<param name="Timeout"></param>
	<param name="Port"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.TFTPClient.TFTPSession.Put(System.Object)">
	<summary>
 Put function.
 </summary>
	<param name="objTransferOptions"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.TFTPClient.TFTPSession.Put(System.String)">
	<summary>
 Overloaded Put function.
 </summary>
	<param name="File"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.TFTPClient.TFTPSession.Put(System.String,System.String)">
	<summary>
 Overloaded Put function.
 </summary>
	<param name="File"></param>
	<param name="Host"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.TFTPClient.TFTPSession.Put(System.String,System.String,System.String)">
	<summary>
 Overloaded Put function.
 </summary>
	<param name="LocalFile"></param>
	<param name="RemoteFile"></param>
	<param name="Host"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.InstanceChecker.CreateMutex(System.IntPtr,System.Boolean,System.String)">
	<summary>
 Imports the CreateMutex system call
 </summary>
	<param name="lpMutexAttributes"></param>
	<param name="InitialOwner"></param>
	<param name="MutexName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.InstanceChecker.ReleaseMutex(System.IntPtr)">
	<summary>
 Import ReleaseMutex system Call
 </summary>
	<param name="hMutex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.InstanceChecker.IsInstanceRunning">
	<summary>
 Check the Mutex to findout if the application instance is already running
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:MCDownloader.BatchProcessor.DownloadMonitor">
	<summary>
 Private class to maintaing the file download status.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.#ctor">
	<summary>
 Construtor for BatchProcessor.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.BatchProcess(System.DateTime)">
	<summary>
 Get SYNCTRL.DAT file.
 Parse the file and extract the file names that are ready to upload.
 Get the files ready for upload.
 </summary>
	<param name="dtAppExitToday"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.GetControlFile">
	<summary>
 Get SYNCTRL.DAT file from controller via TFTP.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.DownloadReferenceFiles">
	<summary>
 Function to donaload the reference files.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.IsFileAlreadyDownloaded(System.String)">
	<summary>
 Check if the file is already downloaded to the device.
 </summary>
	<param name="strFileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.ParseControlFile(System.String)">
	<summary>
 Parse SYNCTRL.DAT file and get the files that are build and ready.
 </summary>
	<param name="strFileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.CheckForPendingFileDownload(System.DateTime)">
	<summary>
 Function to check for any pending file to be downloaded from controller.
 </summary>
	<param name="dtBuildTimeBootCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.UpdateBuildTime(MCDownloader.FileDetails)">
	<summary>
 Function to update build time for a file after it is downloaded and 
 updated in the database.
 </summary>
	<param name="obj"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.CheckDownloadStatus(MCDownloader.FileDetails)">
	<summary>
 Function to check the download status of a file.
 </summary>
	<param name="obj"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.BatchProcessor.DeleteDBandBathcProcess">
	<summary>
 Function to delete the database if present and the BatchProcess.xml file when 
 the application is invoked for the first time for that day.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:MCDownloader.BatchProcessor">
***************************************************************
 <FileName>AppContainer.vb</FileName>
	<summary>
 The Main application container class which will 
 intialise all the applciation parameters.
 </summary>
	<Version>1.0</Version>
	<Author>Infosys Technologies Ltd.</Author>
	<DateModified>21-Nov-2008</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC70</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK 2008</CopyRight> 
***************************************************************
 * Modification Log
 
****************************************************************************
* 1.1    Archana Chandramathi    Jan 2013    
 <Summary>
 MCF changes - Checks whether MCF is enabled or not
 </Summary>
****************************************************************************

</member><member name="T:MCDownloader.Status">
	<summary>
 Enum to hold the thread status.
 </summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.ConfigParams">
 * Modification Log
 
******************************************************************************
* 1.1    Archana Chandramathi    Jan 2013    
 <Summary>
 MCF changes - Added variables for Primary, Secondary and Active IP addresses
 </Summary>
******************************************************************************

</member><member name="P:MCDownloader.My.Resources.Resources.ResourceManager">
	<summary>
   Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:MCDownloader.My.Resources.Resources.Culture">
	<summary>
   Overrides the current thread's CurrentUICulture property for all
   resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:MCDownloader.My.Resources.Resources">
	<summary>
   A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:MCDownloader.ReferenceFileParser.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.Initialise">
	<summary>
 Method to open connection to the device database.
 </summary>
	<returns>Bool
 True - If successfully opened a connection to the database.
 False - If failed to open a connection to the database.
 </returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.Terminate">
	<summary>
 Method to close the connection after executing the query.
 </summary>
	<returns>Bool
 True - If successfully closed the connection.
 False - If any error occured during the connection close.
 </returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseFile(System.String,System.Int32)">
	<summary>
 To invoke fucntion corresponding to the name of the file.
 </summary>
	<param name="strFileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.PurgeReferenceData">
	<summary>
 To clear the data present in the reference data table.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseBootCodeFile(System.String,System.String,System.Int32)">
	<summary>
 To parse bootcode.csv and update the DB
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseBarCode(System.String,System.String,System.Int32)">
	<summary>
  To parse barcode.csv and update the DB
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseDealFile(System.String,System.String,System.Int32)">
	<summary>
 To parse DEAL.CSV file and update DB
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParsePGroupFile(System.String,System.String,System.Int32)">
	<summary>
 To parse PGROUP.csv and update the DB
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseSupplierFile(System.String,System.String,System.Int32)">
	<summary>
  To parse SUPPLIER.csv and update the DB
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseUsersFile(System.String,System.String,System.Int32)">
	<summary>
 To parse USERS.csv and update the DB
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseRecallFile(System.String,System.String,System.Int32)">
	<summary>
  To parse RECALL.csv and update the DB
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseLivePOGFile(System.String,System.String,System.Int32)">
	<summary>
 To parse LIVEPOG.csv and update the DB
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseCategoryFile(System.String,System.String,System.Int32)">
	<summary>
  To parse CATEGORY.csv and update the DB
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseModuleFile(System.String,System.String,System.Int32)">
	<summary>
  To parse MODULE.csv and update the DB
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ParseShelFDescFile(System.String,System.String,System.Int32)">
	<summary>
  To parse SHELFDES.csv and update the DB
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.GenerateBCwithCDV(System.String)">
	<summary>
 Calculates the Boots Code based on CDV
 </summary>
	<param name="bootsCode">Boots code without CDV</param>
	<returns>Boots code with CDV</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.ExecuteSampleQuery(System.String)">
	<summary>
 To run sample queries to ease the Db data fetching 
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.DeleteIndex(System.String)">
	<summary>
 Function to delete index on the tables after populating the data.
 </summary>
	<param name="strTableName"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.CreateIndex(System.String@,System.String,System.String)">
	<summary>
 Function to create index on the tables after populating the data.
 </summary>
	<param name="strTableName"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.ReferenceFileParser.CreateStatistics(System.String,System.String)">
	<summary>
 Function to create statistics on the tables after populating the data.
 </summary>
	<param name="strTableName"></param>
	<remarks></remarks>
</member><member name="F:MCDownloader.SocketConnectionMgr.m_HostName">
	<summary>
 Member variables
 </summary>
	<remarks></remarks>
</member><member name="P:MCDownloader.SocketConnectionMgr.ConnectionStatus">
	<summary>
 Gets or sets the connection status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.SocketConnectionMgr.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.SocketConnectionMgr.InitialiseConnection">
	<summary>
 Initialise a connection to the TRANSACT.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.SocketConnectionMgr.TransmitData(System.Byte[])">
	<summary>
 Transmits record to the controller in byte stream.
 </summary>
	<param name="bExportData"></param>
	<returns>Bool
 True - If successfully transmitted the data to the controller.
 False - If error in transmitting the data to the controller.
 </returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.SocketConnectionMgr.ReadData(System.Byte[]@)">
	<summary>
 Read record from the stream.
 </summary>
	<param name="bRespData"></param>
	<returns>Bool
 True - If successfully read the data from the stream.
 False - If failed to read the data from the stream.
 </returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.SocketConnectionMgr.GetConnectionDetails">
	<summary>
 Gets the controller credentials from the config file.
 </summary>
	<returns>Bool
 True - If successfully obtained the setting from the config file.
 False - Any error occured in obtaining the config file.
 </returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.SocketConnectionMgr.TerminateConnection">
	<summary>
 Close the connection established with the TRANSACT.
 </summary>
	<returns>Bool
 True - If successfully transmitted all the data.
 False - Any failure in transmitting the export data.
 </returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.SocketConnectionMgr.GetIPParam(System.String)">
	<summary>
 Get the IP details from the IPCONFIG.XML file
 </summary>
	<param name="cKey">
 key to be searched in the xml file
 </param>
</member><member name="T:MCDownloader.SocketConnectionMgr">
****************************************************************************
 <FileName>SocketConnectionMgr.vb</FileName>
	<summary>
 Responsible for initialis and terminate connection with the TRANSACT 
 service running on the EPOS controller. Send and receive TRANSACT messages.
 </summary>
	<Version>1.0</Version>
	<Author>Infosys Technologies Ltd.</Author>
	<DateModified>27-Nov-2008</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC70</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK 2008</CopyRight> 
****************************************************************************

</member><member name="T:MCDownloader.SystemTime">
***************************************************************
 <FileName>SystemTime.vb</FileName>
	<summary>
 SystemTime structure to hold the system time as its represented
 by sytem OS
 </summary>
	<Version>1.0</Version>
	<Author>Infosys Technologies Ltd.</Author>
	<DateModified>21-Nov-2008</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC70</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK 2008</CopyRight> 
***************************************************************

</member><member name="T:MCDownloader.ConvertDateTime">
	<summary>
 Class ConvertDateTime helping to convert the system date time to
 a sequential SystemTime structure.
 </summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.TFTPClient.PacketMonitor">
	<summary>
 Class to set and collect the packet count.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.TFTPClient.TFTPSession.Get(System.String,System.String,System.String,MCDownloader.TFTPClient.TFTPSession.Modes,System.Int32,System.Int32,System.Int32)">
	<summary>
 TFTP Get function
 </summary>
	<param name="LocalFile"></param>
	<param name="RemoteFile"></param>
	<param name="Host"></param>
	<param name="Mode"></param>
	<param name="BlockSize"></param>
	<param name="Timeout"></param>
	<param name="Port"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.TFTPClient.TFTPSession.Get(System.Object)">
	<summary>
 Get method overloads.
 </summary>
	<param name="TransferOptions"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:MCDownloader.TFTPClient.TFTPSession">
	<summary>
 TFTP Get session manager class.
 </summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.Logger.LogLevel">
	<summary>
 Enum to set log level.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.Logger.#ctor">
	<summary>
 Constructor for LogFileUploader class
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.Logger.GetLogFileName">
	<summary>
 Function that returns the current log file that is in use by the downloader
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.Logger.WriteAppLog(System.String,MCDownloader.Logger.LogLevel)">
	<summary>
 Overloaded Sub implementing logging functionality based on level set
 </summary>
	<param name="strMessage"></param>
	<param name="eLoggingLevel"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.Logger.WriteAppLog(System.String)">
	<summary>
 Overloaded Sub for writing messages
 </summary>
	<param name="strMessage"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.Logger.GetLogLevel">
	<summary>
 Function reads the Log Level from the config file 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:MCDownloader.Logger">
	<summary>
 This class will be used for writing the application logs into a log file
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.PowerState.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.PowerState.SetSleepTimeOut(System.Int32)">
	<summary>
 To set/reset the sleep time out for the device.
 </summary>
	<param name="iTimeOut"></param>
	<remarks></remarks>
</member><member name="T:MCDownloader.PowerState">
	<summary>
 Class to set the system powerstate
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.LOGTransmitter.sendLog(MCDownloader.LOGTransmitter.Action,MCDownloader.LOGTransmitter.Status,MCDownloader.LOGTransmitter.FileName,MCDownloader.LOGTransmitter.Reasons,System.String)">
	<summary>
	</summary>
	<param name="LOG_Action"></param>
	<param name="LOG_Status"></param>
	<param name="enumFileName"></param>
	<param name="Error_Reason"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.LOGTransmitter.sendLog(MCDownloader.LOGTransmitter.Action,MCDownloader.LOGTransmitter.Status,System.String,MCDownloader.LOGTransmitter.Reasons,System.String)">
	<summary>
 Send Log _ Overload the FileName given as string
 </summary>
	<param name="LOG_Action"></param>
	<param name="LOG_Status"></param>
	<param name="strFileName"></param>
	<param name="Error_Reason"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:MCDownloader.LOGTransmitter.Action.TFTP_LOAD">
	<summary>
 TFTP Load
 </summary>
	<remarks>value : L</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.Action.TFTP_SEND">
	<summary>
 TFTP Send 
 </summary>
	<remarks>Value : S</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.Action.FTP_LOAD">
	<summary>
 FTP Load 
 </summary>
	<remarks>Value : F</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.Action.FTP_SEND">
	<summary>
 FTP Send 
 </summary>
	<remarks>Value: P</remarks>
</member><member name="T:MCDownloader.LOGTransmitter.Action">
	<summary>
 Log Message - Current Process
 </summary>
	<remarks>Current Process</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.Status.START">
	<summary>
 Processing of File Started 
 </summary>
	<remarks>value : S</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.Status.END_OK">
	<summary>
 Processing of File Completed Successfully
 </summary>
	<remarks>value : E</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.Status.ABEND">
	<summary>
 Processing of File Abended
 </summary>
	<remarks>value : X</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.Status.INFO">
	<summary>
 Information
 </summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.LOGTransmitter.Status">
	<summary>
 Log Message - currently Procesing File Status
 </summary>
	<remarks>Current Process File Staus</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.SYNCTRL">
	<summary>
 Sync Control file  (Control File)
 </summary>
	<remarks>File ID : 00</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.BOOTCODE">
	<summary>
 BootsCode.CSV File (Reference File)
 </summary>
	<remarks>File ID : 01</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.BARCODE">
	<summary>
 Barcode.csv File (Reference File) 
 </summary>
	<remarks>File ID : 02</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.DEAL">
	<summary>
 Deal.csv File File (Reference File)
 </summary>
	<remarks>File ID : 03</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.PGROUP">
	<summary>
 PGGroup.csv File (Reference File)
 </summary>
	<remarks>File ID : 04</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.SUPPLIER">
	<summary>
 Supplier.csv File (Reference File)
 </summary>
	<remarks>File ID : 05</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.USERS">
	<summary>
 Users.csv File (Reference File)
 </summary>
	<remarks>File ID : 06</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.RECALL">
	<summary>
 Recall.CSV File (Reference File)
 </summary>
	<remarks>File ID : 07</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.LIVEPOG">
	<summary>
 Livepog.csv File (Reference File)
 </summary>
	<remarks>File ID : 08</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.CATEGORY">
	<summary>
 Category.csv File (Reference File)
 </summary>
	<remarks>File ID : 09</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.MODULES">
	<summary>
 Module.csv File (Reference File)
 </summary>
	<remarks>File ID : 10</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.SHELFDES">
	<summary>
 Shelfdes.csv File (Reference File)
 </summary>
	<remarks>File ID : 11</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.CONTROL">
	<summary>
 Control.csv File (Active File)
 </summary>
	<remarks>File ID : 12</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.PICKING">
	<summary>
 Picking.csv file (Active File)
 </summary>
	<remarks>File ID : 13</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.COUNT">
	<summary>
 Count.csv File (Active File)
 </summary>
	<remarks>File ID : 14</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.CREDIT">
	<summary>
 Credit.csv File (Active File)
 </summary>
	<remarks>File ID : 15</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.DIRECTS">
	<summary>
 Directs.CSV File (Active File)
 </summary>
	<remarks>File ID : 16</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.ASN">
	<summary>
 ASN.CSV File. (Active File)
 </summary>
	<remarks>File ID : 17</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.SSCUODOT">
	<summary>
 SSCUODOT.csv File (Active File)
 </summary>
	<remarks>File ID : 18</remarks>
</member><member name="F:MCDownloader.LOGTransmitter.FileName.POD_Log_Files">
	<summary>
 All Log Files. Have to be zipped and send to controller
 </summary>
	<remarks>File ID : 99</remarks>
</member><member name="T:MCDownloader.LOGTransmitter.FileName">
	<summary>
 Log Message - currently Procesing File 
 </summary>
	<remarks>File Name which is currently under Process</remarks>
</member><member name="T:MCDownloader.LOGTransmitter.Reasons">
	<summary>
 Reason for the error
 Choose from the category or choose Other error
 </summary>
	<remarks>Enum to have all the errors</remarks>
</member><member name="T:MCDownloader.LOGTransmitter">
 * Modification Log
 
****************************************************************************
* 1.1    Archana Chandramathi    Jan 2013    
 <Summary>
 MCF changes - Checks whether MCF is enabled or not
 </Summary>
****************************************************************************

</member><member name="T:MCDownloader.ReferenceFileMacro">
	<summary>
 Define Macros that are used by MCDownloader application.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.RefernceFileDownload.#ctor(System.String)">
	<summary>
 Constructor to initialize values for file download
 </summary>
	<param name="strFileName"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.RefernceFileDownload.DownloadThread">
	<summary>
 Method to start download the file
 Usually runs as a seperate thered for each file download
 </summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.RefernceFileDownload">
***************************************************************
 <FileName>ReferenceFileDownloader.vb</FileName>
	<summary>
 The Main application container class which will 
 intialise all the applciation parameters.
 </summary>
	<Version>1.0</Version>
	<Author>Infosys Technologies Ltd.</Author>
	<DateModified>21-Nov-2008</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC70</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK 2008</CopyRight> 
***************************************************************

</member><member name="F:MCDownloader.AppContainer.objLogMessageTransmitter">
	<summary>
 Used to create and send the log messages
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.#ctor">
	<summary>
 Contructor, retrieves information from configuration xml
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.GetInstance">
	<summary>
 GetInstance to get the instance of singleton class
 </summary>
	<returns>AppContainer</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.Start">
	<summary>
 The Start Method to enter into the processing logic
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.StartTimer">
	<summary>
 The timer paramers are set 
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.IntervalTill(System.DateTime)">
	<summary>
 Function to get the timedifference in milliseconds between time.now and the timepassed
 </summary>
	<param name="dtTime"></param>
	<returns>tsDifference</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.GetTime(System.String,System.String)">
	<summary>
 v1.2 added as part of Automated Date and Time changes
 Function to get the time and date from the controller using SOR message
 </summary>
	<returns>boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.SendSOR(System.String,System.String@)">
	<summary>
 v1.2 added as part of Automated Date and Time changes
 To send SOR record.
 </summary>
	<param name="strRecords"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.SendRecord(System.String)">
	<summary>
 v1.2 added as part of Automated Date and Time changes
 Convert the record to bytes and send to the TRANSACT service.
 Receive the response and parse it to get the details.
 </summary>
	<param name="strRecord">Record to be sent to the TRANSACT</param>
	<returns> Bool
 True if successfully sent and received the records.
 False is any error occurred during send / receive operation.
 </returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.ParseResponse(System.String)">
	<summary>
 v1.2 added as part of Automated Date and Time changes
 To parse the resonse received from the TRANSACT service and return status
 accordingly.
 </summary>
	<param name="m_ResponseMessage">Response message received from the 
 TRANSACT service</param>
	<returns>Bool
 True - ACK, SNR is received.
 False - NAK is received or any error occurred.
 </returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.SetDeviceDateTime(System.String)">
	<summary>
 v1.2 added as part of Automated Date and Time changes
 To set device time to same as controller time.
 </summary>
	<param name="strDateTime">Datetime string recevived from controller</param>
	<returns>
 True - If successfully set the device time.
 False - If error in setting the device time.
 </returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.CheckFirstInvoke">
	<summary>
 Function to set the next auto Inovoke time
 Returns true if the function is invoked inbetween startime and endtime for 
 daily download
 Returns false if invoked at any other time - assumes that the application is 
 invoked to set the first autoinvoke
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.TimerEventProcessor(System.Object,System.EventArgs)">
	<summary>
 This is the method to run when the timer is raised.
 </summary>
	<param name="myObject"></param>
	<param name="myEventArgs"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.RegisterApp">
	<summary>
 Set invoke time for next day.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.DisplayScreen(System.Int32)">
	<summary>
 To display the screen.
 </summary>
	<param name="iScreenName"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.DeleteExDataFile">
	<summary>
 Delete all export data files that are present in the device.
 This is to make sure that the presvious day's export data is not
 present in the device on next day.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.sChangeActiveIP">
	<summary>
 Change the active IP global variable.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.AppContainer.CeRunAppAtTime(System.String,System.IntPtr)">
	<summary>
 Imports CeRunappTime of Coredll to register an application to run at a specific time
 </summary>
	<param name="AppName"></param>
	<param name="ExecTime"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:MCDownloader.AppContainer">
****************************************************************************
 <FileName>AppContainer.vb</FileName>
	<summary>
 The Main application container class which will intialise all the 
 applciation parameters.AppContainer Class to initialize and control the 
 program exection
 </summary>
	<Version>1.0</Version>
	<Author>Infosys Technologies Ltd.</Author>
	<DateModified>21-Nov-2008</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC70</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK 2008</CopyRight> 
****************************************************************************
 * Modification Log
 
****************************************************************************
* 1.1    Archana Chandramathi    Jan 2013    
 <Summary>
 MCF changes - Checks whether MCF is enabled or not
 </Summary>
****************************************************************************
* 1.2    Arun Karikunnath       Jan 2016
 <Summary>
 Automated Date and Time changes - Gets the latest date and time from 
 controller by sending a SOR message before checking for refference data 
 download.
 </Summary> 
**************************************************************************** 

</member><member name="M:MCDownloader.LogFileUploader.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="T:MCDownloader.LogFileUploader.Download">
	<summary>
 Downloade class to initiate and manage file download.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.LogFileUploader.Start">
	<summary>
 Functions that is responsible for downloading log files.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.LogFileUploader.GetIPAddress">
	<summary>
 To check for the dynamic IP generated when the device is docked
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.LogFileUploader.CheckDeviceDocked">
	<summary>
 Function to check whether the device is docked or not.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.LogFileUploader.AppendIPInLogFileName">
	<summary>
 Function to remove the file extention and append last subnet of 
 IP address as file extension for all file in a specified directory.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.LogFileUploader.AppendIPInLogFileName(System.String,System.String)">
	<summary>
 Function to remove the file extention and append last subnet of 
 IP address as file extension for a specified file.
 </summary>
	<param name="strFileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.LogFileUploader.IsLogFileStale(System.String)">
	<summary>
 To identify stale logfiles.
 </summary>
	<param name="strFileName">Logfile name</param>
	<returns>True if the Log file is stale, else false</returns>
	<remarks></remarks>
</member><member name="T:MCDownloader.LogFileUploader">
	<summary>
 Class to handle downloading log files to the controller.
 </summary>
	<remarks></remarks>
 * Modification Log
 
****************************************************************************
* 1.1    Archana Chandramathi    Jan 2013    
 <Summary>
 MCF changes - Refers to active controller IP address while connecting
 </Summary>
****************************************************************************

</member><member name="T:MCDownloader.mainModule">
***************************************************************
 <FileName>Program.vb</FileName>
	<summary>
 The Main Program Entry Point.
 </summary>
	<Version>1.0</Version>
	<Author>Infosys Technologies Ltd.</Author>
	<DateModified>21-Nov-2008</DateModified>
	<Platform>Visual Basic, MS .Net CF 3.5 for MC70</Platform>
	<CopyRight>Boots the Chemists Ltd, Boots UK 2008</CopyRight> 
***************************************************************

</member><member name="M:MCDownloader.frmDownloadReferenceData.SetDBUpdationstatus(System.Int32)">
	<summary>
 Set the status bar details along with db updation.
 </summary>
	<param name="Percentage"></param>
	<remarks></remarks>
</member><member name="M:MCDownloader.frmDownloadReferenceData.DBUpdationStart">
	<summary>
 Function to perform initial settings before updating the database.
 </summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.ConfigParser.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.ConfigParser.GetInstance">
	<summary>
 GetInstance to get the instance of singleton class
 </summary>
	<returns>ConfigParser</returns>
	<remarks></remarks>
</member><member name="M:MCDownloader.ConfigParser.ReadXml">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.ConfigParser.WriteXml">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:MCDownloader.ConfigParser.LoadIPConfig">
	<summary>
 This function implements the xml parser for the IP config file.
 </summary>
</member><member name="M:MCDownloader.ConfigParser.GetIPParam(System.String)">
	<summary>
 Get the IP details from the IPCONFIG.XML file
 </summary>
	<param name="cKey">
 key to be searched in the xml file
 </param>
</member><member name="M:MCDownloader.ConfigParser.SetActiveIP">
	<summary>
 Set the activeIP key value
 </summary>
</member><member name="T:MCDownloader.ConfigParser">
 * Modification Log
 
****************************************************************************
* 1.1    Archana Chandramathi    Jan 2013    
 <Summary>
 MCF changes - Loads controller IP address from IPCONFG.XML file
 </Summary>
****************************************************************************

</member>
</members>
</doc>